
/Users/jcarouth/projects/personal/particle-counter/target/1.5.0/argon/particle-counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002810  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6830  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e33c  000d6834  0001e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000444  2003e3ac  2003e3ac  0002e3ac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d68a4  000d68a4  000268a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d68cc  000d68cc  000268cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e336d  00000000  00000000  000268d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011c41  00000000  00000000  00109c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ceee  00000000  00000000  0011b87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002378  00000000  00000000  0013876c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000043e0  00000000  00000000  0013aae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037a19  00000000  00000000  0013eec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ba1c  00000000  00000000  001768dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107376  00000000  00000000  001a22f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c894  00000000  00000000  002a9670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f9ff 	bl	d6434 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fa04 	bl	d644a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e33c 	.word	0x2003e33c
   d404c:	000d6834 	.word	0x000d6834
   d4050:	2003e3ac 	.word	0x2003e3ac
   d4054:	2003e3ac 	.word	0x2003e3ac
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fabb 	bl	d55d8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6830 	.word	0x000d6830
   d4084:	000d67f0 	.word	0x000d67f0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b814 	b.w	d40b4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f85b 	bl	d4148 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 ba61 	b.w	d555c <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bdbd 	b.w	d4c18 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bdbb 	b.w	d4c18 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
int pushCount = 0;
int currentState = 0;
int lastState = 0;

void setup()
{
   d40b4:	b510      	push	{r4, lr}
  pinMode(pinButton, INPUT);
   d40b6:	4b1e      	ldr	r3, [pc, #120]	; (d4130 <setup+0x7c>)
  pinMode(pinLed, OUTPUT);

  leds.init();
   d40b8:	4c1e      	ldr	r4, [pc, #120]	; (d4134 <setup+0x80>)
int currentState = 0;
int lastState = 0;

void setup()
{
  pinMode(pinButton, INPUT);
   d40ba:	8818      	ldrh	r0, [r3, #0]
   d40bc:	2100      	movs	r1, #0
   d40be:	f001 fad9 	bl	d5674 <pinMode>
  pinMode(pinLed, OUTPUT);
   d40c2:	4b1d      	ldr	r3, [pc, #116]	; (d4138 <setup+0x84>)
   d40c4:	2101      	movs	r1, #1
   d40c6:	8818      	ldrh	r0, [r3, #0]
   d40c8:	f001 fad4 	bl	d5674 <pinMode>

  leds.init();
   d40cc:	4620      	mov	r0, r4
   d40ce:	f000 fa83 	bl	d45d8 <_ZN12ChainableLED4initEv>
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d40d2:	ed9f 1a1a 	vldr	s2, [pc, #104]	; d413c <setup+0x88>
   d40d6:	4620      	mov	r0, r4

  tm1637.init();
   d40d8:	4c19      	ldr	r4, [pc, #100]	; (d4140 <setup+0x8c>)
{
  pinMode(pinButton, INPUT);
  pinMode(pinLed, OUTPUT);

  leds.init();
  leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d40da:	eef0 0a41 	vmov.f32	s1, s2
   d40de:	eeb0 0a41 	vmov.f32	s0, s2
   d40e2:	2100      	movs	r1, #0
   d40e4:	f000 fb18 	bl	d4718 <_ZN12ChainableLED11setColorHSBEhfff>

  tm1637.init();
   d40e8:	4620      	mov	r0, r4
   d40ea:	f000 f9b7 	bl	d445c <_ZN6TM16374initEv>
  tm1637.set(BRIGHT_TYPICAL);
   d40ee:	23c0      	movs	r3, #192	; 0xc0
   d40f0:	2240      	movs	r2, #64	; 0x40
   d40f2:	4620      	mov	r0, r4
   d40f4:	2102      	movs	r1, #2
   d40f6:	f000 f958 	bl	d43aa <_ZN6TM16373setEhhh>
  tm1637.point(POINT_OFF);
   d40fa:	4620      	mov	r0, r4
   d40fc:	2100      	movs	r1, #0
   d40fe:	f000 f959 	bl	d43b4 <_ZN6TM16375pointEb>
  tm1637.display(0, 0);
   d4102:	2200      	movs	r2, #0
   d4104:	4611      	mov	r1, r2
   d4106:	4620      	mov	r0, r4
   d4108:	f000 f964 	bl	d43d4 <_ZN6TM16377displayEha>
  tm1637.display(1, 0);
   d410c:	4620      	mov	r0, r4
   d410e:	2200      	movs	r2, #0
   d4110:	2101      	movs	r1, #1
   d4112:	f000 f95f 	bl	d43d4 <_ZN6TM16377displayEha>
  tm1637.display(2, 0);
   d4116:	4620      	mov	r0, r4
   d4118:	2200      	movs	r2, #0
   d411a:	2102      	movs	r1, #2
   d411c:	f000 f95a 	bl	d43d4 <_ZN6TM16377displayEha>
  tm1637.display(3, 0);
   d4120:	4620      	mov	r0, r4
   d4122:	2200      	movs	r2, #0
   d4124:	2103      	movs	r1, #3
}
   d4126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tm1637.set(BRIGHT_TYPICAL);
  tm1637.point(POINT_OFF);
  tm1637.display(0, 0);
  tm1637.display(1, 0);
  tm1637.display(2, 0);
  tm1637.display(3, 0);
   d412a:	f000 b953 	b.w	d43d4 <_ZN6TM16377displayEha>
   d412e:	bf00      	nop
   d4130:	2003e340 	.word	0x2003e340
   d4134:	2003e3b0 	.word	0x2003e3b0
   d4138:	2003e33c 	.word	0x2003e33c
   d413c:	00000000 	.word	0x00000000
   d4140:	2003e3b8 	.word	0x2003e3b8
   d4144:	00000000 	.word	0x00000000

000d4148 <loop>:
}

void loop()
{
   d4148:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  int buttonPressed = digitalRead(pinButton);
   d414c:	4b42      	ldr	r3, [pc, #264]	; (d4258 <loop+0x110>)
   d414e:	4f43      	ldr	r7, [pc, #268]	; (d425c <loop+0x114>)
   d4150:	8818      	ldrh	r0, [r3, #0]
   d4152:	f001 fab9 	bl	d56c8 <digitalRead>

  if(buttonPressed) 
   d4156:	4604      	mov	r4, r0
   d4158:	b110      	cbz	r0, d4160 <loop+0x18>
  {
    currentState = 1;
   d415a:	2301      	movs	r3, #1
   d415c:	603b      	str	r3, [r7, #0]
   d415e:	e000      	b.n	d4162 <loop+0x1a>
  } 
  else 
  {
    currentState = 0;
   d4160:	6038      	str	r0, [r7, #0]
  }

  if (currentState != lastState) {
   d4162:	4e3f      	ldr	r6, [pc, #252]	; (d4260 <loop+0x118>)
   d4164:	683a      	ldr	r2, [r7, #0]
   d4166:	6833      	ldr	r3, [r6, #0]
   d4168:	429a      	cmp	r2, r3
   d416a:	d06c      	beq.n	d4246 <loop+0xfe>
   d416c:	f8df 8104 	ldr.w	r8, [pc, #260]	; d4274 <loop+0x12c>
    if(buttonPressed)
   d4170:	2c00      	cmp	r4, #0
   d4172:	d057      	beq.n	d4224 <loop+0xdc>
    {
      double color = 0.0;
      if (pushCount <= 200) {
   d4174:	4c3b      	ldr	r4, [pc, #236]	; (d4264 <loop+0x11c>)
   d4176:	6825      	ldr	r5, [r4, #0]
   d4178:	2dc8      	cmp	r5, #200	; 0xc8
   d417a:	dc0c      	bgt.n	d4196 <loop+0x4e>
        color = 0.005 * pushCount;
   d417c:	4628      	mov	r0, r5
   d417e:	f001 fdd3 	bl	d5d28 <__aeabi_i2d>
   d4182:	a333      	add	r3, pc, #204	; (adr r3, d4250 <loop+0x108>)
   d4184:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4188:	f001 fe34 	bl	d5df4 <__aeabi_dmul>
        pushCount++;
   d418c:	3501      	adds	r5, #1
  if (currentState != lastState) {
    if(buttonPressed)
    {
      double color = 0.0;
      if (pushCount <= 200) {
        color = 0.005 * pushCount;
   d418e:	4682      	mov	sl, r0
   d4190:	468b      	mov	fp, r1
        pushCount++;
   d4192:	6025      	str	r5, [r4, #0]
   d4194:	e005      	b.n	d41a2 <loop+0x5a>
      } else {
        color = 0.0;
        pushCount = 0;
   d4196:	2300      	movs	r3, #0
   d4198:	6023      	str	r3, [r4, #0]
      double color = 0.0;
      if (pushCount <= 200) {
        color = 0.005 * pushCount;
        pushCount++;
      } else {
        color = 0.0;
   d419a:	f04f 0a00 	mov.w	sl, #0
   d419e:	f04f 0b00 	mov.w	fp, #0
        pushCount = 0;
      }

      digitalWrite(pinLed, HIGH);
   d41a2:	f8b8 0000 	ldrh.w	r0, [r8]
   d41a6:	2101      	movs	r1, #1
   d41a8:	f001 fa75 	bl	d5696 <digitalWrite>
      leds.setColorHSB(0, color, 1.0, 0.5);
   d41ac:	4659      	mov	r1, fp
   d41ae:	4650      	mov	r0, sl
   d41b0:	f002 f8da 	bl	d6368 <__aeabi_d2f>
   d41b4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
   d41b8:	ee00 0a10 	vmov	s0, r0
   d41bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   d41c0:	2100      	movs	r1, #0
   d41c2:	4829      	ldr	r0, [pc, #164]	; (d4268 <loop+0x120>)
   d41c4:	f000 faa8 	bl	d4718 <_ZN12ChainableLED11setColorHSBEhfff>

      int countCopy = pushCount;
   d41c8:	6825      	ldr	r5, [r4, #0]

      tm1637.display(3, countCopy % 10);
   d41ca:	4828      	ldr	r0, [pc, #160]	; (d426c <loop+0x124>)
   d41cc:	240a      	movs	r4, #10
   d41ce:	fb95 f8f4 	sdiv	r8, r5, r4
   d41d2:	fb04 5218 	mls	r2, r4, r8, r5
   d41d6:	b252      	sxtb	r2, r2
   d41d8:	2103      	movs	r1, #3
   d41da:	f000 f8fb 	bl	d43d4 <_ZN6TM16377displayEha>
      countCopy /= 10;
      tm1637.display(2, countCopy % 10);
   d41de:	fb98 f2f4 	sdiv	r2, r8, r4
   d41e2:	fb04 8212 	mls	r2, r4, r2, r8
   d41e6:	b252      	sxtb	r2, r2
   d41e8:	2102      	movs	r1, #2
   d41ea:	4820      	ldr	r0, [pc, #128]	; (d426c <loop+0x124>)
   d41ec:	f000 f8f2 	bl	d43d4 <_ZN6TM16377displayEha>
      countCopy /= 10;
      tm1637.display(1, countCopy % 10);
   d41f0:	2364      	movs	r3, #100	; 0x64
   d41f2:	fb95 f3f3 	sdiv	r3, r5, r3
   d41f6:	fb93 f2f4 	sdiv	r2, r3, r4
   d41fa:	fb04 3212 	mls	r2, r4, r2, r3
   d41fe:	b252      	sxtb	r2, r2
   d4200:	2101      	movs	r1, #1
   d4202:	481a      	ldr	r0, [pc, #104]	; (d426c <loop+0x124>)
   d4204:	f000 f8e6 	bl	d43d4 <_ZN6TM16377displayEha>
      countCopy /= 10;
      tm1637.display(0, countCopy % 10);
   d4208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d420c:	fb95 f5f2 	sdiv	r5, r5, r2
   d4210:	fb95 f2f4 	sdiv	r2, r5, r4
   d4214:	fb04 5212 	mls	r2, r4, r2, r5
   d4218:	b252      	sxtb	r2, r2
   d421a:	2100      	movs	r1, #0
   d421c:	4813      	ldr	r0, [pc, #76]	; (d426c <loop+0x124>)
   d421e:	f000 f8d9 	bl	d43d4 <_ZN6TM16377displayEha>
   d4222:	e00e      	b.n	d4242 <loop+0xfa>
    }
    else
    {
      digitalWrite(pinLed, LOW);
   d4224:	4621      	mov	r1, r4
   d4226:	f8b8 0000 	ldrh.w	r0, [r8]
   d422a:	f001 fa34 	bl	d5696 <digitalWrite>
      leds.setColorHSB(0, 0.0, 0.0, 0.0);
   d422e:	ed9f 1a10 	vldr	s2, [pc, #64]	; d4270 <loop+0x128>
   d4232:	480d      	ldr	r0, [pc, #52]	; (d4268 <loop+0x120>)
   d4234:	eef0 0a41 	vmov.f32	s1, s2
   d4238:	eeb0 0a41 	vmov.f32	s0, s2
   d423c:	4621      	mov	r1, r4
   d423e:	f000 fa6b 	bl	d4718 <_ZN12ChainableLED11setColorHSBEhfff>
    }

    lastState = currentState;
   d4242:	683b      	ldr	r3, [r7, #0]
   d4244:	6033      	str	r3, [r6, #0]
  }
  
  delay(10);
   d4246:	200a      	movs	r0, #10
   d4248:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    }

    lastState = currentState;
  }
  
  delay(10);
   d424c:	f000 bcf4 	b.w	d4c38 <delay>
   d4250:	47ae147b 	.word	0x47ae147b
   d4254:	3f747ae1 	.word	0x3f747ae1
   d4258:	2003e340 	.word	0x2003e340
   d425c:	2003e3c0 	.word	0x2003e3c0
   d4260:	2003e3c4 	.word	0x2003e3c4
   d4264:	2003e3c8 	.word	0x2003e3c8
   d4268:	2003e3b0 	.word	0x2003e3b0
   d426c:	2003e3b8 	.word	0x2003e3b8
   d4270:	00000000 	.word	0x00000000
   d4274:	2003e33c 	.word	0x2003e33c

000d4278 <_GLOBAL__sub_I_pinButton>:
   d4278:	b510      	push	{r4, lr}
#include "Grove_4Digit_Display.h"

int pinButton = D2;
int pinLed = D7;

ChainableLED leds(A4, A5, 1);
   d427a:	4c0a      	ldr	r4, [pc, #40]	; (d42a4 <_GLOBAL__sub_I_pinButton+0x2c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d427c:	f000 fb50 	bl	d4920 <HAL_Pin_Map>
   d4280:	2301      	movs	r3, #1
   d4282:	220e      	movs	r2, #14
   d4284:	210f      	movs	r1, #15
   d4286:	4620      	mov	r0, r4
   d4288:	f000 f8ec 	bl	d4464 <_ZN12ChainableLEDC1Ehhh>
   d428c:	4a06      	ldr	r2, [pc, #24]	; (d42a8 <_GLOBAL__sub_I_pinButton+0x30>)
   d428e:	4907      	ldr	r1, [pc, #28]	; (d42ac <_GLOBAL__sub_I_pinButton+0x34>)
   d4290:	4620      	mov	r0, r4
   d4292:	f001 fa8d 	bl	d57b0 <__aeabi_atexit>
TM1637 tm1637(D4, D5);
   d4296:	2205      	movs	r2, #5
   d4298:	2104      	movs	r1, #4
   d429a:	4805      	ldr	r0, [pc, #20]	; (d42b0 <_GLOBAL__sub_I_pinButton+0x38>)

    lastState = currentState;
  }
  
  delay(10);
   d429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

int pinButton = D2;
int pinLed = D7;

ChainableLED leds(A4, A5, 1);
TM1637 tm1637(D4, D5);
   d42a0:	f000 b808 	b.w	d42b4 <_ZN6TM1637C1Ehh>
   d42a4:	2003e3b0 	.word	0x2003e3b0
   d42a8:	2003e3ac 	.word	0x2003e3ac
   d42ac:	000d447f 	.word	0x000d447f
   d42b0:	2003e3b8 	.word	0x2003e3b8

000d42b4 <_ZN6TM1637C1Ehh>:
#include <Arduino.h>
static int8_t TubeTab[] = {0x3f,0x06,0x5b,0x4f,
                           0x66,0x6d,0x7d,0x07,
                           0x7f,0x6f,0x77,0x7c,
                           0x39,0x5e,0x79,0x71};//0~9,A,b,C,d,E,F
TM1637::TM1637(uint8_t Clk, uint8_t Data)
   d42b4:	b510      	push	{r4, lr}
   d42b6:	4604      	mov	r4, r0
   d42b8:	4608      	mov	r0, r1
{
  Clkpin = Clk;
   d42ba:	7121      	strb	r1, [r4, #4]
  Datapin = Data;
   d42bc:	7162      	strb	r2, [r4, #5]
  pinMode(Clkpin,OUTPUT);
   d42be:	2101      	movs	r1, #1
   d42c0:	f001 f9d8 	bl	d5674 <pinMode>
  pinMode(Datapin,OUTPUT);
   d42c4:	7960      	ldrb	r0, [r4, #5]
   d42c6:	2101      	movs	r1, #1
   d42c8:	f001 f9d4 	bl	d5674 <pinMode>
}
   d42cc:	4620      	mov	r0, r4
   d42ce:	bd10      	pop	{r4, pc}

000d42d0 <_ZN6TM16379writeByteEa>:
{
  clearDisplay();
}

int TM1637::writeByte(int8_t wr_data)
{
   d42d0:	b570      	push	{r4, r5, r6, lr}
   d42d2:	4604      	mov	r4, r0
   d42d4:	460e      	mov	r6, r1
   d42d6:	2508      	movs	r5, #8
  uint8_t i,count1;
  for(i=0;i<8;i++)        //sent 8bit data
  {
    digitalWrite(Clkpin,LOW);
   d42d8:	2100      	movs	r1, #0
   d42da:	7920      	ldrb	r0, [r4, #4]
   d42dc:	f001 f9db 	bl	d5696 <digitalWrite>
    if(wr_data & 0x01)digitalWrite(Datapin,HIGH);//LSB first
   d42e0:	f016 0101 	ands.w	r1, r6, #1
   d42e4:	bf18      	it	ne
   d42e6:	2101      	movne	r1, #1
   d42e8:	7960      	ldrb	r0, [r4, #5]
    else digitalWrite(Datapin,LOW);
   d42ea:	f001 f9d4 	bl	d5696 <digitalWrite>
   d42ee:	3d01      	subs	r5, #1
    wr_data >>= 1;
    digitalWrite(Clkpin,HIGH);
   d42f0:	2101      	movs	r1, #1
   d42f2:	7920      	ldrb	r0, [r4, #4]
   d42f4:	f001 f9cf 	bl	d5696 <digitalWrite>
}

int TM1637::writeByte(int8_t wr_data)
{
  uint8_t i,count1;
  for(i=0;i<8;i++)        //sent 8bit data
   d42f8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    digitalWrite(Clkpin,LOW);
    if(wr_data & 0x01)digitalWrite(Datapin,HIGH);//LSB first
    else digitalWrite(Datapin,LOW);
    wr_data >>= 1;
   d42fc:	ea4f 0666 	mov.w	r6, r6, asr #1
}

int TM1637::writeByte(int8_t wr_data)
{
  uint8_t i,count1;
  for(i=0;i<8;i++)        //sent 8bit data
   d4300:	d1ea      	bne.n	d42d8 <_ZN6TM16379writeByteEa+0x8>
    else digitalWrite(Datapin,LOW);
    wr_data >>= 1;
    digitalWrite(Clkpin,HIGH);

  }
  digitalWrite(Clkpin,LOW); //wait for the ACK
   d4302:	4629      	mov	r1, r5
   d4304:	7920      	ldrb	r0, [r4, #4]
   d4306:	f001 f9c6 	bl	d5696 <digitalWrite>
  digitalWrite(Datapin,HIGH);
   d430a:	2101      	movs	r1, #1
   d430c:	7960      	ldrb	r0, [r4, #5]
   d430e:	f001 f9c2 	bl	d5696 <digitalWrite>
  digitalWrite(Clkpin,HIGH);
   d4312:	2101      	movs	r1, #1
   d4314:	7920      	ldrb	r0, [r4, #4]
   d4316:	f001 f9be 	bl	d5696 <digitalWrite>
  pinMode(Datapin,INPUT);
   d431a:	4629      	mov	r1, r5
   d431c:	7960      	ldrb	r0, [r4, #5]
   d431e:	f001 f9a9 	bl	d5674 <pinMode>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4322:	2032      	movs	r0, #50	; 0x32
   d4324:	f000 faec 	bl	d4900 <HAL_Delay_Microseconds>

  bitDelay();
  uint8_t ack = digitalRead(Datapin);
   d4328:	7960      	ldrb	r0, [r4, #5]
   d432a:	f001 f9cd 	bl	d56c8 <digitalRead>
  if (ack == 0) 
   d432e:	b2c6      	uxtb	r6, r0
   d4330:	b93e      	cbnz	r6, d4342 <_ZN6TM16379writeByteEa+0x72>
  {
     pinMode(Datapin,OUTPUT);
   d4332:	2101      	movs	r1, #1
   d4334:	7960      	ldrb	r0, [r4, #5]
   d4336:	f001 f99d 	bl	d5674 <pinMode>
     digitalWrite(Datapin,LOW);
   d433a:	4629      	mov	r1, r5
   d433c:	7960      	ldrb	r0, [r4, #5]
   d433e:	f001 f9aa 	bl	d5696 <digitalWrite>
   d4342:	2032      	movs	r0, #50	; 0x32
   d4344:	f000 fadc 	bl	d4900 <HAL_Delay_Microseconds>
  }
  bitDelay();
  pinMode(Datapin,OUTPUT);
   d4348:	2101      	movs	r1, #1
   d434a:	7960      	ldrb	r0, [r4, #5]
   d434c:	f001 f992 	bl	d5674 <pinMode>
   d4350:	2032      	movs	r0, #50	; 0x32
   d4352:	f000 fad5 	bl	d4900 <HAL_Delay_Microseconds>
  bitDelay();
  
  return ack;
}
   d4356:	4630      	mov	r0, r6
   d4358:	bd70      	pop	{r4, r5, r6, pc}

000d435a <_ZN6TM16375startEv>:
//send start signal to TM1637
void TM1637::start(void)
{
   d435a:	b510      	push	{r4, lr}
   d435c:	4604      	mov	r4, r0
  digitalWrite(Clkpin,HIGH);//send start signal to TM1637
   d435e:	2101      	movs	r1, #1
   d4360:	7900      	ldrb	r0, [r0, #4]
   d4362:	f001 f998 	bl	d5696 <digitalWrite>
  digitalWrite(Datapin,HIGH);
   d4366:	7960      	ldrb	r0, [r4, #5]
   d4368:	2101      	movs	r1, #1
   d436a:	f001 f994 	bl	d5696 <digitalWrite>
  digitalWrite(Datapin,LOW);
   d436e:	7960      	ldrb	r0, [r4, #5]
   d4370:	2100      	movs	r1, #0
   d4372:	f001 f990 	bl	d5696 <digitalWrite>
  digitalWrite(Clkpin,LOW);
   d4376:	7920      	ldrb	r0, [r4, #4]
   d4378:	2100      	movs	r1, #0
}
   d437a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void TM1637::start(void)
{
  digitalWrite(Clkpin,HIGH);//send start signal to TM1637
  digitalWrite(Datapin,HIGH);
  digitalWrite(Datapin,LOW);
  digitalWrite(Clkpin,LOW);
   d437e:	f001 b98a 	b.w	d5696 <digitalWrite>

000d4382 <_ZN6TM16374stopEv>:
}
//End of transmission
void TM1637::stop(void)
{
   d4382:	b510      	push	{r4, lr}
   d4384:	4604      	mov	r4, r0
  digitalWrite(Clkpin,LOW);
   d4386:	2100      	movs	r1, #0
   d4388:	7900      	ldrb	r0, [r0, #4]
   d438a:	f001 f984 	bl	d5696 <digitalWrite>
  digitalWrite(Datapin,LOW);
   d438e:	7960      	ldrb	r0, [r4, #5]
   d4390:	2100      	movs	r1, #0
   d4392:	f001 f980 	bl	d5696 <digitalWrite>
  digitalWrite(Clkpin,HIGH);
   d4396:	7920      	ldrb	r0, [r4, #4]
   d4398:	2101      	movs	r1, #1
   d439a:	f001 f97c 	bl	d5696 <digitalWrite>
  digitalWrite(Datapin,HIGH);
   d439e:	7960      	ldrb	r0, [r4, #5]
   d43a0:	2101      	movs	r1, #1
}
   d43a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void TM1637::stop(void)
{
  digitalWrite(Clkpin,LOW);
  digitalWrite(Datapin,LOW);
  digitalWrite(Clkpin,HIGH);
  digitalWrite(Datapin,HIGH);
   d43a6:	f001 b976 	b.w	d5696 <digitalWrite>

000d43aa <_ZN6TM16373setEhhh>:
//To take effect the next time it displays.
void TM1637::set(uint8_t brightness,uint8_t SetData,uint8_t SetAddr)
{
  Cmd_SetData = SetData;
  Cmd_SetAddr = SetAddr;
  Cmd_DispCtrl = 0x88 + brightness;//Set the brightness and it takes effect the next time it displays.
   d43aa:	3978      	subs	r1, #120	; 0x78
  display(0x03,0x7f);
}
//To take effect the next time it displays.
void TM1637::set(uint8_t brightness,uint8_t SetData,uint8_t SetAddr)
{
  Cmd_SetData = SetData;
   d43ac:	7002      	strb	r2, [r0, #0]
  Cmd_SetAddr = SetAddr;
   d43ae:	7043      	strb	r3, [r0, #1]
  Cmd_DispCtrl = 0x88 + brightness;//Set the brightness and it takes effect the next time it displays.
   d43b0:	7081      	strb	r1, [r0, #2]
   d43b2:	4770      	bx	lr

000d43b4 <_ZN6TM16375pointEb>:

//Whether to light the clock point ":".
//To take effect the next time it displays.
void TM1637::point(boolean PointFlag)
{
  _PointFlag = PointFlag;
   d43b4:	70c1      	strb	r1, [r0, #3]
   d43b6:	4770      	bx	lr

000d43b8 <_ZN6TM16376codingEa>:
  }
}
int8_t TM1637::coding(int8_t DispData)
{
  uint8_t PointData;
  if(_PointFlag == POINT_ON)PointData = 0x80;
   d43b8:	78c3      	ldrb	r3, [r0, #3]
   d43ba:	2b00      	cmp	r3, #0
  else PointData = 0;
   d43bc:	bf14      	ite	ne
   d43be:	2080      	movne	r0, #128	; 0x80
   d43c0:	2000      	moveq	r0, #0
  if(DispData == 0x7f) DispData = 0x00 + PointData;//The bit digital tube off
   d43c2:	297f      	cmp	r1, #127	; 0x7f
  else DispData = TubeTab[DispData] + PointData;
   d43c4:	bf1e      	ittt	ne
   d43c6:	4b02      	ldrne	r3, [pc, #8]	; (d43d0 <_ZN6TM16376codingEa+0x18>)
   d43c8:	5c5b      	ldrbne	r3, [r3, r1]
   d43ca:	18c0      	addne	r0, r0, r3
   d43cc:	b240      	sxtb	r0, r0
  return DispData;
}
   d43ce:	4770      	bx	lr
   d43d0:	000d64ec 	.word	0x000d64ec

000d43d4 <_ZN6TM16377displayEha>:
  writeByte(Cmd_DispCtrl);//
  stop();           //
}
//******************************************
void TM1637::display(uint8_t BitAddr,int8_t DispData)
{
   d43d4:	b570      	push	{r4, r5, r6, lr}
   d43d6:	460e      	mov	r6, r1
  int8_t SegData;
  SegData = coding(DispData);
   d43d8:	4611      	mov	r1, r2
  writeByte(Cmd_DispCtrl);//
  stop();           //
}
//******************************************
void TM1637::display(uint8_t BitAddr,int8_t DispData)
{
   d43da:	4604      	mov	r4, r0
  int8_t SegData;
  SegData = coding(DispData);
   d43dc:	f7ff ffec 	bl	d43b8 <_ZN6TM16376codingEa>
   d43e0:	4605      	mov	r5, r0
  start();          //start signal sent to TM1637 from MCU
   d43e2:	4620      	mov	r0, r4
   d43e4:	f7ff ffb9 	bl	d435a <_ZN6TM16375startEv>
  writeByte(ADDR_FIXED);//
   d43e8:	2144      	movs	r1, #68	; 0x44
   d43ea:	4620      	mov	r0, r4
   d43ec:	f7ff ff70 	bl	d42d0 <_ZN6TM16379writeByteEa>
  stop();           //
   d43f0:	4620      	mov	r0, r4
   d43f2:	f7ff ffc6 	bl	d4382 <_ZN6TM16374stopEv>
  start();          //
   d43f6:	4620      	mov	r0, r4
   d43f8:	f7ff ffaf 	bl	d435a <_ZN6TM16375startEv>
  writeByte(BitAddr|0xc0);//
   d43fc:	f066 013f 	orn	r1, r6, #63	; 0x3f
   d4400:	4620      	mov	r0, r4
   d4402:	f7ff ff65 	bl	d42d0 <_ZN6TM16379writeByteEa>
  writeByte(SegData);//
   d4406:	4629      	mov	r1, r5
   d4408:	4620      	mov	r0, r4
   d440a:	f7ff ff61 	bl	d42d0 <_ZN6TM16379writeByteEa>
  stop();            //
   d440e:	4620      	mov	r0, r4
   d4410:	f7ff ffb7 	bl	d4382 <_ZN6TM16374stopEv>
  start();          //
   d4414:	4620      	mov	r0, r4
   d4416:	f7ff ffa0 	bl	d435a <_ZN6TM16375startEv>
  writeByte(Cmd_DispCtrl);//
   d441a:	f994 1002 	ldrsb.w	r1, [r4, #2]
   d441e:	4620      	mov	r0, r4
   d4420:	f7ff ff56 	bl	d42d0 <_ZN6TM16379writeByteEa>
  stop();           //
   d4424:	4620      	mov	r0, r4
}
   d4426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeByte(BitAddr|0xc0);//
  writeByte(SegData);//
  stop();            //
  start();          //
  writeByte(Cmd_DispCtrl);//
  stop();           //
   d442a:	f7ff bfaa 	b.w	d4382 <_ZN6TM16374stopEv>

000d442e <_ZN6TM163712clearDisplayEv>:
}

void TM1637::clearDisplay(void)
{
   d442e:	b510      	push	{r4, lr}
  display(0x00,0x7f);
   d4430:	227f      	movs	r2, #127	; 0x7f
  writeByte(Cmd_DispCtrl);//
  stop();           //
}

void TM1637::clearDisplay(void)
{
   d4432:	4604      	mov	r4, r0
  display(0x00,0x7f);
   d4434:	2100      	movs	r1, #0
   d4436:	f7ff ffcd 	bl	d43d4 <_ZN6TM16377displayEha>
  display(0x01,0x7f);
   d443a:	4620      	mov	r0, r4
   d443c:	227f      	movs	r2, #127	; 0x7f
   d443e:	2101      	movs	r1, #1
   d4440:	f7ff ffc8 	bl	d43d4 <_ZN6TM16377displayEha>
  display(0x02,0x7f);
   d4444:	4620      	mov	r0, r4
   d4446:	227f      	movs	r2, #127	; 0x7f
   d4448:	2102      	movs	r1, #2
   d444a:	f7ff ffc3 	bl	d43d4 <_ZN6TM16377displayEha>
  display(0x03,0x7f);
   d444e:	4620      	mov	r0, r4
   d4450:	227f      	movs	r2, #127	; 0x7f
   d4452:	2103      	movs	r1, #3
}
   d4454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void TM1637::clearDisplay(void)
{
  display(0x00,0x7f);
  display(0x01,0x7f);
  display(0x02,0x7f);
  display(0x03,0x7f);
   d4458:	f7ff bfbc 	b.w	d43d4 <_ZN6TM16377displayEha>

000d445c <_ZN6TM16374initEv>:
  pinMode(Datapin,OUTPUT);
}

void TM1637::init(void)
{
  clearDisplay();
   d445c:	f7ff bfe7 	b.w	d442e <_ZN6TM163712clearDisplayEv>

000d4460 <_GLOBAL__sub_I__ZN6TM1637C2Ehh>:
   d4460:	f000 ba5e 	b.w	d4920 <HAL_Pin_Map>

000d4464 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4464:	b510      	push	{r4, lr}
   d4466:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4468:	7001      	strb	r1, [r0, #0]
   d446a:	7042      	strb	r2, [r0, #1]
   d446c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d446e:	2101      	movs	r1, #1
   d4470:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4474:	f001 ffc8 	bl	d6408 <calloc>
   d4478:	6060      	str	r0, [r4, #4]
}
   d447a:	4620      	mov	r0, r4
   d447c:	bd10      	pop	{r4, pc}

000d447e <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d447e:	b510      	push	{r4, lr}
   d4480:	4604      	mov	r4, r0
{
    free(_led_state);
   d4482:	6840      	ldr	r0, [r0, #4]
   d4484:	f000 fbc8 	bl	d4c18 <free>
}
   d4488:	4620      	mov	r0, r4
   d448a:	bd10      	pop	{r4, pc}

000d448c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d448c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d448e:	2100      	movs	r1, #0
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4490:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4492:	7800      	ldrb	r0, [r0, #0]
   d4494:	f001 f8ff 	bl	d5696 <digitalWrite>
   d4498:	2014      	movs	r0, #20
   d449a:	f000 fa31 	bl	d4900 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d449e:	7820      	ldrb	r0, [r4, #0]
   d44a0:	2101      	movs	r1, #1
   d44a2:	f001 f8f8 	bl	d5696 <digitalWrite>
   d44a6:	2014      	movs	r0, #20
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d44a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44ac:	f000 ba28 	b.w	d4900 <HAL_Delay_Microseconds>

000d44b0 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d44b0:	b570      	push	{r4, r5, r6, lr}
   d44b2:	4606      	mov	r6, r0
   d44b4:	460d      	mov	r5, r1
   d44b6:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d44b8:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
   d44bc:	bf14      	ite	ne
   d44be:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d44c0:	2100      	moveq	r1, #0
   d44c2:	7870      	ldrb	r0, [r6, #1]
   d44c4:	f001 f8e7 	bl	d5696 <digitalWrite>
   d44c8:	3c01      	subs	r4, #1
        clk();
   d44ca:	4630      	mov	r0, r6
   d44cc:	f7ff ffde 	bl	d448c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d44d0:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d44d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
   d44d6:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
   d44d8:	d1ee      	bne.n	d44b8 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
   d44da:	bd70      	pop	{r4, r5, r6, pc}

000d44dc <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d44dc:	f013 0f80 	tst.w	r3, #128	; 0x80
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d44e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44e2:	460d      	mov	r5, r1
   d44e4:	4616      	mov	r6, r2
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d44e6:	bf14      	ite	ne
   d44e8:	21c0      	movne	r1, #192	; 0xc0
   d44ea:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d44ec:	065a      	lsls	r2, r3, #25
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d44ee:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d44f0:	bf58      	it	pl
   d44f2:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d44f6:	0633      	lsls	r3, r6, #24
        b <<= 1;
    }
}

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d44f8:	4604      	mov	r4, r0
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d44fa:	bf58      	it	pl
   d44fc:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4500:	0670      	lsls	r0, r6, #25
   d4502:	bf58      	it	pl
   d4504:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4508:	062a      	lsls	r2, r5, #24
   d450a:	bf58      	it	pl
   d450c:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4510:	066b      	lsls	r3, r5, #25
   d4512:	bf58      	it	pl
   d4514:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4518:	4620      	mov	r0, r4
   d451a:	f7ff ffc9 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d451e:	4639      	mov	r1, r7
   d4520:	4620      	mov	r0, r4
   d4522:	f7ff ffc5 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4526:	4631      	mov	r1, r6
   d4528:	4620      	mov	r0, r4
   d452a:	f7ff ffc1 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d452e:	4629      	mov	r1, r5
   d4530:	4620      	mov	r0, r4
}
   d4532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
   d4536:	f7ff bfbb 	b.w	d44b0 <_ZN12ChainableLED8sendByteEh>

000d453a <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d453a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d453e:	4604      	mov	r4, r0
   d4540:	460d      	mov	r5, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4542:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4544:	4691      	mov	r9, r2
   d4546:	469a      	mov	sl, r3
   d4548:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d454c:	f7ff ffb0 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4550:	2100      	movs	r1, #0
   d4552:	4620      	mov	r0, r4
   d4554:	f7ff ffac 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4558:	2100      	movs	r1, #0
   d455a:	4620      	mov	r0, r4
   d455c:	f7ff ffa8 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4560:	2100      	movs	r1, #0
   d4562:	4620      	mov	r0, r4
   d4564:	f7ff ffa4 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   d4568:	2703      	movs	r7, #3
            _led_state[i*3 + _CL_GREEN] = green;
   d456a:	f04f 0801 	mov.w	r8, #1
{
    // Send data frame prefix (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d456e:	2600      	movs	r6, #0
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
            _led_state[i*3 + _CL_GREEN] = green;
   d4570:	fb17 8805 	smlabb	r8, r7, r5, r8
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4574:	78a2      	ldrb	r2, [r4, #2]
   d4576:	b2f3      	uxtb	r3, r6
   d4578:	429a      	cmp	r2, r3
   d457a:	d91b      	bls.n	d45b4 <_ZN12ChainableLED11setColorRGBEhhhh+0x7a>
    {
        if (i == led)
   d457c:	42ab      	cmp	r3, r5
   d457e:	d10d      	bne.n	d459c <_ZN12ChainableLED11setColorRGBEhhhh+0x62>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4580:	6861      	ldr	r1, [r4, #4]
   d4582:	fb15 f207 	smulbb	r2, r5, r7
   d4586:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_GREEN] = green;
   d458a:	6862      	ldr	r2, [r4, #4]
   d458c:	f802 a008 	strb.w	sl, [r2, r8]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4590:	2202      	movs	r2, #2
   d4592:	fb17 2205 	smlabb	r2, r7, r5, r2
   d4596:	6861      	ldr	r1, [r4, #4]
   d4598:	f801 b002 	strb.w	fp, [r1, r2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d459c:	6860      	ldr	r0, [r4, #4]
   d459e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   d45a2:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
   d45a4:	5c41      	ldrb	r1, [r0, r1]
   d45a6:	7893      	ldrb	r3, [r2, #2]
   d45a8:	7852      	ldrb	r2, [r2, #1]
   d45aa:	4620      	mov	r0, r4
   d45ac:	f7ff ff96 	bl	d44dc <_ZN12ChainableLED9sendColorEhhh>
   d45b0:	3601      	adds	r6, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d45b2:	e7df      	b.n	d4574 <_ZN12ChainableLED11setColorRGBEhhhh+0x3a>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d45b4:	4620      	mov	r0, r4
   d45b6:	2100      	movs	r1, #0
   d45b8:	f7ff ff7a 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d45bc:	4620      	mov	r0, r4
   d45be:	2100      	movs	r1, #0
   d45c0:	f7ff ff76 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d45c4:	4620      	mov	r0, r4
   d45c6:	2100      	movs	r1, #0
   d45c8:	f7ff ff72 	bl	d44b0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d45cc:	4620      	mov	r0, r4
   d45ce:	2100      	movs	r1, #0
}
   d45d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
   d45d4:	f7ff bf6c 	b.w	d44b0 <_ZN12ChainableLED8sendByteEh>

000d45d8 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
   d45d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d45da:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d45dc:	2101      	movs	r1, #1
   d45de:	7800      	ldrb	r0, [r0, #0]
   d45e0:	f001 f848 	bl	d5674 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d45e4:	2101      	movs	r1, #1
   d45e6:	7860      	ldrb	r0, [r4, #1]
   d45e8:	f001 f844 	bl	d5674 <pinMode>
   d45ec:	2500      	movs	r5, #0

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
   d45ee:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d45f0:	78a3      	ldrb	r3, [r4, #2]
   d45f2:	b2e9      	uxtb	r1, r5
   d45f4:	428b      	cmp	r3, r1
   d45f6:	f105 0501 	add.w	r5, r5, #1
   d45fa:	d906      	bls.n	d460a <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
   d45fc:	2300      	movs	r3, #0
   d45fe:	9600      	str	r6, [sp, #0]
   d4600:	461a      	mov	r2, r3
   d4602:	4620      	mov	r0, r4
   d4604:	f7ff ff99 	bl	d453a <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
   d4608:	e7f2      	b.n	d45f0 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
   d460a:	b002      	add	sp, #8
   d460c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4610 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   d4612:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   d4616:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d461e:	ed2d 8b04 	vpush	{d8-d9}
   d4622:	eef0 8a41 	vmov.f32	s17, s2
    if (t < 0.0)
        t += 1.0;
   d4626:	bf48      	it	mi
   d4628:	ee71 8a27 	vaddmi.f32	s17, s2, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d462c:	eeb0 8a40 	vmov.f32	s16, s0
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
   d4630:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   d4638:	bfc4      	itt	gt
   d463a:	eef7 7a00 	vmovgt.f32	s15, #112	; 0x3f800000  1.0
   d463e:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   d4642:	eeb0 9a60 	vmov.f32	s18, s1
    if (t < 0.0)
        t += 1.0;
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
   d4646:	ee18 0a90 	vmov	r0, s17
   d464a:	f001 fb7f 	bl	d5d4c <__aeabi_f2d>
   d464e:	a32f      	add	r3, pc, #188	; (adr r3, d470c <_Z7hue2rgbfff+0xfc>)
   d4650:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4654:	4604      	mov	r4, r0
   d4656:	460d      	mov	r5, r1
   d4658:	f001 fe3e 	bl	d62d8 <__aeabi_dcmplt>
   d465c:	b160      	cbz	r0, d4678 <_Z7hue2rgbfff+0x68>
        return p + (q - p) * 6.0 * t;
   d465e:	ee79 7a48 	vsub.f32	s15, s18, s16
   d4662:	ee17 0a90 	vmov	r0, s15
   d4666:	f001 fb71 	bl	d5d4c <__aeabi_f2d>
   d466a:	2200      	movs	r2, #0
   d466c:	4b26      	ldr	r3, [pc, #152]	; (d4708 <_Z7hue2rgbfff+0xf8>)
   d466e:	f001 fbc1 	bl	d5df4 <__aeabi_dmul>
   d4672:	4622      	mov	r2, r4
   d4674:	462b      	mov	r3, r5
   d4676:	e025      	b.n	d46c4 <_Z7hue2rgbfff+0xb4>
    if(t < 1.0/2.0)
   d4678:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d467c:	eef4 8ae7 	vcmpe.f32	s17, s15
   d4680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4684:	d42f      	bmi.n	d46e6 <_Z7hue2rgbfff+0xd6>
        return q;
    if(t < 2.0/3.0)
   d4686:	a31e      	add	r3, pc, #120	; (adr r3, d4700 <_Z7hue2rgbfff+0xf0>)
   d4688:	e9d3 2300 	ldrd	r2, r3, [r3]
   d468c:	4620      	mov	r0, r4
   d468e:	4629      	mov	r1, r5
   d4690:	f001 fe22 	bl	d62d8 <__aeabi_dcmplt>
   d4694:	b350      	cbz	r0, d46ec <_Z7hue2rgbfff+0xdc>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   d4696:	ee79 7a48 	vsub.f32	s15, s18, s16
   d469a:	ee17 0a90 	vmov	r0, s15
   d469e:	f001 fb55 	bl	d5d4c <__aeabi_f2d>
   d46a2:	4622      	mov	r2, r4
   d46a4:	4606      	mov	r6, r0
   d46a6:	460f      	mov	r7, r1
   d46a8:	462b      	mov	r3, r5
   d46aa:	a115      	add	r1, pc, #84	; (adr r1, d4700 <_Z7hue2rgbfff+0xf0>)
   d46ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   d46b0:	f001 f9ec 	bl	d5a8c <__aeabi_dsub>
   d46b4:	4602      	mov	r2, r0
   d46b6:	460b      	mov	r3, r1
   d46b8:	4630      	mov	r0, r6
   d46ba:	4639      	mov	r1, r7
   d46bc:	f001 fb9a 	bl	d5df4 <__aeabi_dmul>
   d46c0:	4b11      	ldr	r3, [pc, #68]	; (d4708 <_Z7hue2rgbfff+0xf8>)
   d46c2:	2200      	movs	r2, #0
   d46c4:	f001 fb96 	bl	d5df4 <__aeabi_dmul>
   d46c8:	4604      	mov	r4, r0
   d46ca:	ee18 0a10 	vmov	r0, s16
   d46ce:	460d      	mov	r5, r1
   d46d0:	f001 fb3c 	bl	d5d4c <__aeabi_f2d>
   d46d4:	4602      	mov	r2, r0
   d46d6:	460b      	mov	r3, r1
   d46d8:	4620      	mov	r0, r4
   d46da:	4629      	mov	r1, r5
   d46dc:	f001 f9d8 	bl	d5a90 <__adddf3>
   d46e0:	f001 fe42 	bl	d6368 <__aeabi_d2f>
   d46e4:	e004      	b.n	d46f0 <_Z7hue2rgbfff+0xe0>
    if(t > 1.0)
        t -= 1.0;
    if(t < 1.0/6.0)
        return p + (q - p) * 6.0 * t;
    if(t < 1.0/2.0)
        return q;
   d46e6:	ee19 0a10 	vmov	r0, s18
   d46ea:	e001      	b.n	d46f0 <_Z7hue2rgbfff+0xe0>
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;

    return p;
   d46ec:	ee18 0a10 	vmov	r0, s16
}
   d46f0:	ecbd 8b04 	vpop	{d8-d9}
   d46f4:	ee00 0a10 	vmov	s0, r0
   d46f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d46fa:	bf00      	nop
   d46fc:	f3af 8000 	nop.w
   d4700:	55555555 	.word	0x55555555
   d4704:	3fe55555 	.word	0x3fe55555
   d4708:	40180000 	.word	0x40180000
   d470c:	55555555 	.word	0x55555555
   d4710:	3fc55555 	.word	0x3fc55555
   d4714:	00000000 	.word	0x00000000

000d4718 <_ZN12ChainableLED11setColorHSBEhfff>:
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d471c:	ed2d 8b04 	vpush	{d8-d9}

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d4720:	eef5 0a40 	vcmp.f32	s1, #0.0
   d4724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sendByte(0x00);
    sendByte(0x00);
}

void ChainableLED::setColorHSB(byte led, float hue, float saturation, float brightness)
{
   d4728:	b083      	sub	sp, #12
   d472a:	4680      	mov	r8, r0
   d472c:	4689      	mov	r9, r1
   d472e:	eef0 9a40 	vmov.f32	s19, s0
   d4732:	eeb0 9a60 	vmov.f32	s18, s1
   d4736:	eeb0 8a41 	vmov.f32	s16, s2

    constrain(hue, 0.0, 1.0);
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
   d473a:	d06e      	beq.n	d481a <_ZN12ChainableLED11setColorHSBEhfff+0x102>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d473c:	ee11 0a10 	vmov	r0, s2
   d4740:	f001 fb04 	bl	d5d4c <__aeabi_f2d>
        r = g = b = brightness;
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   d4744:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4748:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4750:	4606      	mov	r6, r0
   d4752:	460f      	mov	r7, r1
   d4754:	d510      	bpl.n	d4778 <_ZN12ChainableLED11setColorHSBEhfff+0x60>
   d4756:	ee19 0a10 	vmov	r0, s18
   d475a:	f001 faf7 	bl	d5d4c <__aeabi_f2d>
   d475e:	2200      	movs	r2, #0
   d4760:	4b4d      	ldr	r3, [pc, #308]	; (d4898 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   d4762:	f001 f995 	bl	d5a90 <__adddf3>
   d4766:	4632      	mov	r2, r6
   d4768:	463b      	mov	r3, r7
   d476a:	f001 fb43 	bl	d5df4 <__aeabi_dmul>
   d476e:	f001 fdfb 	bl	d6368 <__aeabi_d2f>
   d4772:	ee08 0a90 	vmov	s17, r0
   d4776:	e003      	b.n	d4780 <_ZN12ChainableLED11setColorHSBEhfff+0x68>
   d4778:	ee79 8a08 	vadd.f32	s17, s18, s16
   d477c:	eee9 8a48 	vfms.f32	s17, s18, s16
   d4780:	ee19 0a90 	vmov	r0, s19
   d4784:	f001 fae2 	bl	d5d4c <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   d4788:	4632      	mov	r2, r6
   d478a:	463b      	mov	r3, r7
   d478c:	4604      	mov	r4, r0
   d478e:	460d      	mov	r5, r1
   d4790:	4630      	mov	r0, r6
   d4792:	4639      	mov	r1, r7
   d4794:	f001 f97c 	bl	d5a90 <__adddf3>
   d4798:	4606      	mov	r6, r0
   d479a:	ee18 0a90 	vmov	r0, s17
   d479e:	460f      	mov	r7, r1
   d47a0:	f001 fad4 	bl	d5d4c <__aeabi_f2d>
   d47a4:	4602      	mov	r2, r0
   d47a6:	460b      	mov	r3, r1
   d47a8:	4630      	mov	r0, r6
   d47aa:	4639      	mov	r1, r7
   d47ac:	f001 f96e 	bl	d5a8c <__aeabi_dsub>
   d47b0:	f001 fdda 	bl	d6368 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d47b4:	a334      	add	r3, pc, #208	; (adr r3, d4888 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d47b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
   d47ba:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d47be:	4629      	mov	r1, r5
   d47c0:	4620      	mov	r0, r4
   d47c2:	f001 f965 	bl	d5a90 <__adddf3>
   d47c6:	f001 fdcf 	bl	d6368 <__aeabi_d2f>
   d47ca:	eef0 0a68 	vmov.f32	s1, s17
   d47ce:	ee01 0a10 	vmov	s2, r0
   d47d2:	eeb0 0a49 	vmov.f32	s0, s18
   d47d6:	f7ff ff1b 	bl	d4610 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   d47da:	eeb0 1a69 	vmov.f32	s2, s19
   d47de:	eef0 0a68 	vmov.f32	s1, s17
    else
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
   d47e2:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   d47e6:	eeb0 0a49 	vmov.f32	s0, s18
   d47ea:	f7ff ff11 	bl	d4610 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d47ee:	a326      	add	r3, pc, #152	; (adr r3, d4888 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   d47f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47f4:	4620      	mov	r0, r4
   d47f6:	4629      	mov	r1, r5
    {
        float q = brightness < 0.5 ?
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
        float p = 2.0 * brightness - q;
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
   d47f8:	eef0 9a40 	vmov.f32	s19, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   d47fc:	f001 f946 	bl	d5a8c <__aeabi_dsub>
   d4800:	f001 fdb2 	bl	d6368 <__aeabi_d2f>
   d4804:	eef0 0a68 	vmov.f32	s1, s17
   d4808:	ee01 0a10 	vmov	s2, r0
   d480c:	eeb0 0a49 	vmov.f32	s0, s18
   d4810:	f7ff fefe 	bl	d4610 <_Z7hue2rgbfff>
   d4814:	eef0 8a40 	vmov.f32	s17, s0
   d4818:	e003      	b.n	d4822 <_ZN12ChainableLED11setColorHSBEhfff+0x10a>
    constrain(saturation, 0.0, 1.0);
    constrain(brightness, 0.0, 1.0);

    if(saturation == 0.0)
    {
        r = g = b = brightness;
   d481a:	eef0 8a41 	vmov.f32	s17, s2
   d481e:	eef0 9a41 	vmov.f32	s19, s2
        r = hue2rgb(p, q, hue + 1.0/3.0);
        g = hue2rgb(p, q, hue);
        b = hue2rgb(p, q, hue - 1.0/3.0);
    }

    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   d4822:	ee19 0a90 	vmov	r0, s19
   d4826:	f001 fa91 	bl	d5d4c <__aeabi_f2d>
   d482a:	a319      	add	r3, pc, #100	; (adr r3, d4890 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d482c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4830:	f001 fae0 	bl	d5df4 <__aeabi_dmul>
   d4834:	f001 fd78 	bl	d6328 <__aeabi_d2uiz>
   d4838:	b2c5      	uxtb	r5, r0
   d483a:	ee18 0a10 	vmov	r0, s16
   d483e:	f001 fa85 	bl	d5d4c <__aeabi_f2d>
   d4842:	a313      	add	r3, pc, #76	; (adr r3, d4890 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d4844:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4848:	f001 fad4 	bl	d5df4 <__aeabi_dmul>
   d484c:	f001 fd6c 	bl	d6328 <__aeabi_d2uiz>
   d4850:	b2c4      	uxtb	r4, r0
   d4852:	ee18 0a90 	vmov	r0, s17
   d4856:	f001 fa79 	bl	d5d4c <__aeabi_f2d>
   d485a:	a30d      	add	r3, pc, #52	; (adr r3, d4890 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   d485c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4860:	f001 fac8 	bl	d5df4 <__aeabi_dmul>
   d4864:	f001 fd60 	bl	d6328 <__aeabi_d2uiz>
   d4868:	b2c0      	uxtb	r0, r0
   d486a:	9000      	str	r0, [sp, #0]
   d486c:	462b      	mov	r3, r5
   d486e:	4622      	mov	r2, r4
   d4870:	4649      	mov	r1, r9
   d4872:	4640      	mov	r0, r8
   d4874:	f7ff fe61 	bl	d453a <_ZN12ChainableLED11setColorRGBEhhhh>
}
   d4878:	b003      	add	sp, #12
   d487a:	ecbd 8b04 	vpop	{d8-d9}
   d487e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4882:	bf00      	nop
   d4884:	f3af 8000 	nop.w
   d4888:	55555555 	.word	0x55555555
   d488c:	3fd55555 	.word	0x3fd55555
   d4890:	00000000 	.word	0x00000000
   d4894:	406fe000 	.word	0x406fe000
   d4898:	3ff00000 	.word	0x3ff00000

000d489c <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
   d489c:	f000 b840 	b.w	d4920 <HAL_Pin_Map>

000d48a0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <os_thread_is_current+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	689b      	ldr	r3, [r3, #8]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030248 	.word	0x00030248

000d48b0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <os_thread_join+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	691b      	ldr	r3, [r3, #16]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030248 	.word	0x00030248

000d48c0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <os_thread_cleanup+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	695b      	ldr	r3, [r3, #20]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030248 	.word	0x00030248

000d48d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <os_mutex_recursive_create+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030248 	.word	0x00030248

000d48e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <os_mutex_recursive_destroy+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030248 	.word	0x00030248

000d48f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_RNG_GetRandomNumber+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	685b      	ldr	r3, [r3, #4]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030218 	.word	0x00030218

000d4900 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_Delay_Microseconds+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	68db      	ldr	r3, [r3, #12]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	695b      	ldr	r3, [r3, #20]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_Pin_Map+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	681b      	ldr	r3, [r3, #0]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	0003022c 	.word	0x0003022c

000d4930 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <HAL_Pin_Mode+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	689b      	ldr	r3, [r3, #8]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	0003022c 	.word	0x0003022c

000d4940 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_Get_Pin_Mode+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	68db      	ldr	r3, [r3, #12]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	0003022c 	.word	0x0003022c

000d4950 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_GPIO_Write+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	691b      	ldr	r3, [r3, #16]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	0003022c 	.word	0x0003022c

000d4960 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <HAL_GPIO_Read+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	695b      	ldr	r3, [r3, #20]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	0003022c 	.word	0x0003022c

000d4970 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <HAL_I2C_Write_Data+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6a1b      	ldr	r3, [r3, #32]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030228 	.word	0x00030228

000d4980 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_I2C_Available_Data+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030228 	.word	0x00030228

000d4990 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_I2C_Read_Data+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030228 	.word	0x00030228

000d49a0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_I2C_Peek_Data+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030228 	.word	0x00030228

000d49b0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_I2C_Flush_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030228 	.word	0x00030228

000d49c0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_I2C_Is_Enabled+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030228 	.word	0x00030228

000d49d0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_I2C_Init+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030228 	.word	0x00030228

000d49e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <inet_inet_ntop+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	695b      	ldr	r3, [r3, #20]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030264 	.word	0x00030264

000d49f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <netdb_freeaddrinfo+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	689b      	ldr	r3, [r3, #8]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030268 	.word	0x00030268

000d4a00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <netdb_getaddrinfo+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	68db      	ldr	r3, [r3, #12]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030268 	.word	0x00030268

000d4a10 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <HAL_SPI_Init+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	69db      	ldr	r3, [r3, #28]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030230 	.word	0x00030230

000d4a20 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <HAL_SPI_Is_Enabled+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a1b      	ldr	r3, [r3, #32]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030230 	.word	0x00030230

000d4a30 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <HAL_USART_Init+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	681b      	ldr	r3, [r3, #0]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	0003023c 	.word	0x0003023c

000d4a40 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_USART_Write_Data+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	68db      	ldr	r3, [r3, #12]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	0003023c 	.word	0x0003023c

000d4a50 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_USART_Available_Data+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	691b      	ldr	r3, [r3, #16]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	0003023c 	.word	0x0003023c

000d4a60 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_USART_Read_Data+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	695b      	ldr	r3, [r3, #20]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003023c 	.word	0x0003023c

000d4a70 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USART_Peek_Data+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	699b      	ldr	r3, [r3, #24]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003023c 	.word	0x0003023c

000d4a80 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USART_Flush_Data+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	69db      	ldr	r3, [r3, #28]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Is_Enabled+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6a1b      	ldr	r3, [r3, #32]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Available_Data_For_Write+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USB_USART_Init+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	681b      	ldr	r3, [r3, #0]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003024c 	.word	0x0003024c

000d4ac0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Available_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	691b      	ldr	r3, [r3, #16]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	695b      	ldr	r3, [r3, #20]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Receive_Data+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	699b      	ldr	r3, [r3, #24]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USB_USART_Send_Data+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	69db      	ldr	r3, [r3, #28]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003024c 	.word	0x0003024c

000d4b00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Flush_Data+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6a1b      	ldr	r3, [r3, #32]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <set_system_mode+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	685b      	ldr	r3, [r3, #4]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030220 	.word	0x00030220

000d4b20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <system_delay_ms+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	695b      	ldr	r3, [r3, #20]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030220 	.word	0x00030220

000d4b30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b03      	ldr	r3, [pc, #12]	; (d4b40 <system_ctrl_set_app_request_handler+0x10>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b3a:	9301      	str	r3, [sp, #4]
   d4b3c:	bd08      	pop	{r3, pc}
   d4b3e:	0000      	.short	0x0000
   d4b40:	00030220 	.word	0x00030220

000d4b44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b03      	ldr	r3, [pc, #12]	; (d4b54 <system_ctrl_set_result+0x10>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b4e:	9301      	str	r3, [sp, #4]
   d4b50:	bd08      	pop	{r3, pc}
   d4b52:	0000      	.short	0x0000
   d4b54:	00030220 	.word	0x00030220

000d4b58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	00030244 	.word	0x00030244

000d4b68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <network_connect+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	685b      	ldr	r3, [r3, #4]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	00030240 	.word	0x00030240

000d4b78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <network_connecting+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	689b      	ldr	r3, [r3, #8]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	00030240 	.word	0x00030240

000d4b88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <network_disconnect+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	68db      	ldr	r3, [r3, #12]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030240 	.word	0x00030240

000d4b98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <network_ready+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	691b      	ldr	r3, [r3, #16]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030240 	.word	0x00030240

000d4ba8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <network_on+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	695b      	ldr	r3, [r3, #20]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030240 	.word	0x00030240

000d4bb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <network_off+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	699b      	ldr	r3, [r3, #24]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030240 	.word	0x00030240

000d4bc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <network_listen+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	69db      	ldr	r3, [r3, #28]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030240 	.word	0x00030240

000d4bd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_listening+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	6a1b      	ldr	r3, [r3, #32]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_set_listen_timeout+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_get_listen_timeout+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <malloc+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	681b      	ldr	r3, [r3, #0]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	0003021c 	.word	0x0003021c

000d4c18 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <free+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	685b      	ldr	r3, [r3, #4]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	0003021c 	.word	0x0003021c

000d4c28 <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <_malloc_r+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	0003021c 	.word	0x0003021c

000d4c38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c38:	2100      	movs	r1, #0
   d4c3a:	f7ff bf71 	b.w	d4b20 <system_delay_ms>

000d4c3e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c3e:	b510      	push	{r4, lr}
   d4c40:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c42:	6800      	ldr	r0, [r0, #0]
   d4c44:	b108      	cbz	r0, d4c4a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c46:	f7ff fe4b 	bl	d48e0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	bd10      	pop	{r4, pc}
	...

000d4c50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c50:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c52:	4c06      	ldr	r4, [pc, #24]	; (d4c6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4c54:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4c56:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c58:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c5a:	f7ff fe39 	bl	d48d0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c5e:	4620      	mov	r0, r4
   d4c60:	4a03      	ldr	r2, [pc, #12]	; (d4c70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4c62:	4904      	ldr	r1, [pc, #16]	; (d4c74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c68:	f000 bda2 	b.w	d57b0 <__aeabi_atexit>
   d4c6c:	2003e3cc 	.word	0x2003e3cc
   d4c70:	2003e3ac 	.word	0x2003e3ac
   d4c74:	000d4c3f 	.word	0x000d4c3f

000d4c78 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c78:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c7a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c7c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c7e:	b113      	cbz	r3, d4c86 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c80:	2203      	movs	r2, #3
   d4c82:	4601      	mov	r1, r0
   d4c84:	4798      	blx	r3
    }
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd10      	pop	{r4, pc}

000d4c8a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c8a:	2200      	movs	r2, #0
   d4c8c:	4611      	mov	r1, r2
   d4c8e:	6840      	ldr	r0, [r0, #4]
   d4c90:	f7ff bfa2 	b.w	d4bd8 <network_listening>

000d4c94 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c94:	2200      	movs	r2, #0
   d4c96:	4611      	mov	r1, r2
   d4c98:	6840      	ldr	r0, [r0, #4]
   d4c9a:	f7ff bfad 	b.w	d4bf8 <network_get_listen_timeout>

000d4c9e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c9e:	2200      	movs	r2, #0
   d4ca0:	6840      	ldr	r0, [r0, #4]
   d4ca2:	f7ff bfa1 	b.w	d4be8 <network_set_listen_timeout>

000d4ca6 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ca6:	2200      	movs	r2, #0
   d4ca8:	f081 0101 	eor.w	r1, r1, #1
   d4cac:	6840      	ldr	r0, [r0, #4]
   d4cae:	f7ff bf8b 	b.w	d4bc8 <network_listen>

000d4cb2 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4cb2:	2300      	movs	r3, #0
   d4cb4:	461a      	mov	r2, r3
   d4cb6:	4619      	mov	r1, r3
   d4cb8:	6840      	ldr	r0, [r0, #4]
   d4cba:	f7ff bf7d 	b.w	d4bb8 <network_off>

000d4cbe <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4cbe:	2300      	movs	r3, #0
   d4cc0:	461a      	mov	r2, r3
   d4cc2:	4619      	mov	r1, r3
   d4cc4:	6840      	ldr	r0, [r0, #4]
   d4cc6:	f7ff bf6f 	b.w	d4ba8 <network_on>

000d4cca <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4cca:	2200      	movs	r2, #0
   d4ccc:	4611      	mov	r1, r2
   d4cce:	6840      	ldr	r0, [r0, #4]
   d4cd0:	f7ff bf62 	b.w	d4b98 <network_ready>

000d4cd4 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cd4:	2200      	movs	r2, #0
   d4cd6:	4611      	mov	r1, r2
   d4cd8:	6840      	ldr	r0, [r0, #4]
   d4cda:	f7ff bf4d 	b.w	d4b78 <network_connecting>

000d4cde <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cde:	2200      	movs	r2, #0
   d4ce0:	2102      	movs	r1, #2
   d4ce2:	6840      	ldr	r0, [r0, #4]
   d4ce4:	f7ff bf50 	b.w	d4b88 <network_disconnect>

000d4ce8 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ce8:	2300      	movs	r3, #0
   d4cea:	461a      	mov	r2, r3
   d4cec:	6840      	ldr	r0, [r0, #4]
   d4cee:	f7ff bf3b 	b.w	d4b68 <network_connect>
	...

000d4cf4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cf4:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cf6:	2203      	movs	r2, #3
   d4cf8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cfa:	4a02      	ldr	r2, [pc, #8]	; (d4d04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4cfc:	601a      	str	r2, [r3, #0]
   d4cfe:	4770      	bx	lr
   d4d00:	2003e3d0 	.word	0x2003e3d0
   d4d04:	000d6504 	.word	0x000d6504

000d4d08 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4d08:	4770      	bx	lr

000d4d0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d0c:	4606      	mov	r6, r0
   d4d0e:	4615      	mov	r5, r2
   d4d10:	460c      	mov	r4, r1
   d4d12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d14:	42bc      	cmp	r4, r7
   d4d16:	d006      	beq.n	d4d26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d18:	6833      	ldr	r3, [r6, #0]
   d4d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d1e:	689b      	ldr	r3, [r3, #8]
   d4d20:	4630      	mov	r0, r6
   d4d22:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d24:	e7f6      	b.n	d4d14 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4d26:	4628      	mov	r0, r5
   d4d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d2a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4d2a:	2200      	movs	r2, #0
   d4d2c:	7c00      	ldrb	r0, [r0, #16]
   d4d2e:	f7ff be1f 	b.w	d4970 <HAL_I2C_Write_Data>

000d4d32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4d32:	2100      	movs	r1, #0
   d4d34:	7c00      	ldrb	r0, [r0, #16]
   d4d36:	f7ff be23 	b.w	d4980 <HAL_I2C_Available_Data>

000d4d3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4d3a:	2100      	movs	r1, #0
   d4d3c:	7c00      	ldrb	r0, [r0, #16]
   d4d3e:	f7ff be27 	b.w	d4990 <HAL_I2C_Read_Data>

000d4d42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4d42:	2100      	movs	r1, #0
   d4d44:	7c00      	ldrb	r0, [r0, #16]
   d4d46:	f7ff be2b 	b.w	d49a0 <HAL_I2C_Peek_Data>

000d4d4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4d4a:	2100      	movs	r1, #0
   d4d4c:	7c00      	ldrb	r0, [r0, #16]
   d4d4e:	f7ff be2f 	b.w	d49b0 <HAL_I2C_Flush_Data>

000d4d52 <_ZN7TwoWireD0Ev>:
   d4d52:	b510      	push	{r4, lr}
   d4d54:	2114      	movs	r1, #20
   d4d56:	4604      	mov	r4, r0
   d4d58:	f000 fd2f 	bl	d57ba <_ZdlPvj>
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	bd10      	pop	{r4, pc}

000d4d60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d60:	b510      	push	{r4, lr}
   d4d62:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d64:	2300      	movs	r3, #0
   d4d66:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d6c:	60a3      	str	r3, [r4, #8]
   d4d6e:	4b04      	ldr	r3, [pc, #16]	; (d4d80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4d70:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d72:	4608      	mov	r0, r1
   d4d74:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4d76:	4611      	mov	r1, r2
   d4d78:	f7ff fe2a 	bl	d49d0 <HAL_I2C_Init>
}
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	bd10      	pop	{r4, pc}
   d4d80:	000d6538 	.word	0x000d6538

000d4d84 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4d84:	2100      	movs	r1, #0
   d4d86:	7c00      	ldrb	r0, [r0, #16]
   d4d88:	f7ff be1a 	b.w	d49c0 <HAL_I2C_Is_Enabled>

000d4d8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d8c:	4770      	bx	lr

000d4d8e <_ZN9IPAddressD0Ev>:
   d4d8e:	b510      	push	{r4, lr}
   d4d90:	2118      	movs	r1, #24
   d4d92:	4604      	mov	r4, r0
   d4d94:	f000 fd11 	bl	d57ba <_ZdlPvj>
   d4d98:	4620      	mov	r0, r4
   d4d9a:	bd10      	pop	{r4, pc}

000d4d9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d9e:	7d03      	ldrb	r3, [r0, #20]
   d4da0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4da2:	b08d      	sub	sp, #52	; 0x34
   d4da4:	460e      	mov	r6, r1
   d4da6:	f100 0704 	add.w	r7, r0, #4
   d4daa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4dae:	d002      	beq.n	d4db6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4db0:	f100 0508 	add.w	r5, r0, #8
   d4db4:	e018      	b.n	d4de8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4db6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4db8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4dba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4dbe:	232f      	movs	r3, #47	; 0x2f
   d4dc0:	462a      	mov	r2, r5
   d4dc2:	200a      	movs	r0, #10
   d4dc4:	f7ff fe0c 	bl	d49e0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4dc8:	4628      	mov	r0, r5
   d4dca:	f001 fb7d 	bl	d64c8 <strlen>
   d4dce:	6833      	ldr	r3, [r6, #0]
   d4dd0:	4602      	mov	r2, r0
   d4dd2:	68db      	ldr	r3, [r3, #12]
   d4dd4:	4629      	mov	r1, r5
   d4dd6:	4630      	mov	r0, r6
   d4dd8:	4798      	blx	r3
   d4dda:	e00f      	b.n	d4dfc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ddc:	b124      	cbz	r4, d4de8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4dde:	212e      	movs	r1, #46	; 0x2e
   d4de0:	4630      	mov	r0, r6
   d4de2:	f000 f9d5 	bl	d5190 <_ZN5Print5printEc>
   d4de6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4de8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4dec:	220a      	movs	r2, #10
   d4dee:	4630      	mov	r0, r6
   d4df0:	f000 f9d1 	bl	d5196 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4df4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4df6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4df8:	d1f0      	bne.n	d4ddc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4dfa:	4620      	mov	r0, r4
    }
    return n;
}
   d4dfc:	b00d      	add	sp, #52	; 0x34
   d4dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e00 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4e00:	b510      	push	{r4, lr}
   d4e02:	4b05      	ldr	r3, [pc, #20]	; (d4e18 <_ZN9IPAddressC1Ev+0x18>)
   d4e04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e06:	2211      	movs	r2, #17
   d4e08:	f840 3b04 	str.w	r3, [r0], #4
   d4e0c:	2100      	movs	r1, #0
   d4e0e:	f001 fb1c 	bl	d644a <memset>
{
    clear();
}
   d4e12:	4620      	mov	r0, r4
   d4e14:	bd10      	pop	{r4, pc}
   d4e16:	bf00      	nop
   d4e18:	000d6560 	.word	0x000d6560

000d4e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e1c:	4603      	mov	r3, r0
   d4e1e:	4a07      	ldr	r2, [pc, #28]	; (d4e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e20:	b510      	push	{r4, lr}
   d4e22:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4e26:	f101 0210 	add.w	r2, r1, #16
   d4e2a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e2e:	f843 4b04 	str.w	r4, [r3], #4
   d4e32:	4291      	cmp	r1, r2
   d4e34:	d1f9      	bne.n	d4e2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e36:	780a      	ldrb	r2, [r1, #0]
   d4e38:	701a      	strb	r2, [r3, #0]
}
   d4e3a:	bd10      	pop	{r4, pc}
   d4e3c:	000d6560 	.word	0x000d6560

000d4e40 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4e40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4e42:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4e4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4e52:	2304      	movs	r3, #4
   d4e54:	6041      	str	r1, [r0, #4]
   d4e56:	7503      	strb	r3, [r0, #20]
   d4e58:	bd10      	pop	{r4, pc}

000d4e5a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e5c:	780d      	ldrb	r5, [r1, #0]
   d4e5e:	788b      	ldrb	r3, [r1, #2]
   d4e60:	784a      	ldrb	r2, [r1, #1]
   d4e62:	78c9      	ldrb	r1, [r1, #3]
   d4e64:	9100      	str	r1, [sp, #0]
   d4e66:	4629      	mov	r1, r5
   d4e68:	f7ff ffea 	bl	d4e40 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e6c:	b003      	add	sp, #12
   d4e6e:	bd30      	pop	{r4, r5, pc}

000d4e70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e70:	4b01      	ldr	r3, [pc, #4]	; (d4e78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e72:	4a02      	ldr	r2, [pc, #8]	; (d4e7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e74:	601a      	str	r2, [r3, #0]
   d4e76:	4770      	bx	lr
   d4e78:	2003e3d8 	.word	0x2003e3d8
   d4e7c:	000d65df 	.word	0x000d65df

000d4e80 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e80:	2200      	movs	r2, #0
   d4e82:	4611      	mov	r1, r2
   d4e84:	6840      	ldr	r0, [r0, #4]
   d4e86:	f7ff bea7 	b.w	d4bd8 <network_listening>

000d4e8a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e8a:	2200      	movs	r2, #0
   d4e8c:	4611      	mov	r1, r2
   d4e8e:	6840      	ldr	r0, [r0, #4]
   d4e90:	f7ff beb2 	b.w	d4bf8 <network_get_listen_timeout>

000d4e94 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e94:	2200      	movs	r2, #0
   d4e96:	6840      	ldr	r0, [r0, #4]
   d4e98:	f7ff bea6 	b.w	d4be8 <network_set_listen_timeout>

000d4e9c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e9c:	2200      	movs	r2, #0
   d4e9e:	f081 0101 	eor.w	r1, r1, #1
   d4ea2:	6840      	ldr	r0, [r0, #4]
   d4ea4:	f7ff be90 	b.w	d4bc8 <network_listen>

000d4ea8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4ea8:	2300      	movs	r3, #0
   d4eaa:	461a      	mov	r2, r3
   d4eac:	2101      	movs	r1, #1
   d4eae:	6840      	ldr	r0, [r0, #4]
   d4eb0:	f7ff be82 	b.w	d4bb8 <network_off>

000d4eb4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	461a      	mov	r2, r3
   d4eb8:	4619      	mov	r1, r3
   d4eba:	6840      	ldr	r0, [r0, #4]
   d4ebc:	f7ff be74 	b.w	d4ba8 <network_on>

000d4ec0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ec0:	2200      	movs	r2, #0
   d4ec2:	4611      	mov	r1, r2
   d4ec4:	6840      	ldr	r0, [r0, #4]
   d4ec6:	f7ff be67 	b.w	d4b98 <network_ready>

000d4eca <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4eca:	2200      	movs	r2, #0
   d4ecc:	4611      	mov	r1, r2
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	f7ff be52 	b.w	d4b78 <network_connecting>

000d4ed4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ed4:	2200      	movs	r2, #0
   d4ed6:	2102      	movs	r1, #2
   d4ed8:	6840      	ldr	r0, [r0, #4]
   d4eda:	f7ff be55 	b.w	d4b88 <network_disconnect>

000d4ede <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ede:	2300      	movs	r3, #0
   d4ee0:	461a      	mov	r2, r3
   d4ee2:	6840      	ldr	r0, [r0, #4]
   d4ee4:	f7ff be40 	b.w	d4b68 <network_connect>

000d4ee8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ee8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eea:	4605      	mov	r5, r0
   d4eec:	b188      	cbz	r0, d4f12 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4eee:	6804      	ldr	r4, [r0, #0]
   d4ef0:	b14c      	cbz	r4, d4f06 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ef2:	68a3      	ldr	r3, [r4, #8]
   d4ef4:	b11b      	cbz	r3, d4efe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ef6:	2203      	movs	r2, #3
   d4ef8:	4621      	mov	r1, r4
   d4efa:	4620      	mov	r0, r4
   d4efc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4efe:	2110      	movs	r1, #16
   d4f00:	4620      	mov	r0, r4
   d4f02:	f000 fc5a 	bl	d57ba <_ZdlPvj>
   d4f06:	4628      	mov	r0, r5
   d4f08:	2114      	movs	r1, #20
      }
   d4f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f0e:	f000 bc54 	b.w	d57ba <_ZdlPvj>
   d4f12:	bd38      	pop	{r3, r4, r5, pc}

000d4f14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4f14:	b110      	cbz	r0, d4f1c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4f16:	6803      	ldr	r3, [r0, #0]
   d4f18:	685b      	ldr	r3, [r3, #4]
   d4f1a:	4718      	bx	r3
   d4f1c:	4770      	bx	lr

000d4f1e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4f1e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f20:	6803      	ldr	r3, [r0, #0]
   d4f22:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4f24:	b1bb      	cbz	r3, d4f56 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4f26:	6858      	ldr	r0, [r3, #4]
   d4f28:	f7ff fcba 	bl	d48a0 <os_thread_is_current>
   d4f2c:	b978      	cbnz	r0, d4f4e <_ZN6ThreadD1Ev+0x30>
   d4f2e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f30:	7c5a      	ldrb	r2, [r3, #17]
   d4f32:	b912      	cbnz	r2, d4f3a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f34:	6858      	ldr	r0, [r3, #4]
   d4f36:	f7ff fcbb 	bl	d48b0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f3a:	6823      	ldr	r3, [r4, #0]
   d4f3c:	6858      	ldr	r0, [r3, #4]
   d4f3e:	f7ff fcbf 	bl	d48c0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f42:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f44:	2300      	movs	r3, #0
   d4f46:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f48:	b128      	cbz	r0, d4f56 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f4a:	f7ff ffcd 	bl	d4ee8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f4e:	6820      	ldr	r0, [r4, #0]
   d4f50:	b108      	cbz	r0, d4f56 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f52:	f7ff ffc9 	bl	d4ee8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f56:	4620      	mov	r0, r4
   d4f58:	bd10      	pop	{r4, pc}

000d4f5a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f5a:	b538      	push	{r3, r4, r5, lr}
   d4f5c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f5e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f62:	b108      	cbz	r0, d4f68 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f64:	f7ff f89b 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f68:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f6c:	b108      	cbz	r0, d4f72 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f6e:	f7ff fcb7 	bl	d48e0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f72:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f76:	b135      	cbz	r5, d4f86 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f78:	4628      	mov	r0, r5
   d4f7a:	f7ff ffd0 	bl	d4f1e <_ZN6ThreadD1Ev>
   d4f7e:	2104      	movs	r1, #4
   d4f80:	4628      	mov	r0, r5
   d4f82:	f000 fc1a 	bl	d57ba <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f86:	6820      	ldr	r0, [r4, #0]
   d4f88:	b108      	cbz	r0, d4f8e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f8a:	f7ff ffc3 	bl	d4f14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f8e:	4620      	mov	r0, r4
   d4f90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f94 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f94:	b510      	push	{r4, lr}
   d4f96:	4b04      	ldr	r3, [pc, #16]	; (d4fa8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4f98:	4604      	mov	r4, r0
   d4f9a:	f840 3b08 	str.w	r3, [r0], #8
   d4f9e:	f7ff ffdc 	bl	d4f5a <_ZN5spark11MeshPublishD1Ev>
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	bd10      	pop	{r4, pc}
   d4fa6:	bf00      	nop
   d4fa8:	000d6658 	.word	0x000d6658

000d4fac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4fac:	b538      	push	{r3, r4, r5, lr}
   d4fae:	4c0e      	ldr	r4, [pc, #56]	; (d4fe8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4fb0:	4b0e      	ldr	r3, [pc, #56]	; (d4fec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4fb2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4fb4:	2500      	movs	r5, #0
   d4fb6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4fb8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4fbc:	6063      	str	r3, [r4, #4]
   d4fbe:	60a5      	str	r5, [r4, #8]
   d4fc0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fc4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4fc8:	f7ff fc82 	bl	d48d0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4fcc:	4b08      	ldr	r3, [pc, #32]	; (d4ff0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4fce:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fd2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4fd6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4fd8:	4620      	mov	r0, r4
   d4fda:	4a06      	ldr	r2, [pc, #24]	; (d4ff4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4fdc:	4906      	ldr	r1, [pc, #24]	; (d4ff8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4fe2:	f000 bbe5 	b.w	d57b0 <__aeabi_atexit>
   d4fe6:	bf00      	nop
   d4fe8:	2003e3dc 	.word	0x2003e3dc
   d4fec:	000d668c 	.word	0x000d668c
   d4ff0:	000d6658 	.word	0x000d6658
   d4ff4:	2003e3ac 	.word	0x2003e3ac
   d4ff8:	000d4f95 	.word	0x000d4f95

000d4ffc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4ffc:	2300      	movs	r3, #0
   d4ffe:	461a      	mov	r2, r3
   d5000:	6840      	ldr	r0, [r0, #4]
   d5002:	f7ff bdb1 	b.w	d4b68 <network_connect>

000d5006 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5006:	2200      	movs	r2, #0
   d5008:	2102      	movs	r1, #2
   d500a:	6840      	ldr	r0, [r0, #4]
   d500c:	f7ff bdbc 	b.w	d4b88 <network_disconnect>

000d5010 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5010:	2200      	movs	r2, #0
   d5012:	4611      	mov	r1, r2
   d5014:	6840      	ldr	r0, [r0, #4]
   d5016:	f7ff bdaf 	b.w	d4b78 <network_connecting>

000d501a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d501a:	2200      	movs	r2, #0
   d501c:	4611      	mov	r1, r2
   d501e:	6840      	ldr	r0, [r0, #4]
   d5020:	f7ff bdba 	b.w	d4b98 <network_ready>

000d5024 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5024:	2300      	movs	r3, #0
   d5026:	461a      	mov	r2, r3
   d5028:	4619      	mov	r1, r3
   d502a:	6840      	ldr	r0, [r0, #4]
   d502c:	f7ff bdbc 	b.w	d4ba8 <network_on>

000d5030 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5030:	2300      	movs	r3, #0
   d5032:	461a      	mov	r2, r3
   d5034:	4619      	mov	r1, r3
   d5036:	6840      	ldr	r0, [r0, #4]
   d5038:	f7ff bdbe 	b.w	d4bb8 <network_off>

000d503c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d503c:	2200      	movs	r2, #0
   d503e:	f081 0101 	eor.w	r1, r1, #1
   d5042:	6840      	ldr	r0, [r0, #4]
   d5044:	f7ff bdc0 	b.w	d4bc8 <network_listen>

000d5048 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5048:	2200      	movs	r2, #0
   d504a:	6840      	ldr	r0, [r0, #4]
   d504c:	f7ff bdcc 	b.w	d4be8 <network_set_listen_timeout>

000d5050 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5050:	2200      	movs	r2, #0
   d5052:	4611      	mov	r1, r2
   d5054:	6840      	ldr	r0, [r0, #4]
   d5056:	f7ff bdcf 	b.w	d4bf8 <network_get_listen_timeout>

000d505a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d505a:	2200      	movs	r2, #0
   d505c:	4611      	mov	r1, r2
   d505e:	6840      	ldr	r0, [r0, #4]
   d5060:	f7ff bdba 	b.w	d4bd8 <network_listening>

000d5064 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5068:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d506a:	b095      	sub	sp, #84	; 0x54
   d506c:	4616      	mov	r6, r2
   d506e:	460d      	mov	r5, r1
   d5070:	4607      	mov	r7, r0
    IPAddress addr;
   d5072:	f7ff fec5 	bl	d4e00 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5076:	4621      	mov	r1, r4
   d5078:	2220      	movs	r2, #32
   d507a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d507c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d507e:	f001 f9e4 	bl	d644a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5082:	2340      	movs	r3, #64	; 0x40
   d5084:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5086:	4621      	mov	r1, r4
   d5088:	466b      	mov	r3, sp
   d508a:	aa0c      	add	r2, sp, #48	; 0x30
   d508c:	4630      	mov	r0, r6
   d508e:	f7ff fcb7 	bl	d4a00 <netdb_getaddrinfo>
    if (!r) {
   d5092:	4604      	mov	r4, r0
   d5094:	2800      	cmp	r0, #0
   d5096:	d144      	bne.n	d5122 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5098:	4602      	mov	r2, r0
   d509a:	2101      	movs	r1, #1
   d509c:	6868      	ldr	r0, [r5, #4]
   d509e:	f7ff fd7b 	bl	d4b98 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50a2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d50a4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50a6:	4622      	mov	r2, r4
   d50a8:	6868      	ldr	r0, [r5, #4]
   d50aa:	f7ff fd75 	bl	d4b98 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50ae:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50b0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d50b2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50b4:	2e00      	cmp	r6, #0
   d50b6:	d034      	beq.n	d5122 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d50b8:	2900      	cmp	r1, #0
   d50ba:	d132      	bne.n	d5122 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d50bc:	6873      	ldr	r3, [r6, #4]
   d50be:	2b02      	cmp	r3, #2
   d50c0:	d002      	beq.n	d50c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d50c2:	2b0a      	cmp	r3, #10
   d50c4:	d009      	beq.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d50c6:	e02a      	b.n	d511e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d50c8:	f1b8 0f00 	cmp.w	r8, #0
   d50cc:	d027      	beq.n	d511e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d50ce:	6971      	ldr	r1, [r6, #20]
   d50d0:	4638      	mov	r0, r7
   d50d2:	3104      	adds	r1, #4
   d50d4:	f7ff fec1 	bl	d4e5a <_ZN9IPAddressaSEPKh>
   d50d8:	e020      	b.n	d511c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d50da:	f1b9 0f00 	cmp.w	r9, #0
   d50de:	d01e      	beq.n	d511e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d50e0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d50e2:	2211      	movs	r2, #17
   d50e4:	a801      	add	r0, sp, #4
   d50e6:	f001 f9b0 	bl	d644a <memset>
                    a.v = 6;
   d50ea:	2306      	movs	r3, #6
   d50ec:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50f0:	ad01      	add	r5, sp, #4
   d50f2:	f104 0308 	add.w	r3, r4, #8
   d50f6:	3418      	adds	r4, #24
   d50f8:	6818      	ldr	r0, [r3, #0]
   d50fa:	6859      	ldr	r1, [r3, #4]
   d50fc:	462a      	mov	r2, r5
   d50fe:	c203      	stmia	r2!, {r0, r1}
   d5100:	3308      	adds	r3, #8
   d5102:	42a3      	cmp	r3, r4
   d5104:	4615      	mov	r5, r2
   d5106:	d1f7      	bne.n	d50f8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5108:	a901      	add	r1, sp, #4
   d510a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d510c:	ad07      	add	r5, sp, #28
   d510e:	f7ff fe85 	bl	d4e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5114:	1d3c      	adds	r4, r7, #4
   d5116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5118:	682b      	ldr	r3, [r5, #0]
   d511a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d511c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d511e:	69f6      	ldr	r6, [r6, #28]
   d5120:	e7c8      	b.n	d50b4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5122:	9800      	ldr	r0, [sp, #0]
   d5124:	f7ff fc64 	bl	d49f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5128:	4638      	mov	r0, r7
   d512a:	b015      	add	sp, #84	; 0x54
   d512c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5130 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5130:	4b02      	ldr	r3, [pc, #8]	; (d513c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5132:	4a03      	ldr	r2, [pc, #12]	; (d5140 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5134:	601a      	str	r2, [r3, #0]
   d5136:	2200      	movs	r2, #0
   d5138:	605a      	str	r2, [r3, #4]
   d513a:	4770      	bx	lr
   d513c:	2003e5b0 	.word	0x2003e5b0
   d5140:	000d668c 	.word	0x000d668c

000d5144 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5146:	4606      	mov	r6, r0
   d5148:	460d      	mov	r5, r1
   d514a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d514c:	2400      	movs	r4, #0
  while (size--) {
   d514e:	42bd      	cmp	r5, r7
   d5150:	d00c      	beq.n	d516c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5152:	6833      	ldr	r3, [r6, #0]
   d5154:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5158:	689b      	ldr	r3, [r3, #8]
   d515a:	4630      	mov	r0, r6
   d515c:	4798      	blx	r3
     if (chunk>=0)
   d515e:	2800      	cmp	r0, #0
   d5160:	db01      	blt.n	d5166 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5162:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5164:	e7f3      	b.n	d514e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5166:	2c00      	cmp	r4, #0
   d5168:	bf08      	it	eq
   d516a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d516c:	4620      	mov	r0, r4
   d516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5170 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5170:	b570      	push	{r4, r5, r6, lr}
   d5172:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5174:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5176:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5178:	b149      	cbz	r1, d518e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d517a:	f001 f9a5 	bl	d64c8 <strlen>
   d517e:	682b      	ldr	r3, [r5, #0]
   d5180:	4602      	mov	r2, r0
   d5182:	4621      	mov	r1, r4
   d5184:	4628      	mov	r0, r5
   d5186:	68db      	ldr	r3, [r3, #12]
    }
   d5188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d518c:	4718      	bx	r3
    }
   d518e:	bd70      	pop	{r4, r5, r6, pc}

000d5190 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5190:	6803      	ldr	r3, [r0, #0]
   d5192:	689b      	ldr	r3, [r3, #8]
   d5194:	4718      	bx	r3

000d5196 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5196:	b530      	push	{r4, r5, lr}
   d5198:	b08b      	sub	sp, #44	; 0x2c
   d519a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d519c:	2100      	movs	r1, #0
   d519e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51a2:	2a01      	cmp	r2, #1
   d51a4:	bf98      	it	ls
   d51a6:	220a      	movls	r2, #10
   d51a8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d51ac:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d51b0:	fb05 3312 	mls	r3, r5, r2, r3
   d51b4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51b8:	2b09      	cmp	r3, #9
   d51ba:	bf94      	ite	ls
   d51bc:	3330      	addls	r3, #48	; 0x30
   d51be:	3337      	addhi	r3, #55	; 0x37
   d51c0:	b2db      	uxtb	r3, r3
   d51c2:	4621      	mov	r1, r4
   d51c4:	f804 3901 	strb.w	r3, [r4], #-1
   d51c8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d51ca:	2d00      	cmp	r5, #0
   d51cc:	d1ee      	bne.n	d51ac <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d51ce:	f7ff ffcf 	bl	d5170 <_ZN5Print5writeEPKc>
}
   d51d2:	b00b      	add	sp, #44	; 0x2c
   d51d4:	bd30      	pop	{r4, r5, pc}

000d51d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51d6:	b510      	push	{r4, lr}
   d51d8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51da:	f7ff fd4d 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
   d51de:	4620      	mov	r0, r4
   d51e0:	bd10      	pop	{r4, pc}
	...

000d51e4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51e4:	4803      	ldr	r0, [pc, #12]	; (d51f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51e6:	4a04      	ldr	r2, [pc, #16]	; (d51f8 <_GLOBAL__sub_I_RGB+0x14>)
   d51e8:	4904      	ldr	r1, [pc, #16]	; (d51fc <_GLOBAL__sub_I_RGB+0x18>)
   d51ea:	2300      	movs	r3, #0
   d51ec:	6083      	str	r3, [r0, #8]
   d51ee:	f000 badf 	b.w	d57b0 <__aeabi_atexit>
   d51f2:	bf00      	nop
   d51f4:	2003e5b8 	.word	0x2003e5b8
   d51f8:	2003e3ac 	.word	0x2003e3ac
   d51fc:	000d51d7 	.word	0x000d51d7

000d5200 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5200:	4770      	bx	lr

000d5202 <_ZN8SPIClassD0Ev>:
   d5202:	b510      	push	{r4, lr}
   d5204:	210c      	movs	r1, #12
   d5206:	4604      	mov	r4, r0
   d5208:	f000 fad7 	bl	d57ba <_ZdlPvj>
   d520c:	4620      	mov	r0, r4
   d520e:	bd10      	pop	{r4, pc}

000d5210 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5210:	b510      	push	{r4, lr}
   d5212:	4b05      	ldr	r3, [pc, #20]	; (d5228 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5214:	6003      	str	r3, [r0, #0]
   d5216:	4604      	mov	r4, r0
{
    _spi = spi;
   d5218:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d521a:	4608      	mov	r0, r1
   d521c:	f7ff fbf8 	bl	d4a10 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5220:	2300      	movs	r3, #0
   d5222:	60a3      	str	r3, [r4, #8]
}
   d5224:	4620      	mov	r0, r4
   d5226:	bd10      	pop	{r4, pc}
   d5228:	000d66c0 	.word	0x000d66c0

000d522c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d522c:	7900      	ldrb	r0, [r0, #4]
   d522e:	f7ff bbf7 	b.w	d4a20 <HAL_SPI_Is_Enabled>

000d5232 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5232:	b510      	push	{r4, lr}
   d5234:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5236:	6800      	ldr	r0, [r0, #0]
   d5238:	b118      	cbz	r0, d5242 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d523a:	f7ff fced 	bl	d4c18 <free>
            wakeupSource_ = nullptr;
   d523e:	2300      	movs	r3, #0
   d5240:	6023      	str	r3, [r4, #0]
   d5242:	bd10      	pop	{r4, pc}

000d5244 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5244:	b510      	push	{r4, lr}
   d5246:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5248:	f7ff fff3 	bl	d5232 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d524c:	4620      	mov	r0, r4
   d524e:	bd10      	pop	{r4, pc}

000d5250 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5250:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5252:	4c09      	ldr	r4, [pc, #36]	; (d5278 <_GLOBAL__sub_I_System+0x28>)
   d5254:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5256:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d525a:	6020      	str	r0, [r4, #0]
   d525c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d525e:	71a0      	strb	r0, [r4, #6]
   d5260:	8120      	strh	r0, [r4, #8]
   d5262:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5264:	f7ff fc54 	bl	d4b10 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5268:	4620      	mov	r0, r4
   d526a:	4a04      	ldr	r2, [pc, #16]	; (d527c <_GLOBAL__sub_I_System+0x2c>)
   d526c:	4904      	ldr	r1, [pc, #16]	; (d5280 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d526e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5272:	f000 ba9d 	b.w	d57b0 <__aeabi_atexit>
   d5276:	bf00      	nop
   d5278:	2003e5c8 	.word	0x2003e5c8
   d527c:	2003e3ac 	.word	0x2003e3ac
   d5280:	000d5245 	.word	0x000d5245

000d5284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5284:	4b02      	ldr	r3, [pc, #8]	; (d5290 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	4b02      	ldr	r3, [pc, #8]	; (d5294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d528a:	601a      	str	r2, [r3, #0]
   d528c:	4770      	bx	lr
   d528e:	bf00      	nop
   d5290:	2003e344 	.word	0x2003e344
   d5294:	2003e5d4 	.word	0x2003e5d4

000d5298 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5298:	4770      	bx	lr

000d529a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d529a:	7441      	strb	r1, [r0, #17]
   d529c:	4770      	bx	lr

000d529e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d529e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d52a0:	7c00      	ldrb	r0, [r0, #16]
   d52a2:	f7ff fbfd 	bl	d4aa0 <HAL_USART_Available_Data_For_Write>
}
   d52a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52aa:	bd08      	pop	{r3, pc}

000d52ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d52ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d52ae:	7c00      	ldrb	r0, [r0, #16]
   d52b0:	f7ff fbce 	bl	d4a50 <HAL_USART_Available_Data>
}
   d52b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52b8:	bd08      	pop	{r3, pc}

000d52ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d52ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d52bc:	7c00      	ldrb	r0, [r0, #16]
   d52be:	f7ff fbd7 	bl	d4a70 <HAL_USART_Peek_Data>
}
   d52c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d52c6:	bf28      	it	cs
   d52c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d52cc:	bd08      	pop	{r3, pc}

000d52ce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d52ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d52d0:	7c00      	ldrb	r0, [r0, #16]
   d52d2:	f7ff fbc5 	bl	d4a60 <HAL_USART_Read_Data>
}
   d52d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d52da:	bf28      	it	cs
   d52dc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d52e0:	bd08      	pop	{r3, pc}

000d52e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d52e2:	7c00      	ldrb	r0, [r0, #16]
   d52e4:	f7ff bbcc 	b.w	d4a80 <HAL_USART_Flush_Data>

000d52e8 <_ZN11USARTSerialD0Ev>:
   d52e8:	b510      	push	{r4, lr}
   d52ea:	2114      	movs	r1, #20
   d52ec:	4604      	mov	r4, r0
   d52ee:	f000 fa64 	bl	d57ba <_ZdlPvj>
   d52f2:	4620      	mov	r0, r4
   d52f4:	bd10      	pop	{r4, pc}

000d52f6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d52f6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d52f8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d52fa:	4604      	mov	r4, r0
   d52fc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d52fe:	b925      	cbnz	r5, d530a <_ZN11USARTSerial5writeEh+0x14>
   d5300:	7c00      	ldrb	r0, [r0, #16]
   d5302:	f7ff fbcd 	bl	d4aa0 <HAL_USART_Available_Data_For_Write>
   d5306:	2800      	cmp	r0, #0
   d5308:	dd05      	ble.n	d5316 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d530a:	4631      	mov	r1, r6
   d530c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d530e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5312:	f7ff bb95 	b.w	d4a40 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5316:	4628      	mov	r0, r5
   d5318:	bd70      	pop	{r4, r5, r6, pc}
	...

000d531c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d531c:	b510      	push	{r4, lr}
   d531e:	4604      	mov	r4, r0
   d5320:	4608      	mov	r0, r1
   d5322:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5324:	2200      	movs	r2, #0
   d5326:	6062      	str	r2, [r4, #4]
   d5328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d532c:	60a2      	str	r2, [r4, #8]
   d532e:	4a05      	ldr	r2, [pc, #20]	; (d5344 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5330:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5332:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5334:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5336:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5338:	461a      	mov	r2, r3
   d533a:	f7ff fb79 	bl	d4a30 <HAL_USART_Init>
}
   d533e:	4620      	mov	r0, r4
   d5340:	bd10      	pop	{r4, pc}
   d5342:	bf00      	nop
   d5344:	000d66fc 	.word	0x000d66fc

000d5348 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5348:	7c00      	ldrb	r0, [r0, #16]
   d534a:	f7ff bba1 	b.w	d4a90 <HAL_USART_Is_Enabled>
	...

000d5350 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5350:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5352:	4d0c      	ldr	r5, [pc, #48]	; (d5384 <_Z22__fetch_global_Serial1v+0x34>)
   d5354:	6829      	ldr	r1, [r5, #0]
   d5356:	f011 0401 	ands.w	r4, r1, #1
   d535a:	d111      	bne.n	d5380 <_Z22__fetch_global_Serial1v+0x30>
   d535c:	4628      	mov	r0, r5
   d535e:	f7fe fea0 	bl	d40a2 <__cxa_guard_acquire>
   d5362:	b168      	cbz	r0, d5380 <_Z22__fetch_global_Serial1v+0x30>
   d5364:	4a08      	ldr	r2, [pc, #32]	; (d5388 <_Z22__fetch_global_Serial1v+0x38>)
   d5366:	4b09      	ldr	r3, [pc, #36]	; (d538c <_Z22__fetch_global_Serial1v+0x3c>)
   d5368:	4809      	ldr	r0, [pc, #36]	; (d5390 <_Z22__fetch_global_Serial1v+0x40>)
   d536a:	4621      	mov	r1, r4
   d536c:	f7ff ffd6 	bl	d531c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5370:	4628      	mov	r0, r5
   d5372:	f7fe fe9b 	bl	d40ac <__cxa_guard_release>
   d5376:	4a07      	ldr	r2, [pc, #28]	; (d5394 <_Z22__fetch_global_Serial1v+0x44>)
   d5378:	4907      	ldr	r1, [pc, #28]	; (d5398 <_Z22__fetch_global_Serial1v+0x48>)
   d537a:	4805      	ldr	r0, [pc, #20]	; (d5390 <_Z22__fetch_global_Serial1v+0x40>)
   d537c:	f000 fa18 	bl	d57b0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5380:	4803      	ldr	r0, [pc, #12]	; (d5390 <_Z22__fetch_global_Serial1v+0x40>)
   d5382:	bd38      	pop	{r3, r4, r5, pc}
   d5384:	2003e670 	.word	0x2003e670
   d5388:	2003e674 	.word	0x2003e674
   d538c:	2003e5ec 	.word	0x2003e5ec
   d5390:	2003e5d8 	.word	0x2003e5d8
   d5394:	2003e3ac 	.word	0x2003e3ac
   d5398:	000d5299 	.word	0x000d5299

000d539c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d539c:	7441      	strb	r1, [r0, #17]
   d539e:	4770      	bx	lr

000d53a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d53a0:	4770      	bx	lr

000d53a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d53a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d53a4:	2100      	movs	r1, #0
   d53a6:	7c00      	ldrb	r0, [r0, #16]
   d53a8:	f7ff fb9a 	bl	d4ae0 <HAL_USB_USART_Receive_Data>
}
   d53ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d53b0:	bf28      	it	cs
   d53b2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d53b6:	bd08      	pop	{r3, pc}

000d53b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d53b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d53ba:	2101      	movs	r1, #1
   d53bc:	7c00      	ldrb	r0, [r0, #16]
   d53be:	f7ff fb8f 	bl	d4ae0 <HAL_USB_USART_Receive_Data>
}
   d53c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d53c6:	bf28      	it	cs
   d53c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d53cc:	bd08      	pop	{r3, pc}

000d53ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d53ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d53d0:	7c00      	ldrb	r0, [r0, #16]
   d53d2:	f7ff fb7d 	bl	d4ad0 <HAL_USB_USART_Available_Data_For_Write>
}
   d53d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53da:	bd08      	pop	{r3, pc}

000d53dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d53dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d53de:	7c00      	ldrb	r0, [r0, #16]
   d53e0:	f7ff fb6e 	bl	d4ac0 <HAL_USB_USART_Available_Data>
}
   d53e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d53e8:	bd08      	pop	{r3, pc}

000d53ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d53ea:	7c00      	ldrb	r0, [r0, #16]
   d53ec:	f7ff bb88 	b.w	d4b00 <HAL_USB_USART_Flush_Data>

000d53f0 <_ZN9USBSerialD0Ev>:
   d53f0:	b510      	push	{r4, lr}
   d53f2:	2114      	movs	r1, #20
   d53f4:	4604      	mov	r4, r0
   d53f6:	f000 f9e0 	bl	d57ba <_ZdlPvj>
   d53fa:	4620      	mov	r0, r4
   d53fc:	bd10      	pop	{r4, pc}

000d53fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d53fe:	b538      	push	{r3, r4, r5, lr}
   d5400:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5402:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5404:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5406:	f7ff fb63 	bl	d4ad0 <HAL_USB_USART_Available_Data_For_Write>
   d540a:	2800      	cmp	r0, #0
   d540c:	dc01      	bgt.n	d5412 <_ZN9USBSerial5writeEh+0x14>
   d540e:	7c60      	ldrb	r0, [r4, #17]
   d5410:	b128      	cbz	r0, d541e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5412:	4629      	mov	r1, r5
   d5414:	7c20      	ldrb	r0, [r4, #16]
   d5416:	f7ff fb6b 	bl	d4af0 <HAL_USB_USART_Send_Data>
   d541a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d541e:	bd38      	pop	{r3, r4, r5, pc}

000d5420 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5420:	b510      	push	{r4, lr}
   d5422:	4604      	mov	r4, r0
   d5424:	2300      	movs	r3, #0
   d5426:	6063      	str	r3, [r4, #4]
   d5428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d542c:	60a3      	str	r3, [r4, #8]
   d542e:	4b05      	ldr	r3, [pc, #20]	; (d5444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5430:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5432:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5434:	4608      	mov	r0, r1
{
  _serial = serial;
   d5436:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5438:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d543a:	4611      	mov	r1, r2
   d543c:	f7ff fb38 	bl	d4ab0 <HAL_USB_USART_Init>
}
   d5440:	4620      	mov	r0, r4
   d5442:	bd10      	pop	{r4, pc}
   d5444:	000d672c 	.word	0x000d672c

000d5448 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5448:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d544a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d544c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d544e:	2100      	movs	r1, #0
   d5450:	f000 fffb 	bl	d644a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5454:	4620      	mov	r0, r4
   d5456:	bd10      	pop	{r4, pc}

000d5458 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5458:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d545a:	4d0e      	ldr	r5, [pc, #56]	; (d5494 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d545c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d545e:	a801      	add	r0, sp, #4
   d5460:	f7ff fff2 	bl	d5448 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5464:	6829      	ldr	r1, [r5, #0]
   d5466:	f011 0401 	ands.w	r4, r1, #1
   d546a:	d110      	bne.n	d548e <_Z16_fetch_usbserialv+0x36>
   d546c:	4628      	mov	r0, r5
   d546e:	f7fe fe18 	bl	d40a2 <__cxa_guard_acquire>
   d5472:	b160      	cbz	r0, d548e <_Z16_fetch_usbserialv+0x36>
   d5474:	aa01      	add	r2, sp, #4
   d5476:	4621      	mov	r1, r4
   d5478:	4807      	ldr	r0, [pc, #28]	; (d5498 <_Z16_fetch_usbserialv+0x40>)
   d547a:	f7ff ffd1 	bl	d5420 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d547e:	4628      	mov	r0, r5
   d5480:	f7fe fe14 	bl	d40ac <__cxa_guard_release>
   d5484:	4a05      	ldr	r2, [pc, #20]	; (d549c <_Z16_fetch_usbserialv+0x44>)
   d5486:	4906      	ldr	r1, [pc, #24]	; (d54a0 <_Z16_fetch_usbserialv+0x48>)
   d5488:	4803      	ldr	r0, [pc, #12]	; (d5498 <_Z16_fetch_usbserialv+0x40>)
   d548a:	f000 f991 	bl	d57b0 <__aeabi_atexit>
	return _usbserial;
}
   d548e:	4802      	ldr	r0, [pc, #8]	; (d5498 <_Z16_fetch_usbserialv+0x40>)
   d5490:	b007      	add	sp, #28
   d5492:	bd30      	pop	{r4, r5, pc}
   d5494:	2003e6f8 	.word	0x2003e6f8
   d5498:	2003e6fc 	.word	0x2003e6fc
   d549c:	2003e3ac 	.word	0x2003e3ac
   d54a0:	000d53a1 	.word	0x000d53a1

000d54a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d54a4:	2200      	movs	r2, #0
   d54a6:	4611      	mov	r1, r2
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	f7ff bb75 	b.w	d4b98 <network_ready>

000d54ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54ae:	2200      	movs	r2, #0
   d54b0:	4611      	mov	r1, r2
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	f7ff bb90 	b.w	d4bd8 <network_listening>

000d54b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d54b8:	2200      	movs	r2, #0
   d54ba:	4611      	mov	r1, r2
   d54bc:	6840      	ldr	r0, [r0, #4]
   d54be:	f7ff bb9b 	b.w	d4bf8 <network_get_listen_timeout>

000d54c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d54c2:	2200      	movs	r2, #0
   d54c4:	6840      	ldr	r0, [r0, #4]
   d54c6:	f7ff bb8f 	b.w	d4be8 <network_set_listen_timeout>

000d54ca <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d54ca:	2200      	movs	r2, #0
   d54cc:	f081 0101 	eor.w	r1, r1, #1
   d54d0:	6840      	ldr	r0, [r0, #4]
   d54d2:	f7ff bb79 	b.w	d4bc8 <network_listen>

000d54d6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d54d6:	2300      	movs	r3, #0
   d54d8:	461a      	mov	r2, r3
   d54da:	4619      	mov	r1, r3
   d54dc:	6840      	ldr	r0, [r0, #4]
   d54de:	f7ff bb6b 	b.w	d4bb8 <network_off>

000d54e2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d54e2:	2300      	movs	r3, #0
   d54e4:	461a      	mov	r2, r3
   d54e6:	4619      	mov	r1, r3
   d54e8:	6840      	ldr	r0, [r0, #4]
   d54ea:	f7ff bb5d 	b.w	d4ba8 <network_on>

000d54ee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54ee:	2200      	movs	r2, #0
   d54f0:	4611      	mov	r1, r2
   d54f2:	6840      	ldr	r0, [r0, #4]
   d54f4:	f7ff bb40 	b.w	d4b78 <network_connecting>

000d54f8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54f8:	2200      	movs	r2, #0
   d54fa:	2102      	movs	r1, #2
   d54fc:	6840      	ldr	r0, [r0, #4]
   d54fe:	f7ff bb43 	b.w	d4b88 <network_disconnect>

000d5502 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5502:	2300      	movs	r3, #0
   d5504:	461a      	mov	r2, r3
   d5506:	6840      	ldr	r0, [r0, #4]
   d5508:	f7ff bb2e 	b.w	d4b68 <network_connect>

000d550c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d550c:	4b02      	ldr	r3, [pc, #8]	; (d5518 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d550e:	2204      	movs	r2, #4
   d5510:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5512:	4a02      	ldr	r2, [pc, #8]	; (d551c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5514:	601a      	str	r2, [r3, #0]
   d5516:	4770      	bx	lr
   d5518:	2003e710 	.word	0x2003e710
   d551c:	000d675c 	.word	0x000d675c

000d5520 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5520:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5522:	4b0c      	ldr	r3, [pc, #48]	; (d5554 <serialEventRun+0x34>)
   d5524:	b133      	cbz	r3, d5534 <serialEventRun+0x14>
   d5526:	f7ff ff97 	bl	d5458 <_Z16_fetch_usbserialv>
   d552a:	6803      	ldr	r3, [r0, #0]
   d552c:	691b      	ldr	r3, [r3, #16]
   d552e:	4798      	blx	r3
   d5530:	2800      	cmp	r0, #0
   d5532:	dc09      	bgt.n	d5548 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5534:	4b08      	ldr	r3, [pc, #32]	; (d5558 <serialEventRun+0x38>)
   d5536:	b163      	cbz	r3, d5552 <serialEventRun+0x32>
   d5538:	f7ff ff0a 	bl	d5350 <_Z22__fetch_global_Serial1v>
   d553c:	6803      	ldr	r3, [r0, #0]
   d553e:	691b      	ldr	r3, [r3, #16]
   d5540:	4798      	blx	r3
   d5542:	2800      	cmp	r0, #0
   d5544:	dc03      	bgt.n	d554e <serialEventRun+0x2e>
   d5546:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5548:	f3af 8000 	nop.w
   d554c:	e7f2      	b.n	d5534 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d554e:	f3af 8000 	nop.w
   d5552:	bd08      	pop	{r3, pc}
	...

000d555c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d555c:	b508      	push	{r3, lr}
	serialEventRun();
   d555e:	f7ff ffdf 	bl	d5520 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5562:	f7ff f9d5 	bl	d4910 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5566:	4b01      	ldr	r3, [pc, #4]	; (d556c <_post_loop+0x10>)
   d5568:	6018      	str	r0, [r3, #0]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	2003e720 	.word	0x2003e720

000d5570 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5570:	4802      	ldr	r0, [pc, #8]	; (d557c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5572:	4a03      	ldr	r2, [pc, #12]	; (d5580 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5574:	4903      	ldr	r1, [pc, #12]	; (d5584 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5576:	1a12      	subs	r2, r2, r0
   d5578:	f000 bf5c 	b.w	d6434 <memcpy>
   d557c:	2003f400 	.word	0x2003f400
   d5580:	2003f404 	.word	0x2003f404
   d5584:	000d6830 	.word	0x000d6830

000d5588 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5588:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d558a:	2300      	movs	r3, #0
   d558c:	9300      	str	r3, [sp, #0]
   d558e:	461a      	mov	r2, r3
   d5590:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5594:	f7ff fad6 	bl	d4b44 <system_ctrl_set_result>
}
   d5598:	b003      	add	sp, #12
   d559a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55a2:	8843      	ldrh	r3, [r0, #2]
   d55a4:	2b0a      	cmp	r3, #10
   d55a6:	d008      	beq.n	d55ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d55a8:	2b50      	cmp	r3, #80	; 0x50
   d55aa:	d109      	bne.n	d55c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d55ac:	4b09      	ldr	r3, [pc, #36]	; (d55d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d55ae:	681b      	ldr	r3, [r3, #0]
   d55b0:	b13b      	cbz	r3, d55c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d55b2:	b003      	add	sp, #12
   d55b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d55b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d55ba:	f7ff ffe5 	bl	d5588 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d55be:	e006      	b.n	d55ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55c0:	2300      	movs	r3, #0
   d55c2:	9300      	str	r3, [sp, #0]
   d55c4:	461a      	mov	r2, r3
   d55c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55ca:	f7ff fabb 	bl	d4b44 <system_ctrl_set_result>
        break;
    }
}
   d55ce:	b003      	add	sp, #12
   d55d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d55d4:	2003e718 	.word	0x2003e718

000d55d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d55d8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55da:	4c10      	ldr	r4, [pc, #64]	; (d561c <module_user_init_hook+0x44>)
   d55dc:	4d10      	ldr	r5, [pc, #64]	; (d5620 <module_user_init_hook+0x48>)
   d55de:	6823      	ldr	r3, [r4, #0]
   d55e0:	42ab      	cmp	r3, r5
   d55e2:	4b10      	ldr	r3, [pc, #64]	; (d5624 <module_user_init_hook+0x4c>)
   d55e4:	bf0c      	ite	eq
   d55e6:	2201      	moveq	r2, #1
   d55e8:	2200      	movne	r2, #0
   d55ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d55ec:	d002      	beq.n	d55f4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d55ee:	f7ff ffbf 	bl	d5570 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d55f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d55f4:	f7ff f97c 	bl	d48f0 <HAL_RNG_GetRandomNumber>
   d55f8:	4604      	mov	r4, r0
    srand(seed);
   d55fa:	f000 ff3d 	bl	d6478 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d55fe:	4b0a      	ldr	r3, [pc, #40]	; (d5628 <module_user_init_hook+0x50>)
   d5600:	b113      	cbz	r3, d5608 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5602:	4620      	mov	r0, r4
   d5604:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5608:	2100      	movs	r1, #0
   d560a:	4807      	ldr	r0, [pc, #28]	; (d5628 <module_user_init_hook+0x50>)
   d560c:	f7ff faa4 	bl	d4b58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5610:	2100      	movs	r1, #0
   d5612:	4806      	ldr	r0, [pc, #24]	; (d562c <module_user_init_hook+0x54>)
}
   d5614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5618:	f7ff ba8a 	b.w	d4b30 <system_ctrl_set_app_request_handler>
   d561c:	2003f400 	.word	0x2003f400
   d5620:	9a271c1e 	.word	0x9a271c1e
   d5624:	2003e71c 	.word	0x2003e71c
   d5628:	00000000 	.word	0x00000000
   d562c:	000d55a1 	.word	0x000d55a1

000d5630 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5630:	b510      	push	{r4, lr}
   d5632:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5634:	f000 f89c 	bl	d5770 <_ZN8particle7globals11instanceSpiEv>
   d5638:	f7ff fdf8 	bl	d522c <_ZN8SPIClass9isEnabledEv>
   d563c:	b128      	cbz	r0, d564a <pinAvailable+0x1a>
   d563e:	f1a4 030b 	sub.w	r3, r4, #11
   d5642:	2b02      	cmp	r3, #2
   d5644:	d801      	bhi.n	d564a <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5646:	2000      	movs	r0, #0
   d5648:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d564a:	f000 f86b 	bl	d5724 <_Z19__fetch_global_Wirev>
   d564e:	f7ff fb99 	bl	d4d84 <_ZN7TwoWire9isEnabledEv>
   d5652:	b108      	cbz	r0, d5658 <pinAvailable+0x28>
   d5654:	2c01      	cmp	r4, #1
   d5656:	d9f6      	bls.n	d5646 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5658:	f7ff fe7a 	bl	d5350 <_Z22__fetch_global_Serial1v>
   d565c:	f7ff fe74 	bl	d5348 <_ZN11USARTSerial9isEnabledEv>
   d5660:	b118      	cbz	r0, d566a <pinAvailable+0x3a>
   d5662:	f1a4 0309 	sub.w	r3, r4, #9
   d5666:	2b01      	cmp	r3, #1
   d5668:	d9ed      	bls.n	d5646 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d566a:	2c23      	cmp	r4, #35	; 0x23
   d566c:	bf8c      	ite	hi
   d566e:	2000      	movhi	r0, #0
   d5670:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5672:	bd10      	pop	{r4, pc}

000d5674 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5674:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5676:	b538      	push	{r3, r4, r5, lr}
   d5678:	4604      	mov	r4, r0
   d567a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d567c:	d80a      	bhi.n	d5694 <pinMode+0x20>
   d567e:	29ff      	cmp	r1, #255	; 0xff
   d5680:	d008      	beq.n	d5694 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5682:	f7ff ffd5 	bl	d5630 <pinAvailable>
   d5686:	b128      	cbz	r0, d5694 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5688:	4629      	mov	r1, r5
   d568a:	4620      	mov	r0, r4
}
   d568c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5690:	f7ff b94e 	b.w	d4930 <HAL_Pin_Mode>
   d5694:	bd38      	pop	{r3, r4, r5, pc}

000d5696 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d569c:	f7ff f950 	bl	d4940 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d56a0:	28ff      	cmp	r0, #255	; 0xff
   d56a2:	d010      	beq.n	d56c6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d56a4:	2806      	cmp	r0, #6
   d56a6:	d804      	bhi.n	d56b2 <digitalWrite+0x1c>
   d56a8:	234d      	movs	r3, #77	; 0x4d
   d56aa:	fa23 f000 	lsr.w	r0, r3, r0
   d56ae:	07c3      	lsls	r3, r0, #31
   d56b0:	d409      	bmi.n	d56c6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56b2:	4620      	mov	r0, r4
   d56b4:	f7ff ffbc 	bl	d5630 <pinAvailable>
   d56b8:	b128      	cbz	r0, d56c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56ba:	4629      	mov	r1, r5
   d56bc:	4620      	mov	r0, r4
}
   d56be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56c2:	f7ff b945 	b.w	d4950 <HAL_GPIO_Write>
   d56c6:	bd38      	pop	{r3, r4, r5, pc}

000d56c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d56c8:	b510      	push	{r4, lr}
   d56ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56cc:	f7ff f938 	bl	d4940 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d56d0:	3804      	subs	r0, #4
   d56d2:	b2c0      	uxtb	r0, r0
   d56d4:	2801      	cmp	r0, #1
   d56d6:	d908      	bls.n	d56ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d56d8:	4620      	mov	r0, r4
   d56da:	f7ff ffa9 	bl	d5630 <pinAvailable>
   d56de:	b120      	cbz	r0, d56ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d56e0:	4620      	mov	r0, r4
}
   d56e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d56e6:	f7ff b93b 	b.w	d4960 <HAL_GPIO_Read>
}
   d56ea:	2000      	movs	r0, #0
   d56ec:	bd10      	pop	{r4, pc}
	...

000d56f0 <_Z17acquireWireBufferv>:
   d56f0:	b570      	push	{r4, r5, r6, lr}
   d56f2:	4604      	mov	r4, r0
   d56f4:	2514      	movs	r5, #20
   d56f6:	462a      	mov	r2, r5
   d56f8:	4e09      	ldr	r6, [pc, #36]	; (d5720 <_Z17acquireWireBufferv+0x30>)
   d56fa:	2100      	movs	r1, #0
   d56fc:	f000 fea5 	bl	d644a <memset>
   d5700:	8025      	strh	r5, [r4, #0]
   d5702:	2520      	movs	r5, #32
   d5704:	4631      	mov	r1, r6
   d5706:	60a5      	str	r5, [r4, #8]
   d5708:	6125      	str	r5, [r4, #16]
   d570a:	4628      	mov	r0, r5
   d570c:	f000 f86f 	bl	d57ee <_ZnajRKSt9nothrow_t>
   d5710:	4631      	mov	r1, r6
   d5712:	6060      	str	r0, [r4, #4]
   d5714:	4628      	mov	r0, r5
   d5716:	f000 f86a 	bl	d57ee <_ZnajRKSt9nothrow_t>
   d571a:	60e0      	str	r0, [r4, #12]
   d571c:	4620      	mov	r0, r4
   d571e:	bd70      	pop	{r4, r5, r6, pc}
   d5720:	000d6788 	.word	0x000d6788

000d5724 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5724:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5726:	4d0e      	ldr	r5, [pc, #56]	; (d5760 <_Z19__fetch_global_Wirev+0x3c>)
   d5728:	6829      	ldr	r1, [r5, #0]
   d572a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d572e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5730:	d113      	bne.n	d575a <_Z19__fetch_global_Wirev+0x36>
   d5732:	4628      	mov	r0, r5
   d5734:	f7fe fcb5 	bl	d40a2 <__cxa_guard_acquire>
   d5738:	b178      	cbz	r0, d575a <_Z19__fetch_global_Wirev+0x36>
   d573a:	a801      	add	r0, sp, #4
   d573c:	f7ff ffd8 	bl	d56f0 <_Z17acquireWireBufferv>
   d5740:	aa01      	add	r2, sp, #4
   d5742:	4621      	mov	r1, r4
   d5744:	4807      	ldr	r0, [pc, #28]	; (d5764 <_Z19__fetch_global_Wirev+0x40>)
   d5746:	f7ff fb0b 	bl	d4d60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d574a:	4628      	mov	r0, r5
   d574c:	f7fe fcae 	bl	d40ac <__cxa_guard_release>
   d5750:	4a05      	ldr	r2, [pc, #20]	; (d5768 <_Z19__fetch_global_Wirev+0x44>)
   d5752:	4906      	ldr	r1, [pc, #24]	; (d576c <_Z19__fetch_global_Wirev+0x48>)
   d5754:	4803      	ldr	r0, [pc, #12]	; (d5764 <_Z19__fetch_global_Wirev+0x40>)
   d5756:	f000 f82b 	bl	d57b0 <__aeabi_atexit>
	return wire;
}
   d575a:	4802      	ldr	r0, [pc, #8]	; (d5764 <_Z19__fetch_global_Wirev+0x40>)
   d575c:	b007      	add	sp, #28
   d575e:	bd30      	pop	{r4, r5, pc}
   d5760:	2003e724 	.word	0x2003e724
   d5764:	2003e728 	.word	0x2003e728
   d5768:	2003e3ac 	.word	0x2003e3ac
   d576c:	000d4d09 	.word	0x000d4d09

000d5770 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5770:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5772:	4d0b      	ldr	r5, [pc, #44]	; (d57a0 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5774:	6829      	ldr	r1, [r5, #0]
   d5776:	f011 0401 	ands.w	r4, r1, #1
   d577a:	d10f      	bne.n	d579c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d577c:	4628      	mov	r0, r5
   d577e:	f7fe fc90 	bl	d40a2 <__cxa_guard_acquire>
   d5782:	b158      	cbz	r0, d579c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5784:	4621      	mov	r1, r4
   d5786:	4807      	ldr	r0, [pc, #28]	; (d57a4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5788:	f7ff fd42 	bl	d5210 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d578c:	4628      	mov	r0, r5
   d578e:	f7fe fc8d 	bl	d40ac <__cxa_guard_release>
   d5792:	4a05      	ldr	r2, [pc, #20]	; (d57a8 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5794:	4905      	ldr	r1, [pc, #20]	; (d57ac <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5796:	4803      	ldr	r0, [pc, #12]	; (d57a4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5798:	f000 f80a 	bl	d57b0 <__aeabi_atexit>
    return instance;
}
   d579c:	4801      	ldr	r0, [pc, #4]	; (d57a4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d579e:	bd38      	pop	{r3, r4, r5, pc}
   d57a0:	2003e748 	.word	0x2003e748
   d57a4:	2003e73c 	.word	0x2003e73c
   d57a8:	2003e3ac 	.word	0x2003e3ac
   d57ac:	000d5201 	.word	0x000d5201

000d57b0 <__aeabi_atexit>:
   d57b0:	460b      	mov	r3, r1
   d57b2:	4601      	mov	r1, r0
   d57b4:	4618      	mov	r0, r3
   d57b6:	f000 be2f 	b.w	d6418 <__cxa_atexit>

000d57ba <_ZdlPvj>:
   d57ba:	f7fe bc6e 	b.w	d409a <_ZdlPv>
	...

000d57c0 <_ZSt15get_new_handlerv>:
   d57c0:	4b02      	ldr	r3, [pc, #8]	; (d57cc <_ZSt15get_new_handlerv+0xc>)
   d57c2:	6818      	ldr	r0, [r3, #0]
   d57c4:	f3bf 8f5f 	dmb	sy
   d57c8:	4770      	bx	lr
   d57ca:	bf00      	nop
   d57cc:	2003e74c 	.word	0x2003e74c

000d57d0 <_ZnwjRKSt9nothrow_t>:
   d57d0:	b510      	push	{r4, lr}
   d57d2:	2800      	cmp	r0, #0
   d57d4:	bf14      	ite	ne
   d57d6:	4604      	movne	r4, r0
   d57d8:	2401      	moveq	r4, #1
   d57da:	4620      	mov	r0, r4
   d57dc:	f7ff fa14 	bl	d4c08 <malloc>
   d57e0:	b920      	cbnz	r0, d57ec <_ZnwjRKSt9nothrow_t+0x1c>
   d57e2:	f7ff ffed 	bl	d57c0 <_ZSt15get_new_handlerv>
   d57e6:	b108      	cbz	r0, d57ec <_ZnwjRKSt9nothrow_t+0x1c>
   d57e8:	4780      	blx	r0
   d57ea:	e7f6      	b.n	d57da <_ZnwjRKSt9nothrow_t+0xa>
   d57ec:	bd10      	pop	{r4, pc}

000d57ee <_ZnajRKSt9nothrow_t>:
   d57ee:	f7ff bfef 	b.w	d57d0 <_ZnwjRKSt9nothrow_t>
	...

000d57f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d57f4:	4b24      	ldr	r3, [pc, #144]	; (d5888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d57f6:	681a      	ldr	r2, [r3, #0]
   d57f8:	07d0      	lsls	r0, r2, #31
   d57fa:	bf5c      	itt	pl
   d57fc:	2201      	movpl	r2, #1
   d57fe:	601a      	strpl	r2, [r3, #0]
   d5800:	4b22      	ldr	r3, [pc, #136]	; (d588c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5802:	681a      	ldr	r2, [r3, #0]
   d5804:	07d1      	lsls	r1, r2, #31
   d5806:	bf5c      	itt	pl
   d5808:	2201      	movpl	r2, #1
   d580a:	601a      	strpl	r2, [r3, #0]
   d580c:	4b20      	ldr	r3, [pc, #128]	; (d5890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d580e:	681a      	ldr	r2, [r3, #0]
   d5810:	07d2      	lsls	r2, r2, #31
   d5812:	bf5c      	itt	pl
   d5814:	2201      	movpl	r2, #1
   d5816:	601a      	strpl	r2, [r3, #0]
   d5818:	4b1e      	ldr	r3, [pc, #120]	; (d5894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d581a:	681a      	ldr	r2, [r3, #0]
   d581c:	07d0      	lsls	r0, r2, #31
   d581e:	bf5c      	itt	pl
   d5820:	2201      	movpl	r2, #1
   d5822:	601a      	strpl	r2, [r3, #0]
   d5824:	4b1c      	ldr	r3, [pc, #112]	; (d5898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5826:	681a      	ldr	r2, [r3, #0]
   d5828:	07d1      	lsls	r1, r2, #31
   d582a:	bf5c      	itt	pl
   d582c:	2201      	movpl	r2, #1
   d582e:	601a      	strpl	r2, [r3, #0]
   d5830:	4b1a      	ldr	r3, [pc, #104]	; (d589c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5832:	681a      	ldr	r2, [r3, #0]
   d5834:	07d2      	lsls	r2, r2, #31
   d5836:	bf5c      	itt	pl
   d5838:	2201      	movpl	r2, #1
   d583a:	601a      	strpl	r2, [r3, #0]
   d583c:	4b18      	ldr	r3, [pc, #96]	; (d58a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d583e:	681a      	ldr	r2, [r3, #0]
   d5840:	07d0      	lsls	r0, r2, #31
   d5842:	bf5c      	itt	pl
   d5844:	2201      	movpl	r2, #1
   d5846:	601a      	strpl	r2, [r3, #0]
   d5848:	4b16      	ldr	r3, [pc, #88]	; (d58a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d584a:	681a      	ldr	r2, [r3, #0]
   d584c:	07d1      	lsls	r1, r2, #31
   d584e:	bf5c      	itt	pl
   d5850:	2201      	movpl	r2, #1
   d5852:	601a      	strpl	r2, [r3, #0]
   d5854:	4b14      	ldr	r3, [pc, #80]	; (d58a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5856:	681a      	ldr	r2, [r3, #0]
   d5858:	07d2      	lsls	r2, r2, #31
   d585a:	bf5c      	itt	pl
   d585c:	2201      	movpl	r2, #1
   d585e:	601a      	strpl	r2, [r3, #0]
   d5860:	4b12      	ldr	r3, [pc, #72]	; (d58ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5862:	681a      	ldr	r2, [r3, #0]
   d5864:	07d0      	lsls	r0, r2, #31
   d5866:	bf5c      	itt	pl
   d5868:	2201      	movpl	r2, #1
   d586a:	601a      	strpl	r2, [r3, #0]
   d586c:	4b10      	ldr	r3, [pc, #64]	; (d58b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d586e:	681a      	ldr	r2, [r3, #0]
   d5870:	07d1      	lsls	r1, r2, #31
   d5872:	bf5c      	itt	pl
   d5874:	2201      	movpl	r2, #1
   d5876:	601a      	strpl	r2, [r3, #0]
   d5878:	4b0e      	ldr	r3, [pc, #56]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d587a:	681a      	ldr	r2, [r3, #0]
   d587c:	07d2      	lsls	r2, r2, #31
   d587e:	bf5c      	itt	pl
   d5880:	2201      	movpl	r2, #1
   d5882:	601a      	strpl	r2, [r3, #0]
   d5884:	4770      	bx	lr
   d5886:	bf00      	nop
   d5888:	2003e77c 	.word	0x2003e77c
   d588c:	2003e778 	.word	0x2003e778
   d5890:	2003e774 	.word	0x2003e774
   d5894:	2003e770 	.word	0x2003e770
   d5898:	2003e76c 	.word	0x2003e76c
   d589c:	2003e768 	.word	0x2003e768
   d58a0:	2003e764 	.word	0x2003e764
   d58a4:	2003e760 	.word	0x2003e760
   d58a8:	2003e75c 	.word	0x2003e75c
   d58ac:	2003e758 	.word	0x2003e758
   d58b0:	2003e754 	.word	0x2003e754
   d58b4:	2003e750 	.word	0x2003e750

000d58b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d58b8:	4b18      	ldr	r3, [pc, #96]	; (d591c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d58ba:	681a      	ldr	r2, [r3, #0]
   d58bc:	07d1      	lsls	r1, r2, #31
   d58be:	bf5c      	itt	pl
   d58c0:	2201      	movpl	r2, #1
   d58c2:	601a      	strpl	r2, [r3, #0]
   d58c4:	4b16      	ldr	r3, [pc, #88]	; (d5920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d58c6:	681a      	ldr	r2, [r3, #0]
   d58c8:	07d2      	lsls	r2, r2, #31
   d58ca:	bf5c      	itt	pl
   d58cc:	2201      	movpl	r2, #1
   d58ce:	601a      	strpl	r2, [r3, #0]
   d58d0:	4b14      	ldr	r3, [pc, #80]	; (d5924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d58d2:	681a      	ldr	r2, [r3, #0]
   d58d4:	07d0      	lsls	r0, r2, #31
   d58d6:	bf5c      	itt	pl
   d58d8:	2201      	movpl	r2, #1
   d58da:	601a      	strpl	r2, [r3, #0]
   d58dc:	4b12      	ldr	r3, [pc, #72]	; (d5928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d58de:	681a      	ldr	r2, [r3, #0]
   d58e0:	07d1      	lsls	r1, r2, #31
   d58e2:	bf5c      	itt	pl
   d58e4:	2201      	movpl	r2, #1
   d58e6:	601a      	strpl	r2, [r3, #0]
   d58e8:	4b10      	ldr	r3, [pc, #64]	; (d592c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d58ea:	681a      	ldr	r2, [r3, #0]
   d58ec:	07d2      	lsls	r2, r2, #31
   d58ee:	bf5c      	itt	pl
   d58f0:	2201      	movpl	r2, #1
   d58f2:	601a      	strpl	r2, [r3, #0]
   d58f4:	4b0e      	ldr	r3, [pc, #56]	; (d5930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d58f6:	681a      	ldr	r2, [r3, #0]
   d58f8:	07d0      	lsls	r0, r2, #31
   d58fa:	bf5c      	itt	pl
   d58fc:	2201      	movpl	r2, #1
   d58fe:	601a      	strpl	r2, [r3, #0]
   d5900:	4b0c      	ldr	r3, [pc, #48]	; (d5934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5902:	681a      	ldr	r2, [r3, #0]
   d5904:	07d1      	lsls	r1, r2, #31
   d5906:	bf5c      	itt	pl
   d5908:	2201      	movpl	r2, #1
   d590a:	601a      	strpl	r2, [r3, #0]
   d590c:	4b0a      	ldr	r3, [pc, #40]	; (d5938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d590e:	681a      	ldr	r2, [r3, #0]
   d5910:	07d2      	lsls	r2, r2, #31
   d5912:	bf5c      	itt	pl
   d5914:	2201      	movpl	r2, #1
   d5916:	601a      	strpl	r2, [r3, #0]
   d5918:	4770      	bx	lr
   d591a:	bf00      	nop
   d591c:	2003e79c 	.word	0x2003e79c
   d5920:	2003e798 	.word	0x2003e798
   d5924:	2003e794 	.word	0x2003e794
   d5928:	2003e790 	.word	0x2003e790
   d592c:	2003e78c 	.word	0x2003e78c
   d5930:	2003e788 	.word	0x2003e788
   d5934:	2003e784 	.word	0x2003e784
   d5938:	2003e780 	.word	0x2003e780

000d593c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d593c:	4b18      	ldr	r3, [pc, #96]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d593e:	681a      	ldr	r2, [r3, #0]
   d5940:	07d1      	lsls	r1, r2, #31
   d5942:	bf5c      	itt	pl
   d5944:	2201      	movpl	r2, #1
   d5946:	601a      	strpl	r2, [r3, #0]
   d5948:	4b16      	ldr	r3, [pc, #88]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	07d2      	lsls	r2, r2, #31
   d594e:	bf5c      	itt	pl
   d5950:	2201      	movpl	r2, #1
   d5952:	601a      	strpl	r2, [r3, #0]
   d5954:	4b14      	ldr	r3, [pc, #80]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5956:	681a      	ldr	r2, [r3, #0]
   d5958:	07d0      	lsls	r0, r2, #31
   d595a:	bf5c      	itt	pl
   d595c:	2201      	movpl	r2, #1
   d595e:	601a      	strpl	r2, [r3, #0]
   d5960:	4b12      	ldr	r3, [pc, #72]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5962:	681a      	ldr	r2, [r3, #0]
   d5964:	07d1      	lsls	r1, r2, #31
   d5966:	bf5c      	itt	pl
   d5968:	2201      	movpl	r2, #1
   d596a:	601a      	strpl	r2, [r3, #0]
   d596c:	4b10      	ldr	r3, [pc, #64]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d596e:	681a      	ldr	r2, [r3, #0]
   d5970:	07d2      	lsls	r2, r2, #31
   d5972:	bf5c      	itt	pl
   d5974:	2201      	movpl	r2, #1
   d5976:	601a      	strpl	r2, [r3, #0]
   d5978:	4b0e      	ldr	r3, [pc, #56]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d597a:	681a      	ldr	r2, [r3, #0]
   d597c:	07d0      	lsls	r0, r2, #31
   d597e:	bf5c      	itt	pl
   d5980:	2201      	movpl	r2, #1
   d5982:	601a      	strpl	r2, [r3, #0]
   d5984:	4b0c      	ldr	r3, [pc, #48]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5986:	681a      	ldr	r2, [r3, #0]
   d5988:	07d1      	lsls	r1, r2, #31
   d598a:	bf5c      	itt	pl
   d598c:	2201      	movpl	r2, #1
   d598e:	601a      	strpl	r2, [r3, #0]
   d5990:	4b0a      	ldr	r3, [pc, #40]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5992:	681a      	ldr	r2, [r3, #0]
   d5994:	07d2      	lsls	r2, r2, #31
   d5996:	bf5c      	itt	pl
   d5998:	2201      	movpl	r2, #1
   d599a:	601a      	strpl	r2, [r3, #0]
   d599c:	4770      	bx	lr
   d599e:	bf00      	nop
   d59a0:	2003e7bc 	.word	0x2003e7bc
   d59a4:	2003e7b8 	.word	0x2003e7b8
   d59a8:	2003e7b4 	.word	0x2003e7b4
   d59ac:	2003e7b0 	.word	0x2003e7b0
   d59b0:	2003e7ac 	.word	0x2003e7ac
   d59b4:	2003e7a8 	.word	0x2003e7a8
   d59b8:	2003e7a4 	.word	0x2003e7a4
   d59bc:	2003e7a0 	.word	0x2003e7a0

000d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d59c0:	4b24      	ldr	r3, [pc, #144]	; (d5a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d0      	lsls	r0, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b22      	ldr	r3, [pc, #136]	; (d5a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d1      	lsls	r1, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b20      	ldr	r3, [pc, #128]	; (d5a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d2      	lsls	r2, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b1e      	ldr	r3, [pc, #120]	; (d5a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d0      	lsls	r0, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b1c      	ldr	r3, [pc, #112]	; (d5a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d1      	lsls	r1, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b1a      	ldr	r3, [pc, #104]	; (d5a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d2      	lsls	r2, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4b18      	ldr	r3, [pc, #96]	; (d5a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	07d0      	lsls	r0, r2, #31
   d5a0e:	bf5c      	itt	pl
   d5a10:	2201      	movpl	r2, #1
   d5a12:	601a      	strpl	r2, [r3, #0]
   d5a14:	4b16      	ldr	r3, [pc, #88]	; (d5a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a16:	681a      	ldr	r2, [r3, #0]
   d5a18:	07d1      	lsls	r1, r2, #31
   d5a1a:	bf5c      	itt	pl
   d5a1c:	2201      	movpl	r2, #1
   d5a1e:	601a      	strpl	r2, [r3, #0]
   d5a20:	4b14      	ldr	r3, [pc, #80]	; (d5a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	07d2      	lsls	r2, r2, #31
   d5a26:	bf5c      	itt	pl
   d5a28:	2201      	movpl	r2, #1
   d5a2a:	601a      	strpl	r2, [r3, #0]
   d5a2c:	4b12      	ldr	r3, [pc, #72]	; (d5a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5a2e:	681a      	ldr	r2, [r3, #0]
   d5a30:	07d0      	lsls	r0, r2, #31
   d5a32:	bf5c      	itt	pl
   d5a34:	2201      	movpl	r2, #1
   d5a36:	601a      	strpl	r2, [r3, #0]
   d5a38:	4b10      	ldr	r3, [pc, #64]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d1      	lsls	r1, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b0e      	ldr	r3, [pc, #56]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d2      	lsls	r2, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4770      	bx	lr
   d5a52:	bf00      	nop
   d5a54:	2003e7ec 	.word	0x2003e7ec
   d5a58:	2003e7e8 	.word	0x2003e7e8
   d5a5c:	2003e7e4 	.word	0x2003e7e4
   d5a60:	2003e7e0 	.word	0x2003e7e0
   d5a64:	2003e7dc 	.word	0x2003e7dc
   d5a68:	2003e7d8 	.word	0x2003e7d8
   d5a6c:	2003e7d4 	.word	0x2003e7d4
   d5a70:	2003e7d0 	.word	0x2003e7d0
   d5a74:	2003e7cc 	.word	0x2003e7cc
   d5a78:	2003e7c8 	.word	0x2003e7c8
   d5a7c:	2003e7c4 	.word	0x2003e7c4
   d5a80:	2003e7c0 	.word	0x2003e7c0

000d5a84 <__aeabi_drsub>:
   d5a84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5a88:	e002      	b.n	d5a90 <__adddf3>
   d5a8a:	bf00      	nop

000d5a8c <__aeabi_dsub>:
   d5a8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5a90 <__adddf3>:
   d5a90:	b530      	push	{r4, r5, lr}
   d5a92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5a96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5a9a:	ea94 0f05 	teq	r4, r5
   d5a9e:	bf08      	it	eq
   d5aa0:	ea90 0f02 	teqeq	r0, r2
   d5aa4:	bf1f      	itttt	ne
   d5aa6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5aaa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5aae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5ab2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ab6:	f000 80e2 	beq.w	d5c7e <__adddf3+0x1ee>
   d5aba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5abe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5ac2:	bfb8      	it	lt
   d5ac4:	426d      	neglt	r5, r5
   d5ac6:	dd0c      	ble.n	d5ae2 <__adddf3+0x52>
   d5ac8:	442c      	add	r4, r5
   d5aca:	ea80 0202 	eor.w	r2, r0, r2
   d5ace:	ea81 0303 	eor.w	r3, r1, r3
   d5ad2:	ea82 0000 	eor.w	r0, r2, r0
   d5ad6:	ea83 0101 	eor.w	r1, r3, r1
   d5ada:	ea80 0202 	eor.w	r2, r0, r2
   d5ade:	ea81 0303 	eor.w	r3, r1, r3
   d5ae2:	2d36      	cmp	r5, #54	; 0x36
   d5ae4:	bf88      	it	hi
   d5ae6:	bd30      	pophi	{r4, r5, pc}
   d5ae8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5aec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5af0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5af4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5af8:	d002      	beq.n	d5b00 <__adddf3+0x70>
   d5afa:	4240      	negs	r0, r0
   d5afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5b08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5b0c:	d002      	beq.n	d5b14 <__adddf3+0x84>
   d5b0e:	4252      	negs	r2, r2
   d5b10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5b14:	ea94 0f05 	teq	r4, r5
   d5b18:	f000 80a7 	beq.w	d5c6a <__adddf3+0x1da>
   d5b1c:	f1a4 0401 	sub.w	r4, r4, #1
   d5b20:	f1d5 0e20 	rsbs	lr, r5, #32
   d5b24:	db0d      	blt.n	d5b42 <__adddf3+0xb2>
   d5b26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5b2a:	fa22 f205 	lsr.w	r2, r2, r5
   d5b2e:	1880      	adds	r0, r0, r2
   d5b30:	f141 0100 	adc.w	r1, r1, #0
   d5b34:	fa03 f20e 	lsl.w	r2, r3, lr
   d5b38:	1880      	adds	r0, r0, r2
   d5b3a:	fa43 f305 	asr.w	r3, r3, r5
   d5b3e:	4159      	adcs	r1, r3
   d5b40:	e00e      	b.n	d5b60 <__adddf3+0xd0>
   d5b42:	f1a5 0520 	sub.w	r5, r5, #32
   d5b46:	f10e 0e20 	add.w	lr, lr, #32
   d5b4a:	2a01      	cmp	r2, #1
   d5b4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5b50:	bf28      	it	cs
   d5b52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5b56:	fa43 f305 	asr.w	r3, r3, r5
   d5b5a:	18c0      	adds	r0, r0, r3
   d5b5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b64:	d507      	bpl.n	d5b76 <__adddf3+0xe6>
   d5b66:	f04f 0e00 	mov.w	lr, #0
   d5b6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d5b6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5b72:	eb6e 0101 	sbc.w	r1, lr, r1
   d5b76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5b7a:	d31b      	bcc.n	d5bb4 <__adddf3+0x124>
   d5b7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5b80:	d30c      	bcc.n	d5b9c <__adddf3+0x10c>
   d5b82:	0849      	lsrs	r1, r1, #1
   d5b84:	ea5f 0030 	movs.w	r0, r0, rrx
   d5b88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5b8c:	f104 0401 	add.w	r4, r4, #1
   d5b90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5b94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5b98:	f080 809a 	bcs.w	d5cd0 <__adddf3+0x240>
   d5b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ba0:	bf08      	it	eq
   d5ba2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ba6:	f150 0000 	adcs.w	r0, r0, #0
   d5baa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5bae:	ea41 0105 	orr.w	r1, r1, r5
   d5bb2:	bd30      	pop	{r4, r5, pc}
   d5bb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5bb8:	4140      	adcs	r0, r0
   d5bba:	eb41 0101 	adc.w	r1, r1, r1
   d5bbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5bc2:	f1a4 0401 	sub.w	r4, r4, #1
   d5bc6:	d1e9      	bne.n	d5b9c <__adddf3+0x10c>
   d5bc8:	f091 0f00 	teq	r1, #0
   d5bcc:	bf04      	itt	eq
   d5bce:	4601      	moveq	r1, r0
   d5bd0:	2000      	moveq	r0, #0
   d5bd2:	fab1 f381 	clz	r3, r1
   d5bd6:	bf08      	it	eq
   d5bd8:	3320      	addeq	r3, #32
   d5bda:	f1a3 030b 	sub.w	r3, r3, #11
   d5bde:	f1b3 0220 	subs.w	r2, r3, #32
   d5be2:	da0c      	bge.n	d5bfe <__adddf3+0x16e>
   d5be4:	320c      	adds	r2, #12
   d5be6:	dd08      	ble.n	d5bfa <__adddf3+0x16a>
   d5be8:	f102 0c14 	add.w	ip, r2, #20
   d5bec:	f1c2 020c 	rsb	r2, r2, #12
   d5bf0:	fa01 f00c 	lsl.w	r0, r1, ip
   d5bf4:	fa21 f102 	lsr.w	r1, r1, r2
   d5bf8:	e00c      	b.n	d5c14 <__adddf3+0x184>
   d5bfa:	f102 0214 	add.w	r2, r2, #20
   d5bfe:	bfd8      	it	le
   d5c00:	f1c2 0c20 	rsble	ip, r2, #32
   d5c04:	fa01 f102 	lsl.w	r1, r1, r2
   d5c08:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5c0c:	bfdc      	itt	le
   d5c0e:	ea41 010c 	orrle.w	r1, r1, ip
   d5c12:	4090      	lslle	r0, r2
   d5c14:	1ae4      	subs	r4, r4, r3
   d5c16:	bfa2      	ittt	ge
   d5c18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5c1c:	4329      	orrge	r1, r5
   d5c1e:	bd30      	popge	{r4, r5, pc}
   d5c20:	ea6f 0404 	mvn.w	r4, r4
   d5c24:	3c1f      	subs	r4, #31
   d5c26:	da1c      	bge.n	d5c62 <__adddf3+0x1d2>
   d5c28:	340c      	adds	r4, #12
   d5c2a:	dc0e      	bgt.n	d5c4a <__adddf3+0x1ba>
   d5c2c:	f104 0414 	add.w	r4, r4, #20
   d5c30:	f1c4 0220 	rsb	r2, r4, #32
   d5c34:	fa20 f004 	lsr.w	r0, r0, r4
   d5c38:	fa01 f302 	lsl.w	r3, r1, r2
   d5c3c:	ea40 0003 	orr.w	r0, r0, r3
   d5c40:	fa21 f304 	lsr.w	r3, r1, r4
   d5c44:	ea45 0103 	orr.w	r1, r5, r3
   d5c48:	bd30      	pop	{r4, r5, pc}
   d5c4a:	f1c4 040c 	rsb	r4, r4, #12
   d5c4e:	f1c4 0220 	rsb	r2, r4, #32
   d5c52:	fa20 f002 	lsr.w	r0, r0, r2
   d5c56:	fa01 f304 	lsl.w	r3, r1, r4
   d5c5a:	ea40 0003 	orr.w	r0, r0, r3
   d5c5e:	4629      	mov	r1, r5
   d5c60:	bd30      	pop	{r4, r5, pc}
   d5c62:	fa21 f004 	lsr.w	r0, r1, r4
   d5c66:	4629      	mov	r1, r5
   d5c68:	bd30      	pop	{r4, r5, pc}
   d5c6a:	f094 0f00 	teq	r4, #0
   d5c6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5c72:	bf06      	itte	eq
   d5c74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5c78:	3401      	addeq	r4, #1
   d5c7a:	3d01      	subne	r5, #1
   d5c7c:	e74e      	b.n	d5b1c <__adddf3+0x8c>
   d5c7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5c82:	bf18      	it	ne
   d5c84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c88:	d029      	beq.n	d5cde <__adddf3+0x24e>
   d5c8a:	ea94 0f05 	teq	r4, r5
   d5c8e:	bf08      	it	eq
   d5c90:	ea90 0f02 	teqeq	r0, r2
   d5c94:	d005      	beq.n	d5ca2 <__adddf3+0x212>
   d5c96:	ea54 0c00 	orrs.w	ip, r4, r0
   d5c9a:	bf04      	itt	eq
   d5c9c:	4619      	moveq	r1, r3
   d5c9e:	4610      	moveq	r0, r2
   d5ca0:	bd30      	pop	{r4, r5, pc}
   d5ca2:	ea91 0f03 	teq	r1, r3
   d5ca6:	bf1e      	ittt	ne
   d5ca8:	2100      	movne	r1, #0
   d5caa:	2000      	movne	r0, #0
   d5cac:	bd30      	popne	{r4, r5, pc}
   d5cae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5cb2:	d105      	bne.n	d5cc0 <__adddf3+0x230>
   d5cb4:	0040      	lsls	r0, r0, #1
   d5cb6:	4149      	adcs	r1, r1
   d5cb8:	bf28      	it	cs
   d5cba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5cbe:	bd30      	pop	{r4, r5, pc}
   d5cc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5cc4:	bf3c      	itt	cc
   d5cc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5cca:	bd30      	popcc	{r4, r5, pc}
   d5ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5cd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5cd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5cd8:	f04f 0000 	mov.w	r0, #0
   d5cdc:	bd30      	pop	{r4, r5, pc}
   d5cde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ce2:	bf1a      	itte	ne
   d5ce4:	4619      	movne	r1, r3
   d5ce6:	4610      	movne	r0, r2
   d5ce8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5cec:	bf1c      	itt	ne
   d5cee:	460b      	movne	r3, r1
   d5cf0:	4602      	movne	r2, r0
   d5cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5cf6:	bf06      	itte	eq
   d5cf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5cfc:	ea91 0f03 	teqeq	r1, r3
   d5d00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5d04:	bd30      	pop	{r4, r5, pc}
   d5d06:	bf00      	nop

000d5d08 <__aeabi_ui2d>:
   d5d08:	f090 0f00 	teq	r0, #0
   d5d0c:	bf04      	itt	eq
   d5d0e:	2100      	moveq	r1, #0
   d5d10:	4770      	bxeq	lr
   d5d12:	b530      	push	{r4, r5, lr}
   d5d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d1c:	f04f 0500 	mov.w	r5, #0
   d5d20:	f04f 0100 	mov.w	r1, #0
   d5d24:	e750      	b.n	d5bc8 <__adddf3+0x138>
   d5d26:	bf00      	nop

000d5d28 <__aeabi_i2d>:
   d5d28:	f090 0f00 	teq	r0, #0
   d5d2c:	bf04      	itt	eq
   d5d2e:	2100      	moveq	r1, #0
   d5d30:	4770      	bxeq	lr
   d5d32:	b530      	push	{r4, r5, lr}
   d5d34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5d38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5d3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5d40:	bf48      	it	mi
   d5d42:	4240      	negmi	r0, r0
   d5d44:	f04f 0100 	mov.w	r1, #0
   d5d48:	e73e      	b.n	d5bc8 <__adddf3+0x138>
   d5d4a:	bf00      	nop

000d5d4c <__aeabi_f2d>:
   d5d4c:	0042      	lsls	r2, r0, #1
   d5d4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5d52:	ea4f 0131 	mov.w	r1, r1, rrx
   d5d56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5d5a:	bf1f      	itttt	ne
   d5d5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5d60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5d64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5d68:	4770      	bxne	lr
   d5d6a:	f092 0f00 	teq	r2, #0
   d5d6e:	bf14      	ite	ne
   d5d70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5d74:	4770      	bxeq	lr
   d5d76:	b530      	push	{r4, r5, lr}
   d5d78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5d84:	e720      	b.n	d5bc8 <__adddf3+0x138>
   d5d86:	bf00      	nop

000d5d88 <__aeabi_ul2d>:
   d5d88:	ea50 0201 	orrs.w	r2, r0, r1
   d5d8c:	bf08      	it	eq
   d5d8e:	4770      	bxeq	lr
   d5d90:	b530      	push	{r4, r5, lr}
   d5d92:	f04f 0500 	mov.w	r5, #0
   d5d96:	e00a      	b.n	d5dae <__aeabi_l2d+0x16>

000d5d98 <__aeabi_l2d>:
   d5d98:	ea50 0201 	orrs.w	r2, r0, r1
   d5d9c:	bf08      	it	eq
   d5d9e:	4770      	bxeq	lr
   d5da0:	b530      	push	{r4, r5, lr}
   d5da2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5da6:	d502      	bpl.n	d5dae <__aeabi_l2d+0x16>
   d5da8:	4240      	negs	r0, r0
   d5daa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5dae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5db2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5db6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5dba:	f43f aedc 	beq.w	d5b76 <__adddf3+0xe6>
   d5dbe:	f04f 0203 	mov.w	r2, #3
   d5dc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5dc6:	bf18      	it	ne
   d5dc8:	3203      	addne	r2, #3
   d5dca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5dce:	bf18      	it	ne
   d5dd0:	3203      	addne	r2, #3
   d5dd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5dd6:	f1c2 0320 	rsb	r3, r2, #32
   d5dda:	fa00 fc03 	lsl.w	ip, r0, r3
   d5dde:	fa20 f002 	lsr.w	r0, r0, r2
   d5de2:	fa01 fe03 	lsl.w	lr, r1, r3
   d5de6:	ea40 000e 	orr.w	r0, r0, lr
   d5dea:	fa21 f102 	lsr.w	r1, r1, r2
   d5dee:	4414      	add	r4, r2
   d5df0:	e6c1      	b.n	d5b76 <__adddf3+0xe6>
   d5df2:	bf00      	nop

000d5df4 <__aeabi_dmul>:
   d5df4:	b570      	push	{r4, r5, r6, lr}
   d5df6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5dfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5dfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5e02:	bf1d      	ittte	ne
   d5e04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5e08:	ea94 0f0c 	teqne	r4, ip
   d5e0c:	ea95 0f0c 	teqne	r5, ip
   d5e10:	f000 f8de 	bleq	d5fd0 <__aeabi_dmul+0x1dc>
   d5e14:	442c      	add	r4, r5
   d5e16:	ea81 0603 	eor.w	r6, r1, r3
   d5e1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5e1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5e22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5e26:	bf18      	it	ne
   d5e28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5e2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5e34:	d038      	beq.n	d5ea8 <__aeabi_dmul+0xb4>
   d5e36:	fba0 ce02 	umull	ip, lr, r0, r2
   d5e3a:	f04f 0500 	mov.w	r5, #0
   d5e3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5e42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5e46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5e4a:	f04f 0600 	mov.w	r6, #0
   d5e4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5e52:	f09c 0f00 	teq	ip, #0
   d5e56:	bf18      	it	ne
   d5e58:	f04e 0e01 	orrne.w	lr, lr, #1
   d5e5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5e60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5e64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5e68:	d204      	bcs.n	d5e74 <__aeabi_dmul+0x80>
   d5e6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5e6e:	416d      	adcs	r5, r5
   d5e70:	eb46 0606 	adc.w	r6, r6, r6
   d5e74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5e78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5e7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5e80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5e84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5e88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e8c:	bf88      	it	hi
   d5e8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e92:	d81e      	bhi.n	d5ed2 <__aeabi_dmul+0xde>
   d5e94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5e98:	bf08      	it	eq
   d5e9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5e9e:	f150 0000 	adcs.w	r0, r0, #0
   d5ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}
   d5ea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5eac:	ea46 0101 	orr.w	r1, r6, r1
   d5eb0:	ea40 0002 	orr.w	r0, r0, r2
   d5eb4:	ea81 0103 	eor.w	r1, r1, r3
   d5eb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5ebc:	bfc2      	ittt	gt
   d5ebe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5ec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ec6:	bd70      	popgt	{r4, r5, r6, pc}
   d5ec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ecc:	f04f 0e00 	mov.w	lr, #0
   d5ed0:	3c01      	subs	r4, #1
   d5ed2:	f300 80ab 	bgt.w	d602c <__aeabi_dmul+0x238>
   d5ed6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5eda:	bfde      	ittt	le
   d5edc:	2000      	movle	r0, #0
   d5ede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5ee2:	bd70      	pople	{r4, r5, r6, pc}
   d5ee4:	f1c4 0400 	rsb	r4, r4, #0
   d5ee8:	3c20      	subs	r4, #32
   d5eea:	da35      	bge.n	d5f58 <__aeabi_dmul+0x164>
   d5eec:	340c      	adds	r4, #12
   d5eee:	dc1b      	bgt.n	d5f28 <__aeabi_dmul+0x134>
   d5ef0:	f104 0414 	add.w	r4, r4, #20
   d5ef4:	f1c4 0520 	rsb	r5, r4, #32
   d5ef8:	fa00 f305 	lsl.w	r3, r0, r5
   d5efc:	fa20 f004 	lsr.w	r0, r0, r4
   d5f00:	fa01 f205 	lsl.w	r2, r1, r5
   d5f04:	ea40 0002 	orr.w	r0, r0, r2
   d5f08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5f0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5f14:	fa21 f604 	lsr.w	r6, r1, r4
   d5f18:	eb42 0106 	adc.w	r1, r2, r6
   d5f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f20:	bf08      	it	eq
   d5f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f26:	bd70      	pop	{r4, r5, r6, pc}
   d5f28:	f1c4 040c 	rsb	r4, r4, #12
   d5f2c:	f1c4 0520 	rsb	r5, r4, #32
   d5f30:	fa00 f304 	lsl.w	r3, r0, r4
   d5f34:	fa20 f005 	lsr.w	r0, r0, r5
   d5f38:	fa01 f204 	lsl.w	r2, r1, r4
   d5f3c:	ea40 0002 	orr.w	r0, r0, r2
   d5f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5f48:	f141 0100 	adc.w	r1, r1, #0
   d5f4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f50:	bf08      	it	eq
   d5f52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f56:	bd70      	pop	{r4, r5, r6, pc}
   d5f58:	f1c4 0520 	rsb	r5, r4, #32
   d5f5c:	fa00 f205 	lsl.w	r2, r0, r5
   d5f60:	ea4e 0e02 	orr.w	lr, lr, r2
   d5f64:	fa20 f304 	lsr.w	r3, r0, r4
   d5f68:	fa01 f205 	lsl.w	r2, r1, r5
   d5f6c:	ea43 0302 	orr.w	r3, r3, r2
   d5f70:	fa21 f004 	lsr.w	r0, r1, r4
   d5f74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5f78:	fa21 f204 	lsr.w	r2, r1, r4
   d5f7c:	ea20 0002 	bic.w	r0, r0, r2
   d5f80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5f84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5f88:	bf08      	it	eq
   d5f8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5f8e:	bd70      	pop	{r4, r5, r6, pc}
   d5f90:	f094 0f00 	teq	r4, #0
   d5f94:	d10f      	bne.n	d5fb6 <__aeabi_dmul+0x1c2>
   d5f96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5f9a:	0040      	lsls	r0, r0, #1
   d5f9c:	eb41 0101 	adc.w	r1, r1, r1
   d5fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fa4:	bf08      	it	eq
   d5fa6:	3c01      	subeq	r4, #1
   d5fa8:	d0f7      	beq.n	d5f9a <__aeabi_dmul+0x1a6>
   d5faa:	ea41 0106 	orr.w	r1, r1, r6
   d5fae:	f095 0f00 	teq	r5, #0
   d5fb2:	bf18      	it	ne
   d5fb4:	4770      	bxne	lr
   d5fb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5fba:	0052      	lsls	r2, r2, #1
   d5fbc:	eb43 0303 	adc.w	r3, r3, r3
   d5fc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5fc4:	bf08      	it	eq
   d5fc6:	3d01      	subeq	r5, #1
   d5fc8:	d0f7      	beq.n	d5fba <__aeabi_dmul+0x1c6>
   d5fca:	ea43 0306 	orr.w	r3, r3, r6
   d5fce:	4770      	bx	lr
   d5fd0:	ea94 0f0c 	teq	r4, ip
   d5fd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5fd8:	bf18      	it	ne
   d5fda:	ea95 0f0c 	teqne	r5, ip
   d5fde:	d00c      	beq.n	d5ffa <__aeabi_dmul+0x206>
   d5fe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5fe4:	bf18      	it	ne
   d5fe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5fea:	d1d1      	bne.n	d5f90 <__aeabi_dmul+0x19c>
   d5fec:	ea81 0103 	eor.w	r1, r1, r3
   d5ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ff4:	f04f 0000 	mov.w	r0, #0
   d5ff8:	bd70      	pop	{r4, r5, r6, pc}
   d5ffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ffe:	bf06      	itte	eq
   d6000:	4610      	moveq	r0, r2
   d6002:	4619      	moveq	r1, r3
   d6004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6008:	d019      	beq.n	d603e <__aeabi_dmul+0x24a>
   d600a:	ea94 0f0c 	teq	r4, ip
   d600e:	d102      	bne.n	d6016 <__aeabi_dmul+0x222>
   d6010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6014:	d113      	bne.n	d603e <__aeabi_dmul+0x24a>
   d6016:	ea95 0f0c 	teq	r5, ip
   d601a:	d105      	bne.n	d6028 <__aeabi_dmul+0x234>
   d601c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6020:	bf1c      	itt	ne
   d6022:	4610      	movne	r0, r2
   d6024:	4619      	movne	r1, r3
   d6026:	d10a      	bne.n	d603e <__aeabi_dmul+0x24a>
   d6028:	ea81 0103 	eor.w	r1, r1, r3
   d602c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6038:	f04f 0000 	mov.w	r0, #0
   d603c:	bd70      	pop	{r4, r5, r6, pc}
   d603e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6046:	bd70      	pop	{r4, r5, r6, pc}

000d6048 <__aeabi_ddiv>:
   d6048:	b570      	push	{r4, r5, r6, lr}
   d604a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d604e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6056:	bf1d      	ittte	ne
   d6058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d605c:	ea94 0f0c 	teqne	r4, ip
   d6060:	ea95 0f0c 	teqne	r5, ip
   d6064:	f000 f8a7 	bleq	d61b6 <__aeabi_ddiv+0x16e>
   d6068:	eba4 0405 	sub.w	r4, r4, r5
   d606c:	ea81 0e03 	eor.w	lr, r1, r3
   d6070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6074:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6078:	f000 8088 	beq.w	d618c <__aeabi_ddiv+0x144>
   d607c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d608c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6098:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d609c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d60a0:	429d      	cmp	r5, r3
   d60a2:	bf08      	it	eq
   d60a4:	4296      	cmpeq	r6, r2
   d60a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d60aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d60ae:	d202      	bcs.n	d60b6 <__aeabi_ddiv+0x6e>
   d60b0:	085b      	lsrs	r3, r3, #1
   d60b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d60b6:	1ab6      	subs	r6, r6, r2
   d60b8:	eb65 0503 	sbc.w	r5, r5, r3
   d60bc:	085b      	lsrs	r3, r3, #1
   d60be:	ea4f 0232 	mov.w	r2, r2, rrx
   d60c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d60c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d60ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d60ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d60d2:	bf22      	ittt	cs
   d60d4:	1ab6      	subcs	r6, r6, r2
   d60d6:	4675      	movcs	r5, lr
   d60d8:	ea40 000c 	orrcs.w	r0, r0, ip
   d60dc:	085b      	lsrs	r3, r3, #1
   d60de:	ea4f 0232 	mov.w	r2, r2, rrx
   d60e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d60e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d60ea:	bf22      	ittt	cs
   d60ec:	1ab6      	subcs	r6, r6, r2
   d60ee:	4675      	movcs	r5, lr
   d60f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d60f4:	085b      	lsrs	r3, r3, #1
   d60f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d60fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d60fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6102:	bf22      	ittt	cs
   d6104:	1ab6      	subcs	r6, r6, r2
   d6106:	4675      	movcs	r5, lr
   d6108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d610c:	085b      	lsrs	r3, r3, #1
   d610e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6112:	ebb6 0e02 	subs.w	lr, r6, r2
   d6116:	eb75 0e03 	sbcs.w	lr, r5, r3
   d611a:	bf22      	ittt	cs
   d611c:	1ab6      	subcs	r6, r6, r2
   d611e:	4675      	movcs	r5, lr
   d6120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6124:	ea55 0e06 	orrs.w	lr, r5, r6
   d6128:	d018      	beq.n	d615c <__aeabi_ddiv+0x114>
   d612a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d612e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6132:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d613a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d613e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6146:	d1c0      	bne.n	d60ca <__aeabi_ddiv+0x82>
   d6148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d614c:	d10b      	bne.n	d6166 <__aeabi_ddiv+0x11e>
   d614e:	ea41 0100 	orr.w	r1, r1, r0
   d6152:	f04f 0000 	mov.w	r0, #0
   d6156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d615a:	e7b6      	b.n	d60ca <__aeabi_ddiv+0x82>
   d615c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6160:	bf04      	itt	eq
   d6162:	4301      	orreq	r1, r0
   d6164:	2000      	moveq	r0, #0
   d6166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d616a:	bf88      	it	hi
   d616c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6170:	f63f aeaf 	bhi.w	d5ed2 <__aeabi_dmul+0xde>
   d6174:	ebb5 0c03 	subs.w	ip, r5, r3
   d6178:	bf04      	itt	eq
   d617a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d617e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6182:	f150 0000 	adcs.w	r0, r0, #0
   d6186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d618a:	bd70      	pop	{r4, r5, r6, pc}
   d618c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6198:	bfc2      	ittt	gt
   d619a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d619e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61a2:	bd70      	popgt	{r4, r5, r6, pc}
   d61a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61a8:	f04f 0e00 	mov.w	lr, #0
   d61ac:	3c01      	subs	r4, #1
   d61ae:	e690      	b.n	d5ed2 <__aeabi_dmul+0xde>
   d61b0:	ea45 0e06 	orr.w	lr, r5, r6
   d61b4:	e68d      	b.n	d5ed2 <__aeabi_dmul+0xde>
   d61b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d61ba:	ea94 0f0c 	teq	r4, ip
   d61be:	bf08      	it	eq
   d61c0:	ea95 0f0c 	teqeq	r5, ip
   d61c4:	f43f af3b 	beq.w	d603e <__aeabi_dmul+0x24a>
   d61c8:	ea94 0f0c 	teq	r4, ip
   d61cc:	d10a      	bne.n	d61e4 <__aeabi_ddiv+0x19c>
   d61ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d61d2:	f47f af34 	bne.w	d603e <__aeabi_dmul+0x24a>
   d61d6:	ea95 0f0c 	teq	r5, ip
   d61da:	f47f af25 	bne.w	d6028 <__aeabi_dmul+0x234>
   d61de:	4610      	mov	r0, r2
   d61e0:	4619      	mov	r1, r3
   d61e2:	e72c      	b.n	d603e <__aeabi_dmul+0x24a>
   d61e4:	ea95 0f0c 	teq	r5, ip
   d61e8:	d106      	bne.n	d61f8 <__aeabi_ddiv+0x1b0>
   d61ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d61ee:	f43f aefd 	beq.w	d5fec <__aeabi_dmul+0x1f8>
   d61f2:	4610      	mov	r0, r2
   d61f4:	4619      	mov	r1, r3
   d61f6:	e722      	b.n	d603e <__aeabi_dmul+0x24a>
   d61f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d61fc:	bf18      	it	ne
   d61fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6202:	f47f aec5 	bne.w	d5f90 <__aeabi_dmul+0x19c>
   d6206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d620a:	f47f af0d 	bne.w	d6028 <__aeabi_dmul+0x234>
   d620e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6212:	f47f aeeb 	bne.w	d5fec <__aeabi_dmul+0x1f8>
   d6216:	e712      	b.n	d603e <__aeabi_dmul+0x24a>

000d6218 <__gedf2>:
   d6218:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d621c:	e006      	b.n	d622c <__cmpdf2+0x4>
   d621e:	bf00      	nop

000d6220 <__ledf2>:
   d6220:	f04f 0c01 	mov.w	ip, #1
   d6224:	e002      	b.n	d622c <__cmpdf2+0x4>
   d6226:	bf00      	nop

000d6228 <__cmpdf2>:
   d6228:	f04f 0c01 	mov.w	ip, #1
   d622c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6230:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6238:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d623c:	bf18      	it	ne
   d623e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6242:	d01b      	beq.n	d627c <__cmpdf2+0x54>
   d6244:	b001      	add	sp, #4
   d6246:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d624a:	bf0c      	ite	eq
   d624c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6250:	ea91 0f03 	teqne	r1, r3
   d6254:	bf02      	ittt	eq
   d6256:	ea90 0f02 	teqeq	r0, r2
   d625a:	2000      	moveq	r0, #0
   d625c:	4770      	bxeq	lr
   d625e:	f110 0f00 	cmn.w	r0, #0
   d6262:	ea91 0f03 	teq	r1, r3
   d6266:	bf58      	it	pl
   d6268:	4299      	cmppl	r1, r3
   d626a:	bf08      	it	eq
   d626c:	4290      	cmpeq	r0, r2
   d626e:	bf2c      	ite	cs
   d6270:	17d8      	asrcs	r0, r3, #31
   d6272:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6276:	f040 0001 	orr.w	r0, r0, #1
   d627a:	4770      	bx	lr
   d627c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6284:	d102      	bne.n	d628c <__cmpdf2+0x64>
   d6286:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d628a:	d107      	bne.n	d629c <__cmpdf2+0x74>
   d628c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6294:	d1d6      	bne.n	d6244 <__cmpdf2+0x1c>
   d6296:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d629a:	d0d3      	beq.n	d6244 <__cmpdf2+0x1c>
   d629c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d62a0:	4770      	bx	lr
   d62a2:	bf00      	nop

000d62a4 <__aeabi_cdrcmple>:
   d62a4:	4684      	mov	ip, r0
   d62a6:	4610      	mov	r0, r2
   d62a8:	4662      	mov	r2, ip
   d62aa:	468c      	mov	ip, r1
   d62ac:	4619      	mov	r1, r3
   d62ae:	4663      	mov	r3, ip
   d62b0:	e000      	b.n	d62b4 <__aeabi_cdcmpeq>
   d62b2:	bf00      	nop

000d62b4 <__aeabi_cdcmpeq>:
   d62b4:	b501      	push	{r0, lr}
   d62b6:	f7ff ffb7 	bl	d6228 <__cmpdf2>
   d62ba:	2800      	cmp	r0, #0
   d62bc:	bf48      	it	mi
   d62be:	f110 0f00 	cmnmi.w	r0, #0
   d62c2:	bd01      	pop	{r0, pc}

000d62c4 <__aeabi_dcmpeq>:
   d62c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d62c8:	f7ff fff4 	bl	d62b4 <__aeabi_cdcmpeq>
   d62cc:	bf0c      	ite	eq
   d62ce:	2001      	moveq	r0, #1
   d62d0:	2000      	movne	r0, #0
   d62d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d62d6:	bf00      	nop

000d62d8 <__aeabi_dcmplt>:
   d62d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d62dc:	f7ff ffea 	bl	d62b4 <__aeabi_cdcmpeq>
   d62e0:	bf34      	ite	cc
   d62e2:	2001      	movcc	r0, #1
   d62e4:	2000      	movcs	r0, #0
   d62e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d62ea:	bf00      	nop

000d62ec <__aeabi_dcmple>:
   d62ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d62f0:	f7ff ffe0 	bl	d62b4 <__aeabi_cdcmpeq>
   d62f4:	bf94      	ite	ls
   d62f6:	2001      	movls	r0, #1
   d62f8:	2000      	movhi	r0, #0
   d62fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d62fe:	bf00      	nop

000d6300 <__aeabi_dcmpge>:
   d6300:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6304:	f7ff ffce 	bl	d62a4 <__aeabi_cdrcmple>
   d6308:	bf94      	ite	ls
   d630a:	2001      	movls	r0, #1
   d630c:	2000      	movhi	r0, #0
   d630e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6312:	bf00      	nop

000d6314 <__aeabi_dcmpgt>:
   d6314:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6318:	f7ff ffc4 	bl	d62a4 <__aeabi_cdrcmple>
   d631c:	bf34      	ite	cc
   d631e:	2001      	movcc	r0, #1
   d6320:	2000      	movcs	r0, #0
   d6322:	f85d fb08 	ldr.w	pc, [sp], #8
   d6326:	bf00      	nop

000d6328 <__aeabi_d2uiz>:
   d6328:	004a      	lsls	r2, r1, #1
   d632a:	d211      	bcs.n	d6350 <__aeabi_d2uiz+0x28>
   d632c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6330:	d211      	bcs.n	d6356 <__aeabi_d2uiz+0x2e>
   d6332:	d50d      	bpl.n	d6350 <__aeabi_d2uiz+0x28>
   d6334:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6338:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d633c:	d40e      	bmi.n	d635c <__aeabi_d2uiz+0x34>
   d633e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6346:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d634a:	fa23 f002 	lsr.w	r0, r3, r2
   d634e:	4770      	bx	lr
   d6350:	f04f 0000 	mov.w	r0, #0
   d6354:	4770      	bx	lr
   d6356:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d635a:	d102      	bne.n	d6362 <__aeabi_d2uiz+0x3a>
   d635c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6360:	4770      	bx	lr
   d6362:	f04f 0000 	mov.w	r0, #0
   d6366:	4770      	bx	lr

000d6368 <__aeabi_d2f>:
   d6368:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d636c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6370:	bf24      	itt	cs
   d6372:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6376:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d637a:	d90d      	bls.n	d6398 <__aeabi_d2f+0x30>
   d637c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6380:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6384:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6388:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d638c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6390:	bf08      	it	eq
   d6392:	f020 0001 	biceq.w	r0, r0, #1
   d6396:	4770      	bx	lr
   d6398:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d639c:	d121      	bne.n	d63e2 <__aeabi_d2f+0x7a>
   d639e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d63a2:	bfbc      	itt	lt
   d63a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d63a8:	4770      	bxlt	lr
   d63aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d63b2:	f1c2 0218 	rsb	r2, r2, #24
   d63b6:	f1c2 0c20 	rsb	ip, r2, #32
   d63ba:	fa10 f30c 	lsls.w	r3, r0, ip
   d63be:	fa20 f002 	lsr.w	r0, r0, r2
   d63c2:	bf18      	it	ne
   d63c4:	f040 0001 	orrne.w	r0, r0, #1
   d63c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d63cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d63d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d63d4:	ea40 000c 	orr.w	r0, r0, ip
   d63d8:	fa23 f302 	lsr.w	r3, r3, r2
   d63dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d63e0:	e7cc      	b.n	d637c <__aeabi_d2f+0x14>
   d63e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d63e6:	d107      	bne.n	d63f8 <__aeabi_d2f+0x90>
   d63e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d63ec:	bf1e      	ittt	ne
   d63ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d63f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d63f6:	4770      	bxne	lr
   d63f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d63fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6404:	4770      	bx	lr
   d6406:	bf00      	nop

000d6408 <calloc>:
   d6408:	4b02      	ldr	r3, [pc, #8]	; (d6414 <calloc+0xc>)
   d640a:	460a      	mov	r2, r1
   d640c:	4601      	mov	r1, r0
   d640e:	6818      	ldr	r0, [r3, #0]
   d6410:	f000 b823 	b.w	d645a <_calloc_r>
   d6414:	2003e3a8 	.word	0x2003e3a8

000d6418 <__cxa_atexit>:
   d6418:	b510      	push	{r4, lr}
   d641a:	4c05      	ldr	r4, [pc, #20]	; (d6430 <__cxa_atexit+0x18>)
   d641c:	4613      	mov	r3, r2
   d641e:	b12c      	cbz	r4, d642c <__cxa_atexit+0x14>
   d6420:	460a      	mov	r2, r1
   d6422:	4601      	mov	r1, r0
   d6424:	2002      	movs	r0, #2
   d6426:	f3af 8000 	nop.w
   d642a:	bd10      	pop	{r4, pc}
   d642c:	4620      	mov	r0, r4
   d642e:	bd10      	pop	{r4, pc}
   d6430:	00000000 	.word	0x00000000

000d6434 <memcpy>:
   d6434:	b510      	push	{r4, lr}
   d6436:	1e43      	subs	r3, r0, #1
   d6438:	440a      	add	r2, r1
   d643a:	4291      	cmp	r1, r2
   d643c:	d004      	beq.n	d6448 <memcpy+0x14>
   d643e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6442:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6446:	e7f8      	b.n	d643a <memcpy+0x6>
   d6448:	bd10      	pop	{r4, pc}

000d644a <memset>:
   d644a:	4402      	add	r2, r0
   d644c:	4603      	mov	r3, r0
   d644e:	4293      	cmp	r3, r2
   d6450:	d002      	beq.n	d6458 <memset+0xe>
   d6452:	f803 1b01 	strb.w	r1, [r3], #1
   d6456:	e7fa      	b.n	d644e <memset+0x4>
   d6458:	4770      	bx	lr

000d645a <_calloc_r>:
   d645a:	b538      	push	{r3, r4, r5, lr}
   d645c:	fb02 f401 	mul.w	r4, r2, r1
   d6460:	4621      	mov	r1, r4
   d6462:	f7fe fbe1 	bl	d4c28 <_malloc_r>
   d6466:	4605      	mov	r5, r0
   d6468:	b118      	cbz	r0, d6472 <_calloc_r+0x18>
   d646a:	4622      	mov	r2, r4
   d646c:	2100      	movs	r1, #0
   d646e:	f7ff ffec 	bl	d644a <memset>
   d6472:	4628      	mov	r0, r5
   d6474:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6478 <srand>:
   d6478:	b538      	push	{r3, r4, r5, lr}
   d647a:	4b12      	ldr	r3, [pc, #72]	; (d64c4 <srand+0x4c>)
   d647c:	681c      	ldr	r4, [r3, #0]
   d647e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6480:	4605      	mov	r5, r0
   d6482:	b9d3      	cbnz	r3, d64ba <srand+0x42>
   d6484:	2018      	movs	r0, #24
   d6486:	f7fe fbbf 	bl	d4c08 <malloc>
   d648a:	f243 330e 	movw	r3, #13070	; 0x330e
   d648e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6490:	8003      	strh	r3, [r0, #0]
   d6492:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6496:	8043      	strh	r3, [r0, #2]
   d6498:	f241 2334 	movw	r3, #4660	; 0x1234
   d649c:	8083      	strh	r3, [r0, #4]
   d649e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d64a2:	80c3      	strh	r3, [r0, #6]
   d64a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d64a8:	8103      	strh	r3, [r0, #8]
   d64aa:	2305      	movs	r3, #5
   d64ac:	8143      	strh	r3, [r0, #10]
   d64ae:	230b      	movs	r3, #11
   d64b0:	8183      	strh	r3, [r0, #12]
   d64b2:	2201      	movs	r2, #1
   d64b4:	2300      	movs	r3, #0
   d64b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64bc:	2200      	movs	r2, #0
   d64be:	611d      	str	r5, [r3, #16]
   d64c0:	615a      	str	r2, [r3, #20]
   d64c2:	bd38      	pop	{r3, r4, r5, pc}
   d64c4:	2003e3a8 	.word	0x2003e3a8

000d64c8 <strlen>:
   d64c8:	4603      	mov	r3, r0
   d64ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d64ce:	2a00      	cmp	r2, #0
   d64d0:	d1fb      	bne.n	d64ca <strlen+0x2>
   d64d2:	1a18      	subs	r0, r3, r0
   d64d4:	3801      	subs	r0, #1
   d64d6:	4770      	bx	lr

000d64d8 <dynalib_user>:
   d64d8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d64e8:	0000 0000                                   ....

000d64ec <_ZL7TubeTab>:
   d64ec:	063f 4f5b 6d66 077d 6f7f 7c77 5e39 7179     ?.[Ofm}..ow|9^yq

000d64fc <_ZTVN5spark13EthernetClassE>:
	...
   d6504:	4ce9 000d 4cdf 000d 4cd5 000d 4ccb 000d     .L...L...L...L..
   d6514:	4cbf 000d 4cb3 000d 4ca7 000d 4c9f 000d     .L...L...L...L..
   d6524:	4c95 000d 4c8b 000d 5065 000d               .L...L..eP..

000d6530 <_ZTV7TwoWire>:
	...
   d6538:	4d09 000d 4d53 000d 4d2b 000d 4d0b 000d     .M..SM..+M...M..
   d6548:	4d33 000d 4d3b 000d 4d43 000d 4d4b 000d     3M..;M..CM..KM..

000d6558 <_ZTV9IPAddress>:
	...
   d6560:	4d9d 000d 4d8d 000d 4d8f 000d 6162 6475     .M...M...M..baud
   d6570:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6580:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6590:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d65a0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d65b0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d65c0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d65d0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d65e0:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d65f0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6600:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6610:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6620:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6630:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6640:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d6650 <_ZTVN5spark9MeshClassE>:
	...
   d6658:	4edf 000d 4ed5 000d 4ecb 000d 4ec1 000d     .N...N...N...N..
   d6668:	4eb5 000d 4ea9 000d 4e9d 000d 4e95 000d     .N...N...N...N..
   d6678:	4e8b 000d 4e81 000d 5065 000d               .N...N..eP..

000d6684 <_ZTVN5spark12NetworkClassE>:
	...
   d668c:	4ffd 000d 5007 000d 5011 000d 501b 000d     .O...P...P...P..
   d669c:	5025 000d 5031 000d 503d 000d 5049 000d     %P..1P..=P..IP..
   d66ac:	5051 000d 505b 000d 5065 000d               QP..[P..eP..

000d66b8 <_ZTV8SPIClass>:
	...
   d66c0:	5201 000d 5203 000d 005a 2b25 3330 3a64     .R...R..Z.%+03d:
   d66d0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d66e0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d66f0:	0000 0000                                   ....

000d66f4 <_ZTV11USARTSerial>:
	...
   d66fc:	5299 000d 52e9 000d 52f7 000d 5145 000d     .R...R...R..EQ..
   d670c:	52ad 000d 52cf 000d 52bb 000d 52e3 000d     .R...R...R...R..
   d671c:	529b 000d 529f 000d                         .R...R..

000d6724 <_ZTV9USBSerial>:
	...
   d672c:	53a1 000d 53f1 000d 53ff 000d 5145 000d     .S...S...S..EQ..
   d673c:	53dd 000d 53a3 000d 53b9 000d 53eb 000d     .S...S...S...S..
   d674c:	53cf 000d 539d 000d                         .S...S..

000d6754 <_ZTVN5spark9WiFiClassE>:
	...
   d675c:	5503 000d 54f9 000d 54ef 000d 54a5 000d     .U...T...T...T..
   d676c:	54e3 000d 54d7 000d 54cb 000d 54c3 000d     .T...T...T...T..
   d677c:	54b9 000d 54af 000d 5065 000d               .T...T..eP..

000d6788 <_ZSt7nothrow>:
   d6788:	0000 0000                                   ....

000d678c <__sf_fake_stdin>:
	...

000d67ac <__sf_fake_stdout>:
	...

000d67cc <__sf_fake_stderr>:
	...
   d67ec:	0043                                        C.

000d67ee <link_const_variable_data_end>:
	...

000d67f0 <link_constructors_location>:
   d67f0:	000d4279 	.word	0x000d4279
   d67f4:	000d4461 	.word	0x000d4461
   d67f8:	000d489d 	.word	0x000d489d
   d67fc:	000d4c51 	.word	0x000d4c51
   d6800:	000d4cf5 	.word	0x000d4cf5
   d6804:	000d4e71 	.word	0x000d4e71
   d6808:	000d4fad 	.word	0x000d4fad
   d680c:	000d5131 	.word	0x000d5131
   d6810:	000d51e5 	.word	0x000d51e5
   d6814:	000d5251 	.word	0x000d5251
   d6818:	000d5285 	.word	0x000d5285
   d681c:	000d550d 	.word	0x000d550d
   d6820:	000d57f5 	.word	0x000d57f5
   d6824:	000d58b9 	.word	0x000d58b9
   d6828:	000d593d 	.word	0x000d593d
   d682c:	000d59c1 	.word	0x000d59c1
