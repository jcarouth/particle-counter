
/Users/jcarouth/projects/personal/particle-counter/target/1.5.0/photon/particle-counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000016c4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a16e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a16e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000590  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a174c  080a174c  0002174c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1774  080a1774  00021774  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a20b7  00000000  00000000  00021778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ebc0  00000000  00000000  000c382f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010156  00000000  00000000  000d23ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bd8  00000000  00000000  000e2545  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002dc8  00000000  00000000  000e411d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025c1c  00000000  00000000  000e6ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022bac  00000000  00000000  0010cb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa5fa  00000000  00000000  0012f6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ad14  00000000  00000000  001d9ca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f997 	bl	80a1360 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f99c 	bl	80a1376 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a16e4 	.word	0x080a16e4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200005f8 	.word	0x200005f8
 80a0058:	200005f8 	.word	0x200005f8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ff03 	bl	80a0e68 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a16a8 	.word	0x080a16a8
 80a0084:	080a16dc 	.word	0x080a16dc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f823 	bl	80a00d8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bea9 	b.w	80a0dec <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bae1 	b.w	80a0660 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
#define DIO D3

TM1637 tm1637(CLK,DIO);

void setup()
{
 80a00b0:	b510      	push	{r4, lr}
  tm1637.init();
 80a00b2:	4c08      	ldr	r4, [pc, #32]	; (80a00d4 <setup+0x24>)
 80a00b4:	4620      	mov	r0, r4
 80a00b6:	f000 f939 	bl	80a032c <_ZN6TM16374initEv>
  tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;
 80a00ba:	4620      	mov	r0, r4
 80a00bc:	2102      	movs	r1, #2
 80a00be:	23c0      	movs	r3, #192	; 0xc0
 80a00c0:	2240      	movs	r2, #64	; 0x40
 80a00c2:	f000 f8da 	bl	80a027a <_ZN6TM16373setEhhh>
  tm1637.point(POINT_ON);
 80a00c6:	4620      	mov	r0, r4
}
 80a00c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void setup()
{
  tm1637.init();
  tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;
  tm1637.point(POINT_ON);
 80a00cc:	2101      	movs	r1, #1
 80a00ce:	f000 b8d9 	b.w	80a0284 <_ZN6TM16375pointEb>
 80a00d2:	bf00      	nop
 80a00d4:	2000006c 	.word	0x2000006c

080a00d8 <loop>:
}
void loop()
{
 80a00d8:	b530      	push	{r4, r5, lr}
  int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F
 80a00da:	4b22      	ldr	r3, [pc, #136]	; (80a0164 <loop+0x8c>)
  tm1637.init();
  tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;
  tm1637.point(POINT_ON);
}
void loop()
{
 80a00dc:	b087      	sub	sp, #28
  int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F
 80a00de:	ac02      	add	r4, sp, #8
 80a00e0:	f103 0510 	add.w	r5, r3, #16
 80a00e4:	4622      	mov	r2, r4
 80a00e6:	6818      	ldr	r0, [r3, #0]
 80a00e8:	6859      	ldr	r1, [r3, #4]
 80a00ea:	3308      	adds	r3, #8
 80a00ec:	c203      	stmia	r2!, {r0, r1}
 80a00ee:	42ab      	cmp	r3, r5
 80a00f0:	4614      	mov	r4, r2
 80a00f2:	d1f7      	bne.n	80a00e4 <loop+0xc>
  int8_t ListDisp[4];
  unsigned char i = 0;
  unsigned char count = 0;
  delay(150);
 80a00f4:	2096      	movs	r0, #150	; 0x96
 80a00f6:	f000 fabb 	bl	80a0670 <delay>
void loop()
{
  int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F
  int8_t ListDisp[4];
  unsigned char i = 0;
  unsigned char count = 0;
 80a00fa:	2300      	movs	r3, #0
  delay(150);

  while(1)
  {
    i = count;
    count ++;
 80a00fc:	1c5c      	adds	r4, r3, #1
 80a00fe:	b2e4      	uxtb	r4, r4
    if(count == sizeof(NumTab)) count = 0;
 80a0100:	2c10      	cmp	r4, #16
 80a0102:	bf08      	it	eq
 80a0104:	2400      	moveq	r4, #0
 80a0106:	2200      	movs	r2, #0
    for(unsigned char BitSelect = 0;BitSelect < 4;BitSelect ++)
    {
      ListDisp[BitSelect] = NumTab[i];
 80a0108:	a906      	add	r1, sp, #24
 80a010a:	4419      	add	r1, r3
 80a010c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      i ++;
 80a0110:	3301      	adds	r3, #1
 80a0112:	b2db      	uxtb	r3, r3
    i = count;
    count ++;
    if(count == sizeof(NumTab)) count = 0;
    for(unsigned char BitSelect = 0;BitSelect < 4;BitSelect ++)
    {
      ListDisp[BitSelect] = NumTab[i];
 80a0114:	a901      	add	r1, sp, #4
      i ++;
      if(i == sizeof(NumTab)) i = 0;
 80a0116:	2b10      	cmp	r3, #16
    i = count;
    count ++;
    if(count == sizeof(NumTab)) count = 0;
    for(unsigned char BitSelect = 0;BitSelect < 4;BitSelect ++)
    {
      ListDisp[BitSelect] = NumTab[i];
 80a0118:	5450      	strb	r0, [r2, r1]
 80a011a:	f102 0201 	add.w	r2, r2, #1
      i ++;
      if(i == sizeof(NumTab)) i = 0;
 80a011e:	bf08      	it	eq
 80a0120:	2300      	moveq	r3, #0
  while(1)
  {
    i = count;
    count ++;
    if(count == sizeof(NumTab)) count = 0;
    for(unsigned char BitSelect = 0;BitSelect < 4;BitSelect ++)
 80a0122:	2a04      	cmp	r2, #4
 80a0124:	d1f0      	bne.n	80a0108 <loop+0x30>
    {
      ListDisp[BitSelect] = NumTab[i];
      i ++;
      if(i == sizeof(NumTab)) i = 0;
    }
    tm1637.display(0,ListDisp[0]);
 80a0126:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 80a012a:	2100      	movs	r1, #0
 80a012c:	480e      	ldr	r0, [pc, #56]	; (80a0168 <loop+0x90>)
 80a012e:	f000 f8b9 	bl	80a02a4 <_ZN6TM16377displayEha>
    tm1637.display(1,ListDisp[1]);
 80a0132:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 80a0136:	2101      	movs	r1, #1
 80a0138:	480b      	ldr	r0, [pc, #44]	; (80a0168 <loop+0x90>)
 80a013a:	f000 f8b3 	bl	80a02a4 <_ZN6TM16377displayEha>
    tm1637.display(2,ListDisp[2]);
 80a013e:	f99d 2006 	ldrsb.w	r2, [sp, #6]
 80a0142:	2102      	movs	r1, #2
 80a0144:	4808      	ldr	r0, [pc, #32]	; (80a0168 <loop+0x90>)
 80a0146:	f000 f8ad 	bl	80a02a4 <_ZN6TM16377displayEha>
    tm1637.display(3,ListDisp[3]);
 80a014a:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 80a014e:	2103      	movs	r1, #3
 80a0150:	4805      	ldr	r0, [pc, #20]	; (80a0168 <loop+0x90>)
 80a0152:	f000 f8a7 	bl	80a02a4 <_ZN6TM16377displayEha>
    delay(1000);
 80a0156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a015a:	f000 fa89 	bl	80a0670 <delay>
  int8_t ListDisp[4];
  unsigned char i = 0;
  unsigned char count = 0;
  delay(150);

  while(1)
 80a015e:	4623      	mov	r3, r4
 80a0160:	e7cc      	b.n	80a00fc <loop+0x24>
 80a0162:	bf00      	nop
 80a0164:	080a13fc 	.word	0x080a13fc
 80a0168:	2000006c 	.word	0x2000006c

080a016c <_GLOBAL__sub_I_tm1637>:
    tm1637.display(1,ListDisp[1]);
    tm1637.display(2,ListDisp[2]);
    tm1637.display(3,ListDisp[3]);
    delay(1000);
  }
 80a016c:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a016e:	f000 f909 	bl	80a0384 <HAL_Pin_Map>
 80a0172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#include "Grove_4Digit_Display.h"
#define CLK D2//pins definitions for TM1637 and can be changed to other ports
#define DIO D3

TM1637 tm1637(CLK,DIO);
 80a0176:	2203      	movs	r2, #3
 80a0178:	2102      	movs	r1, #2
 80a017a:	4801      	ldr	r0, [pc, #4]	; (80a0180 <_GLOBAL__sub_I_tm1637+0x14>)
 80a017c:	f000 b802 	b.w	80a0184 <_ZN6TM1637C1Ehh>
 80a0180:	2000006c 	.word	0x2000006c

080a0184 <_ZN6TM1637C1Ehh>:
#include <Arduino.h>
static int8_t TubeTab[] = {0x3f,0x06,0x5b,0x4f,
                           0x66,0x6d,0x7d,0x07,
                           0x7f,0x6f,0x77,0x7c,
                           0x39,0x5e,0x79,0x71};//0~9,A,b,C,d,E,F
TM1637::TM1637(uint8_t Clk, uint8_t Data)
 80a0184:	b510      	push	{r4, lr}
 80a0186:	4604      	mov	r4, r0
 80a0188:	4608      	mov	r0, r1
{
  Clkpin = Clk;
 80a018a:	7121      	strb	r1, [r4, #4]
  Datapin = Data;
 80a018c:	7162      	strb	r2, [r4, #5]
  pinMode(Clkpin,OUTPUT);
 80a018e:	2101      	movs	r1, #1
 80a0190:	f000 feb8 	bl	80a0f04 <pinMode>
  pinMode(Datapin,OUTPUT);
 80a0194:	7960      	ldrb	r0, [r4, #5]
 80a0196:	2101      	movs	r1, #1
 80a0198:	f000 feb4 	bl	80a0f04 <pinMode>
}
 80a019c:	4620      	mov	r0, r4
 80a019e:	bd10      	pop	{r4, pc}

080a01a0 <_ZN6TM16379writeByteEa>:
{
  clearDisplay();
}

int TM1637::writeByte(int8_t wr_data)
{
 80a01a0:	b570      	push	{r4, r5, r6, lr}
 80a01a2:	4604      	mov	r4, r0
 80a01a4:	460e      	mov	r6, r1
 80a01a6:	2508      	movs	r5, #8
  uint8_t i,count1;
  for(i=0;i<8;i++)        //sent 8bit data
  {
    digitalWrite(Clkpin,LOW);
 80a01a8:	2100      	movs	r1, #0
 80a01aa:	7920      	ldrb	r0, [r4, #4]
 80a01ac:	f000 febb 	bl	80a0f26 <digitalWrite>
    if(wr_data & 0x01)digitalWrite(Datapin,HIGH);//LSB first
 80a01b0:	f016 0101 	ands.w	r1, r6, #1
 80a01b4:	bf18      	it	ne
 80a01b6:	2101      	movne	r1, #1
 80a01b8:	7960      	ldrb	r0, [r4, #5]
    else digitalWrite(Datapin,LOW);
 80a01ba:	f000 feb4 	bl	80a0f26 <digitalWrite>
 80a01be:	3d01      	subs	r5, #1
    wr_data >>= 1;
    digitalWrite(Clkpin,HIGH);
 80a01c0:	2101      	movs	r1, #1
 80a01c2:	7920      	ldrb	r0, [r4, #4]
 80a01c4:	f000 feaf 	bl	80a0f26 <digitalWrite>
}

int TM1637::writeByte(int8_t wr_data)
{
  uint8_t i,count1;
  for(i=0;i<8;i++)        //sent 8bit data
 80a01c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    digitalWrite(Clkpin,LOW);
    if(wr_data & 0x01)digitalWrite(Datapin,HIGH);//LSB first
    else digitalWrite(Datapin,LOW);
    wr_data >>= 1;
 80a01cc:	ea4f 0666 	mov.w	r6, r6, asr #1
}

int TM1637::writeByte(int8_t wr_data)
{
  uint8_t i,count1;
  for(i=0;i<8;i++)        //sent 8bit data
 80a01d0:	d1ea      	bne.n	80a01a8 <_ZN6TM16379writeByteEa+0x8>
    else digitalWrite(Datapin,LOW);
    wr_data >>= 1;
    digitalWrite(Clkpin,HIGH);

  }
  digitalWrite(Clkpin,LOW); //wait for the ACK
 80a01d2:	4629      	mov	r1, r5
 80a01d4:	7920      	ldrb	r0, [r4, #4]
 80a01d6:	f000 fea6 	bl	80a0f26 <digitalWrite>
  digitalWrite(Datapin,HIGH);
 80a01da:	2101      	movs	r1, #1
 80a01dc:	7960      	ldrb	r0, [r4, #5]
 80a01de:	f000 fea2 	bl	80a0f26 <digitalWrite>
  digitalWrite(Clkpin,HIGH);
 80a01e2:	2101      	movs	r1, #1
 80a01e4:	7920      	ldrb	r0, [r4, #4]
 80a01e6:	f000 fe9e 	bl	80a0f26 <digitalWrite>
  pinMode(Datapin,INPUT);
 80a01ea:	4629      	mov	r1, r5
 80a01ec:	7960      	ldrb	r0, [r4, #5]
 80a01ee:	f000 fe89 	bl	80a0f04 <pinMode>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a01f2:	2032      	movs	r0, #50	; 0x32
 80a01f4:	f000 f8b6 	bl	80a0364 <HAL_Delay_Microseconds>

  bitDelay();
  uint8_t ack = digitalRead(Datapin);
 80a01f8:	7960      	ldrb	r0, [r4, #5]
 80a01fa:	f000 fead 	bl	80a0f58 <digitalRead>
  if (ack == 0) 
 80a01fe:	b2c6      	uxtb	r6, r0
 80a0200:	b93e      	cbnz	r6, 80a0212 <_ZN6TM16379writeByteEa+0x72>
  {
     pinMode(Datapin,OUTPUT);
 80a0202:	2101      	movs	r1, #1
 80a0204:	7960      	ldrb	r0, [r4, #5]
 80a0206:	f000 fe7d 	bl	80a0f04 <pinMode>
     digitalWrite(Datapin,LOW);
 80a020a:	4629      	mov	r1, r5
 80a020c:	7960      	ldrb	r0, [r4, #5]
 80a020e:	f000 fe8a 	bl	80a0f26 <digitalWrite>
 80a0212:	2032      	movs	r0, #50	; 0x32
 80a0214:	f000 f8a6 	bl	80a0364 <HAL_Delay_Microseconds>
  }
  bitDelay();
  pinMode(Datapin,OUTPUT);
 80a0218:	2101      	movs	r1, #1
 80a021a:	7960      	ldrb	r0, [r4, #5]
 80a021c:	f000 fe72 	bl	80a0f04 <pinMode>
 80a0220:	2032      	movs	r0, #50	; 0x32
 80a0222:	f000 f89f 	bl	80a0364 <HAL_Delay_Microseconds>
  bitDelay();
  
  return ack;
}
 80a0226:	4630      	mov	r0, r6
 80a0228:	bd70      	pop	{r4, r5, r6, pc}

080a022a <_ZN6TM16375startEv>:
//send start signal to TM1637
void TM1637::start(void)
{
 80a022a:	b510      	push	{r4, lr}
 80a022c:	4604      	mov	r4, r0
  digitalWrite(Clkpin,HIGH);//send start signal to TM1637
 80a022e:	2101      	movs	r1, #1
 80a0230:	7900      	ldrb	r0, [r0, #4]
 80a0232:	f000 fe78 	bl	80a0f26 <digitalWrite>
  digitalWrite(Datapin,HIGH);
 80a0236:	7960      	ldrb	r0, [r4, #5]
 80a0238:	2101      	movs	r1, #1
 80a023a:	f000 fe74 	bl	80a0f26 <digitalWrite>
  digitalWrite(Datapin,LOW);
 80a023e:	7960      	ldrb	r0, [r4, #5]
 80a0240:	2100      	movs	r1, #0
 80a0242:	f000 fe70 	bl	80a0f26 <digitalWrite>
  digitalWrite(Clkpin,LOW);
 80a0246:	7920      	ldrb	r0, [r4, #4]
 80a0248:	2100      	movs	r1, #0
}
 80a024a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void TM1637::start(void)
{
  digitalWrite(Clkpin,HIGH);//send start signal to TM1637
  digitalWrite(Datapin,HIGH);
  digitalWrite(Datapin,LOW);
  digitalWrite(Clkpin,LOW);
 80a024e:	f000 be6a 	b.w	80a0f26 <digitalWrite>

080a0252 <_ZN6TM16374stopEv>:
}
//End of transmission
void TM1637::stop(void)
{
 80a0252:	b510      	push	{r4, lr}
 80a0254:	4604      	mov	r4, r0
  digitalWrite(Clkpin,LOW);
 80a0256:	2100      	movs	r1, #0
 80a0258:	7900      	ldrb	r0, [r0, #4]
 80a025a:	f000 fe64 	bl	80a0f26 <digitalWrite>
  digitalWrite(Datapin,LOW);
 80a025e:	7960      	ldrb	r0, [r4, #5]
 80a0260:	2100      	movs	r1, #0
 80a0262:	f000 fe60 	bl	80a0f26 <digitalWrite>
  digitalWrite(Clkpin,HIGH);
 80a0266:	7920      	ldrb	r0, [r4, #4]
 80a0268:	2101      	movs	r1, #1
 80a026a:	f000 fe5c 	bl	80a0f26 <digitalWrite>
  digitalWrite(Datapin,HIGH);
 80a026e:	7960      	ldrb	r0, [r4, #5]
 80a0270:	2101      	movs	r1, #1
}
 80a0272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void TM1637::stop(void)
{
  digitalWrite(Clkpin,LOW);
  digitalWrite(Datapin,LOW);
  digitalWrite(Clkpin,HIGH);
  digitalWrite(Datapin,HIGH);
 80a0276:	f000 be56 	b.w	80a0f26 <digitalWrite>

080a027a <_ZN6TM16373setEhhh>:
//To take effect the next time it displays.
void TM1637::set(uint8_t brightness,uint8_t SetData,uint8_t SetAddr)
{
  Cmd_SetData = SetData;
  Cmd_SetAddr = SetAddr;
  Cmd_DispCtrl = 0x88 + brightness;//Set the brightness and it takes effect the next time it displays.
 80a027a:	3978      	subs	r1, #120	; 0x78
  display(0x03,0x7f);
}
//To take effect the next time it displays.
void TM1637::set(uint8_t brightness,uint8_t SetData,uint8_t SetAddr)
{
  Cmd_SetData = SetData;
 80a027c:	7002      	strb	r2, [r0, #0]
  Cmd_SetAddr = SetAddr;
 80a027e:	7043      	strb	r3, [r0, #1]
  Cmd_DispCtrl = 0x88 + brightness;//Set the brightness and it takes effect the next time it displays.
 80a0280:	7081      	strb	r1, [r0, #2]
 80a0282:	4770      	bx	lr

080a0284 <_ZN6TM16375pointEb>:

//Whether to light the clock point ":".
//To take effect the next time it displays.
void TM1637::point(boolean PointFlag)
{
  _PointFlag = PointFlag;
 80a0284:	70c1      	strb	r1, [r0, #3]
 80a0286:	4770      	bx	lr

080a0288 <_ZN6TM16376codingEa>:
  }
}
int8_t TM1637::coding(int8_t DispData)
{
  uint8_t PointData;
  if(_PointFlag == POINT_ON)PointData = 0x80;
 80a0288:	78c3      	ldrb	r3, [r0, #3]
 80a028a:	2b00      	cmp	r3, #0
  else PointData = 0;
 80a028c:	bf14      	ite	ne
 80a028e:	2080      	movne	r0, #128	; 0x80
 80a0290:	2000      	moveq	r0, #0
  if(DispData == 0x7f) DispData = 0x00 + PointData;//The bit digital tube off
 80a0292:	297f      	cmp	r1, #127	; 0x7f
  else DispData = TubeTab[DispData] + PointData;
 80a0294:	bf1e      	ittt	ne
 80a0296:	4b02      	ldrne	r3, [pc, #8]	; (80a02a0 <_ZN6TM16376codingEa+0x18>)
 80a0298:	5c5b      	ldrbne	r3, [r3, r1]
 80a029a:	18c0      	addne	r0, r0, r3
 80a029c:	b240      	sxtb	r0, r0
  return DispData;
}
 80a029e:	4770      	bx	lr
 80a02a0:	080a140c 	.word	0x080a140c

080a02a4 <_ZN6TM16377displayEha>:
  writeByte(Cmd_DispCtrl);//
  stop();           //
}
//******************************************
void TM1637::display(uint8_t BitAddr,int8_t DispData)
{
 80a02a4:	b570      	push	{r4, r5, r6, lr}
 80a02a6:	460e      	mov	r6, r1
  int8_t SegData;
  SegData = coding(DispData);
 80a02a8:	4611      	mov	r1, r2
  writeByte(Cmd_DispCtrl);//
  stop();           //
}
//******************************************
void TM1637::display(uint8_t BitAddr,int8_t DispData)
{
 80a02aa:	4604      	mov	r4, r0
  int8_t SegData;
  SegData = coding(DispData);
 80a02ac:	f7ff ffec 	bl	80a0288 <_ZN6TM16376codingEa>
 80a02b0:	4605      	mov	r5, r0
  start();          //start signal sent to TM1637 from MCU
 80a02b2:	4620      	mov	r0, r4
 80a02b4:	f7ff ffb9 	bl	80a022a <_ZN6TM16375startEv>
  writeByte(ADDR_FIXED);//
 80a02b8:	2144      	movs	r1, #68	; 0x44
 80a02ba:	4620      	mov	r0, r4
 80a02bc:	f7ff ff70 	bl	80a01a0 <_ZN6TM16379writeByteEa>
  stop();           //
 80a02c0:	4620      	mov	r0, r4
 80a02c2:	f7ff ffc6 	bl	80a0252 <_ZN6TM16374stopEv>
  start();          //
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	f7ff ffaf 	bl	80a022a <_ZN6TM16375startEv>
  writeByte(BitAddr|0xc0);//
 80a02cc:	f066 013f 	orn	r1, r6, #63	; 0x3f
 80a02d0:	4620      	mov	r0, r4
 80a02d2:	f7ff ff65 	bl	80a01a0 <_ZN6TM16379writeByteEa>
  writeByte(SegData);//
 80a02d6:	4629      	mov	r1, r5
 80a02d8:	4620      	mov	r0, r4
 80a02da:	f7ff ff61 	bl	80a01a0 <_ZN6TM16379writeByteEa>
  stop();            //
 80a02de:	4620      	mov	r0, r4
 80a02e0:	f7ff ffb7 	bl	80a0252 <_ZN6TM16374stopEv>
  start();          //
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	f7ff ffa0 	bl	80a022a <_ZN6TM16375startEv>
  writeByte(Cmd_DispCtrl);//
 80a02ea:	f994 1002 	ldrsb.w	r1, [r4, #2]
 80a02ee:	4620      	mov	r0, r4
 80a02f0:	f7ff ff56 	bl	80a01a0 <_ZN6TM16379writeByteEa>
  stop();           //
 80a02f4:	4620      	mov	r0, r4
}
 80a02f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeByte(BitAddr|0xc0);//
  writeByte(SegData);//
  stop();            //
  start();          //
  writeByte(Cmd_DispCtrl);//
  stop();           //
 80a02fa:	f7ff bfaa 	b.w	80a0252 <_ZN6TM16374stopEv>

080a02fe <_ZN6TM163712clearDisplayEv>:
}

void TM1637::clearDisplay(void)
{
 80a02fe:	b510      	push	{r4, lr}
 80a0300:	4604      	mov	r4, r0
  display(0x00,0x7f);
 80a0302:	227f      	movs	r2, #127	; 0x7f
 80a0304:	2100      	movs	r1, #0
 80a0306:	f7ff ffcd 	bl	80a02a4 <_ZN6TM16377displayEha>
  display(0x01,0x7f);
 80a030a:	4620      	mov	r0, r4
 80a030c:	227f      	movs	r2, #127	; 0x7f
 80a030e:	2101      	movs	r1, #1
 80a0310:	f7ff ffc8 	bl	80a02a4 <_ZN6TM16377displayEha>
  display(0x02,0x7f);
 80a0314:	4620      	mov	r0, r4
 80a0316:	227f      	movs	r2, #127	; 0x7f
 80a0318:	2102      	movs	r1, #2
 80a031a:	f7ff ffc3 	bl	80a02a4 <_ZN6TM16377displayEha>
  display(0x03,0x7f);
 80a031e:	4620      	mov	r0, r4
}
 80a0320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void TM1637::clearDisplay(void)
{
  display(0x00,0x7f);
  display(0x01,0x7f);
  display(0x02,0x7f);
  display(0x03,0x7f);
 80a0324:	227f      	movs	r2, #127	; 0x7f
 80a0326:	2103      	movs	r1, #3
 80a0328:	f7ff bfbc 	b.w	80a02a4 <_ZN6TM16377displayEha>

080a032c <_ZN6TM16374initEv>:
  pinMode(Datapin,OUTPUT);
}

void TM1637::init(void)
{
  clearDisplay();
 80a032c:	f7ff bfe7 	b.w	80a02fe <_ZN6TM163712clearDisplayEv>

080a0330 <_GLOBAL__sub_I__ZN6TM1637C2Ehh>:
 80a0330:	f000 b828 	b.w	80a0384 <HAL_Pin_Map>

080a0334 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <os_mutex_recursive_create+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601d0 	.word	0x080601d0

080a0344 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <os_mutex_recursive_destroy+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601d0 	.word	0x080601d0

080a0354 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_RNG_GetRandomNumber+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	685b      	ldr	r3, [r3, #4]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	0806019c 	.word	0x0806019c

080a0364 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_Delay_Microseconds+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	68db      	ldr	r3, [r3, #12]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	0806019c 	.word	0x0806019c

080a0374 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	695b      	ldr	r3, [r3, #20]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	0806019c 	.word	0x0806019c

080a0384 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_Pin_Map+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	681b      	ldr	r3, [r3, #0]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601b0 	.word	0x080601b0

080a0394 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_Pin_Mode+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	689b      	ldr	r3, [r3, #8]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601b0 	.word	0x080601b0

080a03a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_Get_Pin_Mode+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	68db      	ldr	r3, [r3, #12]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601b0 	.word	0x080601b0

080a03b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_GPIO_Write+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	691b      	ldr	r3, [r3, #16]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601b0 	.word	0x080601b0

080a03c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_GPIO_Read+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	695b      	ldr	r3, [r3, #20]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601b0 	.word	0x080601b0

080a03d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_I2C_Write_Data+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601ac 	.word	0x080601ac

080a03e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_I2C_Available_Data+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601ac 	.word	0x080601ac

080a03f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_I2C_Read_Data+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601ac 	.word	0x080601ac

080a0404 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_I2C_Peek_Data+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601ac 	.word	0x080601ac

080a0414 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_I2C_Flush_Data+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601ac 	.word	0x080601ac

080a0424 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_I2C_Is_Enabled+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601ac 	.word	0x080601ac

080a0434 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b03      	ldr	r3, [pc, #12]	; (80a0444 <HAL_I2C_Init+0x10>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a043e:	9301      	str	r3, [sp, #4]
 80a0440:	bd08      	pop	{r3, pc}
 80a0442:	0000      	.short	0x0000
 80a0444:	080601ac 	.word	0x080601ac

080a0448 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <HAL_SPI_Init+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	69db      	ldr	r3, [r3, #28]
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601b4 	.word	0x080601b4

080a0458 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <HAL_SPI_Is_Enabled+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	6a1b      	ldr	r3, [r3, #32]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601b4 	.word	0x080601b4

080a0468 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <HAL_USART_Init+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	699b      	ldr	r3, [r3, #24]
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601c4 	.word	0x080601c4

080a0478 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <HAL_USART_Write_Data+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601c4 	.word	0x080601c4

080a0488 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <HAL_USART_Available_Data+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c4 	.word	0x080601c4

080a0498 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <HAL_USART_Read_Data+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601c4 	.word	0x080601c4

080a04a8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <HAL_USART_Peek_Data+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601c4 	.word	0x080601c4

080a04b8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <HAL_USART_Flush_Data+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601c4 	.word	0x080601c4

080a04c8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <HAL_USART_Is_Enabled+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c4 	.word	0x080601c4

080a04d8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601c4 	.word	0x080601c4

080a04e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <HAL_USB_USART_Init+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	681b      	ldr	r3, [r3, #0]
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601d8 	.word	0x080601d8

080a04f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <HAL_USB_USART_Available_Data+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	691b      	ldr	r3, [r3, #16]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601d8 	.word	0x080601d8

080a0508 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	695b      	ldr	r3, [r3, #20]
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601d8 	.word	0x080601d8

080a0518 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <HAL_USB_USART_Receive_Data+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	699b      	ldr	r3, [r3, #24]
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601d8 	.word	0x080601d8

080a0528 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <HAL_USB_USART_Send_Data+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	69db      	ldr	r3, [r3, #28]
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601d8 	.word	0x080601d8

080a0538 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <HAL_USB_USART_Flush_Data+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6a1b      	ldr	r3, [r3, #32]
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601d8 	.word	0x080601d8

080a0548 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <inet_gethostbyname+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601c0 	.word	0x080601c0

080a0558 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <set_system_mode+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	685b      	ldr	r3, [r3, #4]
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601a4 	.word	0x080601a4

080a0568 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <system_delay_ms+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	695b      	ldr	r3, [r3, #20]
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601a4 	.word	0x080601a4

080a0578 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b03      	ldr	r3, [pc, #12]	; (80a0588 <system_ctrl_set_app_request_handler+0x10>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0582:	9301      	str	r3, [sp, #4]
 80a0584:	bd08      	pop	{r3, pc}
 80a0586:	0000      	.short	0x0000
 80a0588:	080601a4 	.word	0x080601a4

080a058c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b03      	ldr	r3, [pc, #12]	; (80a059c <system_ctrl_set_result+0x10>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0596:	9301      	str	r3, [sp, #4]
 80a0598:	bd08      	pop	{r3, pc}
 80a059a:	0000      	.short	0x0000
 80a059c:	080601a4 	.word	0x080601a4

080a05a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <spark_set_random_seed_from_cloud_handler+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601cc 	.word	0x080601cc

080a05b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <network_connect+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	685b      	ldr	r3, [r3, #4]
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601c8 	.word	0x080601c8

080a05c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <network_connecting+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	689b      	ldr	r3, [r3, #8]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601c8 	.word	0x080601c8

080a05d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <network_disconnect+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	68db      	ldr	r3, [r3, #12]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601c8 	.word	0x080601c8

080a05e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <network_ready+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	691b      	ldr	r3, [r3, #16]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601c8 	.word	0x080601c8

080a05f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <network_on+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	695b      	ldr	r3, [r3, #20]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601c8 	.word	0x080601c8

080a0600 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <network_off+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	699b      	ldr	r3, [r3, #24]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601c8 	.word	0x080601c8

080a0610 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <network_listen+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	69db      	ldr	r3, [r3, #28]
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601c8 	.word	0x080601c8

080a0620 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <network_listening+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	6a1b      	ldr	r3, [r3, #32]
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601c8 	.word	0x080601c8

080a0630 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <network_set_listen_timeout+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601c8 	.word	0x080601c8

080a0640 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <network_get_listen_timeout+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601c8 	.word	0x080601c8

080a0650 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <malloc+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	681b      	ldr	r3, [r3, #0]
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601a0 	.word	0x080601a0

080a0660 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <free+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	685b      	ldr	r3, [r3, #4]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601a0 	.word	0x080601a0

080a0670 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0670:	2100      	movs	r1, #0
 80a0672:	f7ff bf79 	b.w	80a0568 <system_delay_ms>

080a0676 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0676:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0678:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a067a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a067c:	b113      	cbz	r3, 80a0684 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a067e:	2203      	movs	r2, #3
 80a0680:	4601      	mov	r1, r0
 80a0682:	4798      	blx	r3
    }
 80a0684:	4620      	mov	r0, r4
 80a0686:	bd10      	pop	{r4, pc}

080a0688 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0688:	4770      	bx	lr

080a068a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a068a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a068c:	4606      	mov	r6, r0
 80a068e:	4615      	mov	r5, r2
 80a0690:	460c      	mov	r4, r1
 80a0692:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0694:	42bc      	cmp	r4, r7
 80a0696:	d006      	beq.n	80a06a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0698:	6833      	ldr	r3, [r6, #0]
 80a069a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a069e:	689b      	ldr	r3, [r3, #8]
 80a06a0:	4630      	mov	r0, r6
 80a06a2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a06a4:	e7f6      	b.n	80a0694 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a06a6:	4628      	mov	r0, r5
 80a06a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06aa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a06aa:	2200      	movs	r2, #0
 80a06ac:	7c00      	ldrb	r0, [r0, #16]
 80a06ae:	f7ff be91 	b.w	80a03d4 <HAL_I2C_Write_Data>

080a06b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a06b2:	2100      	movs	r1, #0
 80a06b4:	7c00      	ldrb	r0, [r0, #16]
 80a06b6:	f7ff be95 	b.w	80a03e4 <HAL_I2C_Available_Data>

080a06ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a06ba:	2100      	movs	r1, #0
 80a06bc:	7c00      	ldrb	r0, [r0, #16]
 80a06be:	f7ff be99 	b.w	80a03f4 <HAL_I2C_Read_Data>

080a06c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a06c2:	2100      	movs	r1, #0
 80a06c4:	7c00      	ldrb	r0, [r0, #16]
 80a06c6:	f7ff be9d 	b.w	80a0404 <HAL_I2C_Peek_Data>

080a06ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a06ca:	2100      	movs	r1, #0
 80a06cc:	7c00      	ldrb	r0, [r0, #16]
 80a06ce:	f7ff bea1 	b.w	80a0414 <HAL_I2C_Flush_Data>

080a06d2 <_ZN7TwoWireD0Ev>:
 80a06d2:	b510      	push	{r4, lr}
 80a06d4:	4604      	mov	r4, r0
 80a06d6:	2114      	movs	r1, #20
 80a06d8:	f000 fccf 	bl	80a107a <_ZdlPvj>
 80a06dc:	4620      	mov	r0, r4
 80a06de:	bd10      	pop	{r4, pc}

080a06e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a06e0:	b510      	push	{r4, lr}
 80a06e2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a06e4:	2300      	movs	r3, #0
 80a06e6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a06e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a06ec:	60a3      	str	r3, [r4, #8]
 80a06ee:	4b04      	ldr	r3, [pc, #16]	; (80a0700 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a06f0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a06f2:	4608      	mov	r0, r1
 80a06f4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a06f6:	4611      	mov	r1, r2
 80a06f8:	f7ff fe9c 	bl	80a0434 <HAL_I2C_Init>
}
 80a06fc:	4620      	mov	r0, r4
 80a06fe:	bd10      	pop	{r4, pc}
 80a0700:	080a1424 	.word	0x080a1424

080a0704 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0704:	2100      	movs	r1, #0
 80a0706:	7c00      	ldrb	r0, [r0, #16]
 80a0708:	f7ff be8c 	b.w	80a0424 <HAL_I2C_Is_Enabled>

080a070c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a070c:	4770      	bx	lr

080a070e <_ZN9IPAddressD0Ev>:
 80a070e:	b510      	push	{r4, lr}
 80a0710:	4604      	mov	r4, r0
 80a0712:	2118      	movs	r1, #24
 80a0714:	f000 fcb1 	bl	80a107a <_ZdlPvj>
 80a0718:	4620      	mov	r0, r4
 80a071a:	bd10      	pop	{r4, pc}

080a071c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a071e:	460f      	mov	r7, r1
 80a0720:	f100 0608 	add.w	r6, r0, #8
 80a0724:	1d05      	adds	r5, r0, #4
 80a0726:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a072c:	220a      	movs	r2, #10
 80a072e:	4638      	mov	r0, r7
 80a0730:	f000 f8e7 	bl	80a0902 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0734:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0736:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0738:	d007      	beq.n	80a074a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a073a:	2c00      	cmp	r4, #0
 80a073c:	d0f4      	beq.n	80a0728 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a073e:	212e      	movs	r1, #46	; 0x2e
 80a0740:	4638      	mov	r0, r7
 80a0742:	f000 f8db 	bl	80a08fc <_ZN5Print5printEc>
 80a0746:	4404      	add	r4, r0
 80a0748:	e7ee      	b.n	80a0728 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a074a:	4620      	mov	r0, r4
 80a074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0750 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0750:	b510      	push	{r4, lr}
 80a0752:	4604      	mov	r4, r0
 80a0754:	4b04      	ldr	r3, [pc, #16]	; (80a0768 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0756:	2211      	movs	r2, #17
 80a0758:	f840 3b04 	str.w	r3, [r0], #4
 80a075c:	2100      	movs	r1, #0
 80a075e:	f000 fe0a 	bl	80a1376 <memset>
{
    clear();
}
 80a0762:	4620      	mov	r0, r4
 80a0764:	bd10      	pop	{r4, pc}
 80a0766:	bf00      	nop
 80a0768:	080a144c 	.word	0x080a144c

080a076c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a076c:	4603      	mov	r3, r0
 80a076e:	4a07      	ldr	r2, [pc, #28]	; (80a078c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0770:	b510      	push	{r4, lr}
 80a0772:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0776:	f101 0210 	add.w	r2, r1, #16
 80a077a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a077e:	4291      	cmp	r1, r2
 80a0780:	f843 4b04 	str.w	r4, [r3], #4
 80a0784:	d1f9      	bne.n	80a077a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0786:	780a      	ldrb	r2, [r1, #0]
 80a0788:	701a      	strb	r2, [r3, #0]
}
 80a078a:	bd10      	pop	{r4, pc}
 80a078c:	080a144c 	.word	0x080a144c

080a0790 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0790:	4a02      	ldr	r2, [pc, #8]	; (80a079c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0792:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0794:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0796:	2204      	movs	r2, #4
 80a0798:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a079a:	4770      	bx	lr
 80a079c:	080a144c 	.word	0x080a144c

080a07a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a07a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a07a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a07a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a07aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a07ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a07b2:	2304      	movs	r3, #4
 80a07b4:	6041      	str	r1, [r0, #4]
 80a07b6:	7503      	strb	r3, [r0, #20]
 80a07b8:	bd10      	pop	{r4, pc}
	...

080a07bc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a07bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a07be:	4d04      	ldr	r5, [pc, #16]	; (80a07d0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a07c0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a07c2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a07c6:	9500      	str	r5, [sp, #0]
 80a07c8:	f7ff ffea 	bl	80a07a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a07cc:	b003      	add	sp, #12
 80a07ce:	bd30      	pop	{r4, r5, pc}
 80a07d0:	080a144c 	.word	0x080a144c

080a07d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a07d4:	4a01      	ldr	r2, [pc, #4]	; (80a07dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a07d6:	4b02      	ldr	r3, [pc, #8]	; (80a07e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a07d8:	601a      	str	r2, [r3, #0]
 80a07da:	4770      	bx	lr
 80a07dc:	080a14ce 	.word	0x080a14ce
 80a07e0:	20000074 	.word	0x20000074

080a07e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a07e4:	2300      	movs	r3, #0
 80a07e6:	461a      	mov	r2, r3
 80a07e8:	6840      	ldr	r0, [r0, #4]
 80a07ea:	f7ff bee1 	b.w	80a05b0 <network_connect>

080a07ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a07ee:	2200      	movs	r2, #0
 80a07f0:	2102      	movs	r1, #2
 80a07f2:	6840      	ldr	r0, [r0, #4]
 80a07f4:	f7ff beec 	b.w	80a05d0 <network_disconnect>

080a07f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a07f8:	2200      	movs	r2, #0
 80a07fa:	4611      	mov	r1, r2
 80a07fc:	6840      	ldr	r0, [r0, #4]
 80a07fe:	f7ff bedf 	b.w	80a05c0 <network_connecting>

080a0802 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0802:	2200      	movs	r2, #0
 80a0804:	4611      	mov	r1, r2
 80a0806:	6840      	ldr	r0, [r0, #4]
 80a0808:	f7ff beea 	b.w	80a05e0 <network_ready>

080a080c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a080c:	2300      	movs	r3, #0
 80a080e:	461a      	mov	r2, r3
 80a0810:	4619      	mov	r1, r3
 80a0812:	6840      	ldr	r0, [r0, #4]
 80a0814:	f7ff beec 	b.w	80a05f0 <network_on>

080a0818 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0818:	2300      	movs	r3, #0
 80a081a:	461a      	mov	r2, r3
 80a081c:	4619      	mov	r1, r3
 80a081e:	6840      	ldr	r0, [r0, #4]
 80a0820:	f7ff beee 	b.w	80a0600 <network_off>

080a0824 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0824:	2200      	movs	r2, #0
 80a0826:	f081 0101 	eor.w	r1, r1, #1
 80a082a:	6840      	ldr	r0, [r0, #4]
 80a082c:	f7ff bef0 	b.w	80a0610 <network_listen>

080a0830 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0830:	2200      	movs	r2, #0
 80a0832:	6840      	ldr	r0, [r0, #4]
 80a0834:	f7ff befc 	b.w	80a0630 <network_set_listen_timeout>

080a0838 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0838:	2200      	movs	r2, #0
 80a083a:	4611      	mov	r1, r2
 80a083c:	6840      	ldr	r0, [r0, #4]
 80a083e:	f7ff beff 	b.w	80a0640 <network_get_listen_timeout>

080a0842 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0842:	2200      	movs	r2, #0
 80a0844:	4611      	mov	r1, r2
 80a0846:	6840      	ldr	r0, [r0, #4]
 80a0848:	f7ff beea 	b.w	80a0620 <network_listening>

080a084c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a084c:	b570      	push	{r4, r5, r6, lr}
 80a084e:	4616      	mov	r6, r2
 80a0850:	b08e      	sub	sp, #56	; 0x38
 80a0852:	4604      	mov	r4, r0
    IPAddress addr;
 80a0854:	a808      	add	r0, sp, #32
 80a0856:	f7ff ff7b 	bl	80a0750 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a085a:	2211      	movs	r2, #17
 80a085c:	2100      	movs	r1, #0
 80a085e:	a803      	add	r0, sp, #12
 80a0860:	f000 fd89 	bl	80a1376 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0864:	4630      	mov	r0, r6
 80a0866:	f000 fdb7 	bl	80a13d8 <strlen>
 80a086a:	2500      	movs	r5, #0
 80a086c:	4b0a      	ldr	r3, [pc, #40]	; (80a0898 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a086e:	9500      	str	r5, [sp, #0]
 80a0870:	b281      	uxth	r1, r0
 80a0872:	685b      	ldr	r3, [r3, #4]
 80a0874:	aa03      	add	r2, sp, #12
 80a0876:	4630      	mov	r0, r6
 80a0878:	f7ff fe66 	bl	80a0548 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a087c:	b120      	cbz	r0, 80a0888 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a087e:	4629      	mov	r1, r5
 80a0880:	4620      	mov	r0, r4
 80a0882:	f7ff ff85 	bl	80a0790 <_ZN9IPAddressC1Em>
 80a0886:	e003      	b.n	80a0890 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0888:	a903      	add	r1, sp, #12
 80a088a:	4620      	mov	r0, r4
 80a088c:	f7ff ff6e 	bl	80a076c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0890:	4620      	mov	r0, r4
 80a0892:	b00e      	add	sp, #56	; 0x38
 80a0894:	bd70      	pop	{r4, r5, r6, pc}
 80a0896:	bf00      	nop
 80a0898:	200004fc 	.word	0x200004fc

080a089c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a089c:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a089e:	4a03      	ldr	r2, [pc, #12]	; (80a08ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a08a0:	601a      	str	r2, [r3, #0]
 80a08a2:	2200      	movs	r2, #0
 80a08a4:	605a      	str	r2, [r3, #4]
 80a08a6:	4770      	bx	lr
 80a08a8:	20000078 	.word	0x20000078
 80a08ac:	080a1544 	.word	0x080a1544

080a08b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a08b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08b2:	4606      	mov	r6, r0
 80a08b4:	460d      	mov	r5, r1
 80a08b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a08b8:	2400      	movs	r4, #0
  while (size--) {
 80a08ba:	42bd      	cmp	r5, r7
 80a08bc:	d00c      	beq.n	80a08d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a08be:	6833      	ldr	r3, [r6, #0]
 80a08c0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a08c4:	689b      	ldr	r3, [r3, #8]
 80a08c6:	4630      	mov	r0, r6
 80a08c8:	4798      	blx	r3
     if (chunk>=0)
 80a08ca:	2800      	cmp	r0, #0
 80a08cc:	db01      	blt.n	80a08d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a08ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a08d0:	e7f3      	b.n	80a08ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a08d2:	2c00      	cmp	r4, #0
 80a08d4:	bf08      	it	eq
 80a08d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a08d8:	4620      	mov	r0, r4
 80a08da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a08dc:	b570      	push	{r4, r5, r6, lr}
 80a08de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a08e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a08e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a08e4:	b149      	cbz	r1, 80a08fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a08e6:	f000 fd77 	bl	80a13d8 <strlen>
 80a08ea:	682b      	ldr	r3, [r5, #0]
 80a08ec:	4602      	mov	r2, r0
 80a08ee:	4621      	mov	r1, r4
 80a08f0:	4628      	mov	r0, r5
    }
 80a08f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a08f6:	68db      	ldr	r3, [r3, #12]
 80a08f8:	4718      	bx	r3
    }
 80a08fa:	bd70      	pop	{r4, r5, r6, pc}

080a08fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a08fc:	6803      	ldr	r3, [r0, #0]
 80a08fe:	689b      	ldr	r3, [r3, #8]
 80a0900:	4718      	bx	r3

080a0902 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0902:	2a01      	cmp	r2, #1
 80a0904:	bf98      	it	ls
 80a0906:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0908:	b530      	push	{r4, r5, lr}
 80a090a:	460b      	mov	r3, r1
 80a090c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a090e:	2100      	movs	r1, #0
 80a0910:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0914:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0918:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a091c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0920:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0922:	2b09      	cmp	r3, #9
 80a0924:	bf94      	ite	ls
 80a0926:	3330      	addls	r3, #48	; 0x30
 80a0928:	3337      	addhi	r3, #55	; 0x37
 80a092a:	b2db      	uxtb	r3, r3
 80a092c:	4621      	mov	r1, r4
 80a092e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0932:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0934:	2d00      	cmp	r5, #0
 80a0936:	d1ef      	bne.n	80a0918 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0938:	f7ff ffd0 	bl	80a08dc <_ZN5Print5writeEPKc>
}
 80a093c:	b00b      	add	sp, #44	; 0x2c
 80a093e:	bd30      	pop	{r4, r5, pc}

080a0940 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0940:	b510      	push	{r4, lr}
 80a0942:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0944:	f7ff fe97 	bl	80a0676 <_ZNSt14_Function_baseD1Ev>
 80a0948:	4620      	mov	r0, r4
 80a094a:	bd10      	pop	{r4, pc}

080a094c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a094c:	4803      	ldr	r0, [pc, #12]	; (80a095c <_GLOBAL__sub_I_RGB+0x10>)
 80a094e:	2300      	movs	r3, #0
 80a0950:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0952:	4a03      	ldr	r2, [pc, #12]	; (80a0960 <_GLOBAL__sub_I_RGB+0x14>)
 80a0954:	4903      	ldr	r1, [pc, #12]	; (80a0964 <_GLOBAL__sub_I_RGB+0x18>)
 80a0956:	f000 bb8b 	b.w	80a1070 <__aeabi_atexit>
 80a095a:	bf00      	nop
 80a095c:	20000080 	.word	0x20000080
 80a0960:	20000068 	.word	0x20000068
 80a0964:	080a0941 	.word	0x080a0941

080a0968 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0968:	b510      	push	{r4, lr}
 80a096a:	4b04      	ldr	r3, [pc, #16]	; (80a097c <_ZN8SPIClassD1Ev+0x14>)
 80a096c:	4604      	mov	r4, r0
 80a096e:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0970:	68c0      	ldr	r0, [r0, #12]
 80a0972:	b108      	cbz	r0, 80a0978 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a0974:	f7ff fce6 	bl	80a0344 <os_mutex_recursive_destroy>
 80a0978:	4620      	mov	r0, r4
 80a097a:	bd10      	pop	{r4, pc}
 80a097c:	080a1578 	.word	0x080a1578

080a0980 <_ZN8SPIClassD0Ev>:
 80a0980:	b510      	push	{r4, lr}
 80a0982:	4604      	mov	r4, r0
 80a0984:	f7ff fff0 	bl	80a0968 <_ZN8SPIClassD1Ev>
 80a0988:	4620      	mov	r0, r4
 80a098a:	2110      	movs	r1, #16
 80a098c:	f000 fb75 	bl	80a107a <_ZdlPvj>
 80a0990:	4620      	mov	r0, r4
 80a0992:	bd10      	pop	{r4, pc}

080a0994 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0994:	b570      	push	{r4, r5, r6, lr}
 80a0996:	4604      	mov	r4, r0
 80a0998:	460e      	mov	r6, r1
 80a099a:	4b07      	ldr	r3, [pc, #28]	; (80a09b8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a099c:	2500      	movs	r5, #0
 80a099e:	6003      	str	r3, [r0, #0]
 80a09a0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a09a4:	f7ff fcc6 	bl	80a0334 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a09a8:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a09aa:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a09ac:	f7ff fd4c 	bl	80a0448 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a09b0:	60a5      	str	r5, [r4, #8]
}
 80a09b2:	4620      	mov	r0, r4
 80a09b4:	bd70      	pop	{r4, r5, r6, pc}
 80a09b6:	bf00      	nop
 80a09b8:	080a1578 	.word	0x080a1578

080a09bc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a09bc:	7900      	ldrb	r0, [r0, #4]
 80a09be:	f7ff bd4b 	b.w	80a0458 <HAL_SPI_Is_Enabled>

080a09c2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a09c2:	b510      	push	{r4, lr}
 80a09c4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a09c6:	6800      	ldr	r0, [r0, #0]
 80a09c8:	b118      	cbz	r0, 80a09d2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a09ca:	f7ff fe49 	bl	80a0660 <free>
            wakeupSource_ = nullptr;
 80a09ce:	2300      	movs	r3, #0
 80a09d0:	6023      	str	r3, [r4, #0]
 80a09d2:	bd10      	pop	{r4, pc}

080a09d4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a09d4:	b510      	push	{r4, lr}
 80a09d6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a09d8:	f7ff fff3 	bl	80a09c2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a09dc:	4620      	mov	r0, r4
 80a09de:	bd10      	pop	{r4, pc}

080a09e0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a09e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a09e4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a09e6:	4c08      	ldr	r4, [pc, #32]	; (80a0a08 <_GLOBAL__sub_I_System+0x28>)
 80a09e8:	2000      	movs	r0, #0
 80a09ea:	6020      	str	r0, [r4, #0]
 80a09ec:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a09ee:	71a0      	strb	r0, [r4, #6]
 80a09f0:	8120      	strh	r0, [r4, #8]
 80a09f2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a09f4:	f7ff fdb0 	bl	80a0558 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a09f8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a09fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a09fe:	4a03      	ldr	r2, [pc, #12]	; (80a0a0c <_GLOBAL__sub_I_System+0x2c>)
 80a0a00:	4903      	ldr	r1, [pc, #12]	; (80a0a10 <_GLOBAL__sub_I_System+0x30>)
 80a0a02:	f000 bb35 	b.w	80a1070 <__aeabi_atexit>
 80a0a06:	bf00      	nop
 80a0a08:	20000090 	.word	0x20000090
 80a0a0c:	20000068 	.word	0x20000068
 80a0a10:	080a09d5 	.word	0x080a09d5

080a0a14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0a14:	4b02      	ldr	r3, [pc, #8]	; (80a0a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0a16:	681a      	ldr	r2, [r3, #0]
 80a0a18:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0a1a:	601a      	str	r2, [r3, #0]
 80a0a1c:	4770      	bx	lr
 80a0a1e:	bf00      	nop
 80a0a20:	20000000 	.word	0x20000000
 80a0a24:	2000009c 	.word	0x2000009c

080a0a28 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0a28:	4770      	bx	lr

080a0a2a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a2a:	7441      	strb	r1, [r0, #17]
 80a0a2c:	4770      	bx	lr

080a0a2e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0a2e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0a30:	7c00      	ldrb	r0, [r0, #16]
 80a0a32:	f7ff fd51 	bl	80a04d8 <HAL_USART_Available_Data_For_Write>
}
 80a0a36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a3a:	bd08      	pop	{r3, pc}

080a0a3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0a3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0a3e:	7c00      	ldrb	r0, [r0, #16]
 80a0a40:	f7ff fd22 	bl	80a0488 <HAL_USART_Available_Data>
}
 80a0a44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a48:	bd08      	pop	{r3, pc}

080a0a4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0a4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0a4c:	7c00      	ldrb	r0, [r0, #16]
 80a0a4e:	f7ff fd2b 	bl	80a04a8 <HAL_USART_Peek_Data>
}
 80a0a52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0a56:	bf28      	it	cs
 80a0a58:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0a5c:	bd08      	pop	{r3, pc}

080a0a5e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0a5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0a60:	7c00      	ldrb	r0, [r0, #16]
 80a0a62:	f7ff fd19 	bl	80a0498 <HAL_USART_Read_Data>
}
 80a0a66:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0a6a:	bf28      	it	cs
 80a0a6c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0a70:	bd08      	pop	{r3, pc}

080a0a72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0a72:	7c00      	ldrb	r0, [r0, #16]
 80a0a74:	f7ff bd20 	b.w	80a04b8 <HAL_USART_Flush_Data>

080a0a78 <_ZN11USARTSerialD0Ev>:
 80a0a78:	b510      	push	{r4, lr}
 80a0a7a:	4604      	mov	r4, r0
 80a0a7c:	2114      	movs	r1, #20
 80a0a7e:	f000 fafc 	bl	80a107a <_ZdlPvj>
 80a0a82:	4620      	mov	r0, r4
 80a0a84:	bd10      	pop	{r4, pc}

080a0a86 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0a86:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0a88:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0a8a:	4604      	mov	r4, r0
 80a0a8c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0a8e:	b925      	cbnz	r5, 80a0a9a <_ZN11USARTSerial5writeEh+0x14>
 80a0a90:	7c00      	ldrb	r0, [r0, #16]
 80a0a92:	f7ff fd21 	bl	80a04d8 <HAL_USART_Available_Data_For_Write>
 80a0a96:	2800      	cmp	r0, #0
 80a0a98:	dd05      	ble.n	80a0aa6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0a9a:	4631      	mov	r1, r6
 80a0a9c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0aa2:	f7ff bce9 	b.w	80a0478 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0aa6:	4628      	mov	r0, r5
 80a0aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0aac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0aac:	b510      	push	{r4, lr}
 80a0aae:	4604      	mov	r4, r0
 80a0ab0:	4608      	mov	r0, r1
 80a0ab2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0ab4:	2200      	movs	r2, #0
 80a0ab6:	6062      	str	r2, [r4, #4]
 80a0ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0abc:	60a2      	str	r2, [r4, #8]
 80a0abe:	4a05      	ldr	r2, [pc, #20]	; (80a0ad4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0ac0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0ac2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0ac4:	2201      	movs	r2, #1
 80a0ac6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0ac8:	461a      	mov	r2, r3
 80a0aca:	f7ff fccd 	bl	80a0468 <HAL_USART_Init>
}
 80a0ace:	4620      	mov	r0, r4
 80a0ad0:	bd10      	pop	{r4, pc}
 80a0ad2:	bf00      	nop
 80a0ad4:	080a15b4 	.word	0x080a15b4

080a0ad8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0ad8:	7c00      	ldrb	r0, [r0, #16]
 80a0ada:	f7ff bcf5 	b.w	80a04c8 <HAL_USART_Is_Enabled>
	...

080a0ae0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0ae0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0ae2:	4d0c      	ldr	r5, [pc, #48]	; (80a0b14 <_Z22__fetch_global_Serial1v+0x34>)
 80a0ae4:	6829      	ldr	r1, [r5, #0]
 80a0ae6:	f011 0401 	ands.w	r4, r1, #1
 80a0aea:	d111      	bne.n	80a0b10 <_Z22__fetch_global_Serial1v+0x30>
 80a0aec:	4628      	mov	r0, r5
 80a0aee:	f7ff fad6 	bl	80a009e <__cxa_guard_acquire>
 80a0af2:	b168      	cbz	r0, 80a0b10 <_Z22__fetch_global_Serial1v+0x30>
 80a0af4:	4a08      	ldr	r2, [pc, #32]	; (80a0b18 <_Z22__fetch_global_Serial1v+0x38>)
 80a0af6:	4621      	mov	r1, r4
 80a0af8:	4b08      	ldr	r3, [pc, #32]	; (80a0b1c <_Z22__fetch_global_Serial1v+0x3c>)
 80a0afa:	4809      	ldr	r0, [pc, #36]	; (80a0b20 <_Z22__fetch_global_Serial1v+0x40>)
 80a0afc:	f7ff ffd6 	bl	80a0aac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0b00:	4628      	mov	r0, r5
 80a0b02:	f7ff fad1 	bl	80a00a8 <__cxa_guard_release>
 80a0b06:	4a07      	ldr	r2, [pc, #28]	; (80a0b24 <_Z22__fetch_global_Serial1v+0x44>)
 80a0b08:	4907      	ldr	r1, [pc, #28]	; (80a0b28 <_Z22__fetch_global_Serial1v+0x48>)
 80a0b0a:	4805      	ldr	r0, [pc, #20]	; (80a0b20 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b0c:	f000 fab0 	bl	80a1070 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0b10:	4803      	ldr	r0, [pc, #12]	; (80a0b20 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b12:	bd38      	pop	{r3, r4, r5, pc}
 80a0b14:	20000138 	.word	0x20000138
 80a0b18:	2000013c 	.word	0x2000013c
 80a0b1c:	200000b4 	.word	0x200000b4
 80a0b20:	200000a0 	.word	0x200000a0
 80a0b24:	20000068 	.word	0x20000068
 80a0b28:	080a0a29 	.word	0x080a0a29

080a0b2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b2c:	7441      	strb	r1, [r0, #17]
 80a0b2e:	4770      	bx	lr

080a0b30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0b30:	4770      	bx	lr

080a0b32 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0b32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0b34:	2100      	movs	r1, #0
 80a0b36:	7c00      	ldrb	r0, [r0, #16]
 80a0b38:	f7ff fcee 	bl	80a0518 <HAL_USB_USART_Receive_Data>
}
 80a0b3c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b40:	bf28      	it	cs
 80a0b42:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b46:	bd08      	pop	{r3, pc}

080a0b48 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0b48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0b4a:	2101      	movs	r1, #1
 80a0b4c:	7c00      	ldrb	r0, [r0, #16]
 80a0b4e:	f7ff fce3 	bl	80a0518 <HAL_USB_USART_Receive_Data>
}
 80a0b52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b56:	bf28      	it	cs
 80a0b58:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b5c:	bd08      	pop	{r3, pc}

080a0b5e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0b5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0b60:	7c00      	ldrb	r0, [r0, #16]
 80a0b62:	f7ff fcd1 	bl	80a0508 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0b66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b6a:	bd08      	pop	{r3, pc}

080a0b6c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0b6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0b6e:	7c00      	ldrb	r0, [r0, #16]
 80a0b70:	f7ff fcc2 	bl	80a04f8 <HAL_USB_USART_Available_Data>
}
 80a0b74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b78:	bd08      	pop	{r3, pc}

080a0b7a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0b7a:	7c00      	ldrb	r0, [r0, #16]
 80a0b7c:	f7ff bcdc 	b.w	80a0538 <HAL_USB_USART_Flush_Data>

080a0b80 <_ZN9USBSerialD0Ev>:
 80a0b80:	b510      	push	{r4, lr}
 80a0b82:	4604      	mov	r4, r0
 80a0b84:	2114      	movs	r1, #20
 80a0b86:	f000 fa78 	bl	80a107a <_ZdlPvj>
 80a0b8a:	4620      	mov	r0, r4
 80a0b8c:	bd10      	pop	{r4, pc}

080a0b8e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b8e:	b538      	push	{r3, r4, r5, lr}
 80a0b90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b92:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b96:	f7ff fcb7 	bl	80a0508 <HAL_USB_USART_Available_Data_For_Write>
 80a0b9a:	2800      	cmp	r0, #0
 80a0b9c:	dc01      	bgt.n	80a0ba2 <_ZN9USBSerial5writeEh+0x14>
 80a0b9e:	7c60      	ldrb	r0, [r4, #17]
 80a0ba0:	b128      	cbz	r0, 80a0bae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0ba2:	4629      	mov	r1, r5
 80a0ba4:	7c20      	ldrb	r0, [r4, #16]
 80a0ba6:	f7ff fcbf 	bl	80a0528 <HAL_USB_USART_Send_Data>
 80a0baa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0bae:	bd38      	pop	{r3, r4, r5, pc}

080a0bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0bb0:	b510      	push	{r4, lr}
 80a0bb2:	4604      	mov	r4, r0
 80a0bb4:	2300      	movs	r3, #0
 80a0bb6:	6063      	str	r3, [r4, #4]
 80a0bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0bbc:	60a3      	str	r3, [r4, #8]
 80a0bbe:	4b05      	ldr	r3, [pc, #20]	; (80a0bd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0bc0:	4608      	mov	r0, r1
 80a0bc2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0bc4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0bc6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0bc8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0bca:	4611      	mov	r1, r2
 80a0bcc:	f7ff fc8c 	bl	80a04e8 <HAL_USB_USART_Init>
}
 80a0bd0:	4620      	mov	r0, r4
 80a0bd2:	bd10      	pop	{r4, pc}
 80a0bd4:	080a15e4 	.word	0x080a15e4

080a0bd8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0bd8:	b510      	push	{r4, lr}
 80a0bda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0bdc:	2214      	movs	r2, #20
 80a0bde:	2100      	movs	r1, #0
 80a0be0:	f000 fbc9 	bl	80a1376 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0be4:	4b05      	ldr	r3, [pc, #20]	; (80a0bfc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0be6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0be8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0bea:	4b05      	ldr	r3, [pc, #20]	; (80a0c00 <_Z19acquireSerialBufferv+0x28>)
 80a0bec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0bee:	f240 1301 	movw	r3, #257	; 0x101
 80a0bf2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0bf4:	2381      	movs	r3, #129	; 0x81
 80a0bf6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0bf8:	bd10      	pop	{r4, pc}
 80a0bfa:	bf00      	nop
 80a0bfc:	20000245 	.word	0x20000245
 80a0c00:	200001c4 	.word	0x200001c4

080a0c04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0c04:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c06:	4d0e      	ldr	r5, [pc, #56]	; (80a0c40 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0c08:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0c0a:	a801      	add	r0, sp, #4
 80a0c0c:	f7ff ffe4 	bl	80a0bd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c10:	6829      	ldr	r1, [r5, #0]
 80a0c12:	f011 0401 	ands.w	r4, r1, #1
 80a0c16:	d110      	bne.n	80a0c3a <_Z16_fetch_usbserialv+0x36>
 80a0c18:	4628      	mov	r0, r5
 80a0c1a:	f7ff fa40 	bl	80a009e <__cxa_guard_acquire>
 80a0c1e:	b160      	cbz	r0, 80a0c3a <_Z16_fetch_usbserialv+0x36>
 80a0c20:	aa01      	add	r2, sp, #4
 80a0c22:	4621      	mov	r1, r4
 80a0c24:	4807      	ldr	r0, [pc, #28]	; (80a0c44 <_Z16_fetch_usbserialv+0x40>)
 80a0c26:	f7ff ffc3 	bl	80a0bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c2a:	4628      	mov	r0, r5
 80a0c2c:	f7ff fa3c 	bl	80a00a8 <__cxa_guard_release>
 80a0c30:	4a05      	ldr	r2, [pc, #20]	; (80a0c48 <_Z16_fetch_usbserialv+0x44>)
 80a0c32:	4906      	ldr	r1, [pc, #24]	; (80a0c4c <_Z16_fetch_usbserialv+0x48>)
 80a0c34:	4803      	ldr	r0, [pc, #12]	; (80a0c44 <_Z16_fetch_usbserialv+0x40>)
 80a0c36:	f000 fa1b 	bl	80a1070 <__aeabi_atexit>
	return _usbserial;
}
 80a0c3a:	4802      	ldr	r0, [pc, #8]	; (80a0c44 <_Z16_fetch_usbserialv+0x40>)
 80a0c3c:	b007      	add	sp, #28
 80a0c3e:	bd30      	pop	{r4, r5, pc}
 80a0c40:	200001c0 	.word	0x200001c0
 80a0c44:	20000348 	.word	0x20000348
 80a0c48:	20000068 	.word	0x20000068
 80a0c4c:	080a0b31 	.word	0x080a0b31

080a0c50 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0c50:	b510      	push	{r4, lr}
 80a0c52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c54:	2214      	movs	r2, #20
 80a0c56:	2100      	movs	r1, #0
 80a0c58:	f000 fb8d 	bl	80a1376 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0c5c:	4b05      	ldr	r3, [pc, #20]	; (80a0c74 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0c5e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0c60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0c62:	4b05      	ldr	r3, [pc, #20]	; (80a0c78 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0c64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0c66:	f240 1301 	movw	r3, #257	; 0x101
 80a0c6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0c6c:	2381      	movs	r3, #129	; 0x81
 80a0c6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0c70:	bd10      	pop	{r4, pc}
 80a0c72:	bf00      	nop
 80a0c74:	200003f8 	.word	0x200003f8
 80a0c78:	20000360 	.word	0x20000360

080a0c7c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0c7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c7e:	4c0e      	ldr	r4, [pc, #56]	; (80a0cb8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0c80:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0c82:	a801      	add	r0, sp, #4
 80a0c84:	f7ff ffe4 	bl	80a0c50 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c88:	6823      	ldr	r3, [r4, #0]
 80a0c8a:	07db      	lsls	r3, r3, #31
 80a0c8c:	d410      	bmi.n	80a0cb0 <_Z17_fetch_usbserial1v+0x34>
 80a0c8e:	4620      	mov	r0, r4
 80a0c90:	f7ff fa05 	bl	80a009e <__cxa_guard_acquire>
 80a0c94:	b160      	cbz	r0, 80a0cb0 <_Z17_fetch_usbserial1v+0x34>
 80a0c96:	aa01      	add	r2, sp, #4
 80a0c98:	2101      	movs	r1, #1
 80a0c9a:	4808      	ldr	r0, [pc, #32]	; (80a0cbc <_Z17_fetch_usbserial1v+0x40>)
 80a0c9c:	f7ff ff88 	bl	80a0bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ca0:	4620      	mov	r0, r4
 80a0ca2:	f7ff fa01 	bl	80a00a8 <__cxa_guard_release>
 80a0ca6:	4a06      	ldr	r2, [pc, #24]	; (80a0cc0 <_Z17_fetch_usbserial1v+0x44>)
 80a0ca8:	4906      	ldr	r1, [pc, #24]	; (80a0cc4 <_Z17_fetch_usbserial1v+0x48>)
 80a0caa:	4804      	ldr	r0, [pc, #16]	; (80a0cbc <_Z17_fetch_usbserial1v+0x40>)
 80a0cac:	f000 f9e0 	bl	80a1070 <__aeabi_atexit>
  return _usbserial1;
}
 80a0cb0:	4802      	ldr	r0, [pc, #8]	; (80a0cbc <_Z17_fetch_usbserial1v+0x40>)
 80a0cb2:	b006      	add	sp, #24
 80a0cb4:	bd10      	pop	{r4, pc}
 80a0cb6:	bf00      	nop
 80a0cb8:	2000035c 	.word	0x2000035c
 80a0cbc:	200003e4 	.word	0x200003e4
 80a0cc0:	20000068 	.word	0x20000068
 80a0cc4:	080a0b31 	.word	0x080a0b31

080a0cc8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0cc8:	2200      	movs	r2, #0
 80a0cca:	4611      	mov	r1, r2
 80a0ccc:	6840      	ldr	r0, [r0, #4]
 80a0cce:	f7ff bc87 	b.w	80a05e0 <network_ready>

080a0cd2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cd4:	4616      	mov	r6, r2
 80a0cd6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0cd8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0cda:	460f      	mov	r7, r1
 80a0cdc:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0cde:	2100      	movs	r1, #0
 80a0ce0:	a803      	add	r0, sp, #12
 80a0ce2:	f000 fb48 	bl	80a1376 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ce6:	4630      	mov	r0, r6
 80a0ce8:	f000 fb76 	bl	80a13d8 <strlen>
 80a0cec:	2500      	movs	r5, #0
 80a0cee:	9500      	str	r5, [sp, #0]
 80a0cf0:	b281      	uxth	r1, r0
 80a0cf2:	687b      	ldr	r3, [r7, #4]
 80a0cf4:	aa03      	add	r2, sp, #12
 80a0cf6:	4630      	mov	r0, r6
 80a0cf8:	f7ff fc26 	bl	80a0548 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0cfc:	b120      	cbz	r0, 80a0d08 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0cfe:	4629      	mov	r1, r5
 80a0d00:	4620      	mov	r0, r4
 80a0d02:	f7ff fd45 	bl	80a0790 <_ZN9IPAddressC1Em>
 80a0d06:	e003      	b.n	80a0d10 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0d08:	a903      	add	r1, sp, #12
 80a0d0a:	4620      	mov	r0, r4
 80a0d0c:	f7ff fd2e 	bl	80a076c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0d10:	4620      	mov	r0, r4
 80a0d12:	b009      	add	sp, #36	; 0x24
 80a0d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d16 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0d16:	2200      	movs	r2, #0
 80a0d18:	4611      	mov	r1, r2
 80a0d1a:	6840      	ldr	r0, [r0, #4]
 80a0d1c:	f7ff bc80 	b.w	80a0620 <network_listening>

080a0d20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0d20:	2200      	movs	r2, #0
 80a0d22:	4611      	mov	r1, r2
 80a0d24:	6840      	ldr	r0, [r0, #4]
 80a0d26:	f7ff bc8b 	b.w	80a0640 <network_get_listen_timeout>

080a0d2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0d2a:	2200      	movs	r2, #0
 80a0d2c:	6840      	ldr	r0, [r0, #4]
 80a0d2e:	f7ff bc7f 	b.w	80a0630 <network_set_listen_timeout>

080a0d32 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0d32:	2200      	movs	r2, #0
 80a0d34:	f081 0101 	eor.w	r1, r1, #1
 80a0d38:	6840      	ldr	r0, [r0, #4]
 80a0d3a:	f7ff bc69 	b.w	80a0610 <network_listen>

080a0d3e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0d3e:	2300      	movs	r3, #0
 80a0d40:	461a      	mov	r2, r3
 80a0d42:	4619      	mov	r1, r3
 80a0d44:	6840      	ldr	r0, [r0, #4]
 80a0d46:	f7ff bc5b 	b.w	80a0600 <network_off>

080a0d4a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0d4a:	2300      	movs	r3, #0
 80a0d4c:	461a      	mov	r2, r3
 80a0d4e:	4619      	mov	r1, r3
 80a0d50:	6840      	ldr	r0, [r0, #4]
 80a0d52:	f7ff bc4d 	b.w	80a05f0 <network_on>

080a0d56 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0d56:	2200      	movs	r2, #0
 80a0d58:	4611      	mov	r1, r2
 80a0d5a:	6840      	ldr	r0, [r0, #4]
 80a0d5c:	f7ff bc30 	b.w	80a05c0 <network_connecting>

080a0d60 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0d60:	2200      	movs	r2, #0
 80a0d62:	2102      	movs	r1, #2
 80a0d64:	6840      	ldr	r0, [r0, #4]
 80a0d66:	f7ff bc33 	b.w	80a05d0 <network_disconnect>

080a0d6a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0d6a:	2300      	movs	r3, #0
 80a0d6c:	461a      	mov	r2, r3
 80a0d6e:	6840      	ldr	r0, [r0, #4]
 80a0d70:	f7ff bc1e 	b.w	80a05b0 <network_connect>

080a0d74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0d74:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0d76:	2204      	movs	r2, #4
 80a0d78:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0d7a:	4a02      	ldr	r2, [pc, #8]	; (80a0d84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d7c:	601a      	str	r2, [r3, #0]
 80a0d7e:	4770      	bx	lr
 80a0d80:	200004fc 	.word	0x200004fc
 80a0d84:	080a1614 	.word	0x080a1614

080a0d88 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0d88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0d8a:	4b14      	ldr	r3, [pc, #80]	; (80a0ddc <serialEventRun+0x54>)
 80a0d8c:	b133      	cbz	r3, 80a0d9c <serialEventRun+0x14>
 80a0d8e:	f7ff ff39 	bl	80a0c04 <_Z16_fetch_usbserialv>
 80a0d92:	6803      	ldr	r3, [r0, #0]
 80a0d94:	691b      	ldr	r3, [r3, #16]
 80a0d96:	4798      	blx	r3
 80a0d98:	2800      	cmp	r0, #0
 80a0d9a:	dc16      	bgt.n	80a0dca <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0d9c:	4b10      	ldr	r3, [pc, #64]	; (80a0de0 <serialEventRun+0x58>)
 80a0d9e:	b133      	cbz	r3, 80a0dae <serialEventRun+0x26>
 80a0da0:	f7ff fe9e 	bl	80a0ae0 <_Z22__fetch_global_Serial1v>
 80a0da4:	6803      	ldr	r3, [r0, #0]
 80a0da6:	691b      	ldr	r3, [r3, #16]
 80a0da8:	4798      	blx	r3
 80a0daa:	2800      	cmp	r0, #0
 80a0dac:	dc10      	bgt.n	80a0dd0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0dae:	4b0d      	ldr	r3, [pc, #52]	; (80a0de4 <serialEventRun+0x5c>)
 80a0db0:	b10b      	cbz	r3, 80a0db6 <serialEventRun+0x2e>
 80a0db2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0db6:	4b0c      	ldr	r3, [pc, #48]	; (80a0de8 <serialEventRun+0x60>)
 80a0db8:	b17b      	cbz	r3, 80a0dda <serialEventRun+0x52>
 80a0dba:	f7ff ff5f 	bl	80a0c7c <_Z17_fetch_usbserial1v>
 80a0dbe:	6803      	ldr	r3, [r0, #0]
 80a0dc0:	691b      	ldr	r3, [r3, #16]
 80a0dc2:	4798      	blx	r3
 80a0dc4:	2800      	cmp	r0, #0
 80a0dc6:	dc06      	bgt.n	80a0dd6 <serialEventRun+0x4e>
 80a0dc8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0dca:	f3af 8000 	nop.w
 80a0dce:	e7e5      	b.n	80a0d9c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0dd0:	f3af 8000 	nop.w
 80a0dd4:	e7eb      	b.n	80a0dae <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0dd6:	f3af 8000 	nop.w
 80a0dda:	bd08      	pop	{r3, pc}
	...

080a0dec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0dec:	b508      	push	{r3, lr}
	serialEventRun();
 80a0dee:	f7ff ffcb 	bl	80a0d88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0df2:	f7ff fabf 	bl	80a0374 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0df6:	4b01      	ldr	r3, [pc, #4]	; (80a0dfc <_post_loop+0x10>)
 80a0df8:	6018      	str	r0, [r3, #0]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	2000050c 	.word	0x2000050c

080a0e00 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0e00:	4802      	ldr	r0, [pc, #8]	; (80a0e0c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0e02:	4a03      	ldr	r2, [pc, #12]	; (80a0e10 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0e04:	4903      	ldr	r1, [pc, #12]	; (80a0e14 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0e06:	1a12      	subs	r2, r2, r0
 80a0e08:	f000 baaa 	b.w	80a1360 <memcpy>
 80a0e0c:	40024000 	.word	0x40024000
 80a0e10:	40024004 	.word	0x40024004
 80a0e14:	080a16e0 	.word	0x080a16e0

080a0e18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0e18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e1a:	2300      	movs	r3, #0
 80a0e1c:	9300      	str	r3, [sp, #0]
 80a0e1e:	461a      	mov	r2, r3
 80a0e20:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e24:	f7ff fbb2 	bl	80a058c <system_ctrl_set_result>
}
 80a0e28:	b003      	add	sp, #12
 80a0e2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0e30 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0e30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0e32:	8843      	ldrh	r3, [r0, #2]
 80a0e34:	2b0a      	cmp	r3, #10
 80a0e36:	d008      	beq.n	80a0e4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0e38:	2b50      	cmp	r3, #80	; 0x50
 80a0e3a:	d109      	bne.n	80a0e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0e3c:	4b09      	ldr	r3, [pc, #36]	; (80a0e64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0e3e:	681b      	ldr	r3, [r3, #0]
 80a0e40:	b13b      	cbz	r3, 80a0e52 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0e42:	b003      	add	sp, #12
 80a0e44:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0e48:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0e4a:	f7ff ffe5 	bl	80a0e18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0e4e:	e006      	b.n	80a0e5e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e50:	2300      	movs	r3, #0
 80a0e52:	9300      	str	r3, [sp, #0]
 80a0e54:	461a      	mov	r2, r3
 80a0e56:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e5a:	f7ff fb97 	bl	80a058c <system_ctrl_set_result>
        break;
    }
}
 80a0e5e:	b003      	add	sp, #12
 80a0e60:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0e64:	20000504 	.word	0x20000504

080a0e68 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0e68:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0e6a:	4c10      	ldr	r4, [pc, #64]	; (80a0eac <module_user_init_hook+0x44>)
 80a0e6c:	4d10      	ldr	r5, [pc, #64]	; (80a0eb0 <module_user_init_hook+0x48>)
 80a0e6e:	6823      	ldr	r3, [r4, #0]
 80a0e70:	42ab      	cmp	r3, r5
 80a0e72:	4b10      	ldr	r3, [pc, #64]	; (80a0eb4 <module_user_init_hook+0x4c>)
 80a0e74:	bf0c      	ite	eq
 80a0e76:	2201      	moveq	r2, #1
 80a0e78:	2200      	movne	r2, #0
 80a0e7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0e7c:	d002      	beq.n	80a0e84 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0e7e:	f7ff ffbf 	bl	80a0e00 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0e82:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0e84:	f7ff fa66 	bl	80a0354 <HAL_RNG_GetRandomNumber>
 80a0e88:	4604      	mov	r4, r0
    srand(seed);
 80a0e8a:	f000 fa7d 	bl	80a1388 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0e8e:	4b0a      	ldr	r3, [pc, #40]	; (80a0eb8 <module_user_init_hook+0x50>)
 80a0e90:	b113      	cbz	r3, 80a0e98 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0e98:	2100      	movs	r1, #0
 80a0e9a:	4807      	ldr	r0, [pc, #28]	; (80a0eb8 <module_user_init_hook+0x50>)
 80a0e9c:	f7ff fb80 	bl	80a05a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0ea4:	2100      	movs	r1, #0
 80a0ea6:	4805      	ldr	r0, [pc, #20]	; (80a0ebc <module_user_init_hook+0x54>)
 80a0ea8:	f7ff bb66 	b.w	80a0578 <system_ctrl_set_app_request_handler>
 80a0eac:	40024000 	.word	0x40024000
 80a0eb0:	9a271c1e 	.word	0x9a271c1e
 80a0eb4:	20000508 	.word	0x20000508
 80a0eb8:	00000000 	.word	0x00000000
 80a0ebc:	080a0e31 	.word	0x080a0e31

080a0ec0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0ec0:	b510      	push	{r4, lr}
 80a0ec2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0ec4:	f000 f8b4 	bl	80a1030 <_ZN8particle7globals11instanceSpiEv>
 80a0ec8:	f7ff fd78 	bl	80a09bc <_ZN8SPIClass9isEnabledEv>
 80a0ecc:	b128      	cbz	r0, 80a0eda <pinAvailable+0x1a>
 80a0ece:	f1a4 030d 	sub.w	r3, r4, #13
 80a0ed2:	2b02      	cmp	r3, #2
 80a0ed4:	d801      	bhi.n	80a0eda <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a0ed6:	2000      	movs	r0, #0
 80a0ed8:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0eda:	f000 f86b 	bl	80a0fb4 <_Z19__fetch_global_Wirev>
 80a0ede:	f7ff fc11 	bl	80a0704 <_ZN7TwoWire9isEnabledEv>
 80a0ee2:	b108      	cbz	r0, 80a0ee8 <pinAvailable+0x28>
 80a0ee4:	2c01      	cmp	r4, #1
 80a0ee6:	d9f6      	bls.n	80a0ed6 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0ee8:	f7ff fdfa 	bl	80a0ae0 <_Z22__fetch_global_Serial1v>
 80a0eec:	f7ff fdf4 	bl	80a0ad8 <_ZN11USARTSerial9isEnabledEv>
 80a0ef0:	b118      	cbz	r0, 80a0efa <pinAvailable+0x3a>
 80a0ef2:	f1a4 0312 	sub.w	r3, r4, #18
 80a0ef6:	2b01      	cmp	r3, #1
 80a0ef8:	d9ed      	bls.n	80a0ed6 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0efa:	2c17      	cmp	r4, #23
 80a0efc:	bf8c      	ite	hi
 80a0efe:	2000      	movhi	r0, #0
 80a0f00:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0f02:	bd10      	pop	{r4, pc}

080a0f04 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0f04:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0f06:	b538      	push	{r3, r4, r5, lr}
 80a0f08:	4604      	mov	r4, r0
 80a0f0a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0f0c:	d80a      	bhi.n	80a0f24 <pinMode+0x20>
 80a0f0e:	29ff      	cmp	r1, #255	; 0xff
 80a0f10:	d008      	beq.n	80a0f24 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f12:	f7ff ffd5 	bl	80a0ec0 <pinAvailable>
 80a0f16:	b128      	cbz	r0, 80a0f24 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0f18:	4629      	mov	r1, r5
 80a0f1a:	4620      	mov	r0, r4
}
 80a0f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0f20:	f7ff ba38 	b.w	80a0394 <HAL_Pin_Mode>
 80a0f24:	bd38      	pop	{r3, r4, r5, pc}

080a0f26 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0f26:	b538      	push	{r3, r4, r5, lr}
 80a0f28:	4604      	mov	r4, r0
 80a0f2a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f2c:	f7ff fa3a 	bl	80a03a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0f30:	28ff      	cmp	r0, #255	; 0xff
 80a0f32:	d010      	beq.n	80a0f56 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0f34:	2806      	cmp	r0, #6
 80a0f36:	d804      	bhi.n	80a0f42 <digitalWrite+0x1c>
 80a0f38:	234d      	movs	r3, #77	; 0x4d
 80a0f3a:	fa23 f000 	lsr.w	r0, r3, r0
 80a0f3e:	07c3      	lsls	r3, r0, #31
 80a0f40:	d409      	bmi.n	80a0f56 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f42:	4620      	mov	r0, r4
 80a0f44:	f7ff ffbc 	bl	80a0ec0 <pinAvailable>
 80a0f48:	b128      	cbz	r0, 80a0f56 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f4a:	4629      	mov	r1, r5
 80a0f4c:	4620      	mov	r0, r4
}
 80a0f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f52:	f7ff ba2f 	b.w	80a03b4 <HAL_GPIO_Write>
 80a0f56:	bd38      	pop	{r3, r4, r5, pc}

080a0f58 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0f58:	b510      	push	{r4, lr}
 80a0f5a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f5c:	f7ff fa22 	bl	80a03a4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a0f60:	3804      	subs	r0, #4
 80a0f62:	b2c0      	uxtb	r0, r0
 80a0f64:	2801      	cmp	r0, #1
 80a0f66:	d908      	bls.n	80a0f7a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	f7ff ffa9 	bl	80a0ec0 <pinAvailable>
 80a0f6e:	b120      	cbz	r0, 80a0f7a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0f70:	4620      	mov	r0, r4
}
 80a0f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0f76:	f7ff ba25 	b.w	80a03c4 <HAL_GPIO_Read>
}
 80a0f7a:	2000      	movs	r0, #0
 80a0f7c:	bd10      	pop	{r4, pc}
	...

080a0f80 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a0f80:	b570      	push	{r4, r5, r6, lr}
 80a0f82:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f84:	2514      	movs	r5, #20
 80a0f86:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f88:	4e09      	ldr	r6, [pc, #36]	; (80a0fb0 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f8a:	2100      	movs	r1, #0
 80a0f8c:	f000 f9f3 	bl	80a1376 <memset>
 80a0f90:	8025      	strh	r5, [r4, #0]
 80a0f92:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f94:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0f96:	60a5      	str	r5, [r4, #8]
 80a0f98:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f9a:	4628      	mov	r0, r5
 80a0f9c:	f000 f887 	bl	80a10ae <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fa0:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0fa2:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fa4:	4628      	mov	r0, r5
 80a0fa6:	f000 f882 	bl	80a10ae <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0faa:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a0fac:	4620      	mov	r0, r4
 80a0fae:	bd70      	pop	{r4, r5, r6, pc}
 80a0fb0:	080a1640 	.word	0x080a1640

080a0fb4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0fb4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fb6:	4d0e      	ldr	r5, [pc, #56]	; (80a0ff0 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0fb8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fba:	6829      	ldr	r1, [r5, #0]
 80a0fbc:	f011 0401 	ands.w	r4, r1, #1
 80a0fc0:	d113      	bne.n	80a0fea <_Z19__fetch_global_Wirev+0x36>
 80a0fc2:	4628      	mov	r0, r5
 80a0fc4:	f7ff f86b 	bl	80a009e <__cxa_guard_acquire>
 80a0fc8:	b178      	cbz	r0, 80a0fea <_Z19__fetch_global_Wirev+0x36>
 80a0fca:	a801      	add	r0, sp, #4
 80a0fcc:	f7ff ffd8 	bl	80a0f80 <_Z17acquireWireBufferv>
 80a0fd0:	aa01      	add	r2, sp, #4
 80a0fd2:	4621      	mov	r1, r4
 80a0fd4:	4807      	ldr	r0, [pc, #28]	; (80a0ff4 <_Z19__fetch_global_Wirev+0x40>)
 80a0fd6:	f7ff fb83 	bl	80a06e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a0fda:	4628      	mov	r0, r5
 80a0fdc:	f7ff f864 	bl	80a00a8 <__cxa_guard_release>
 80a0fe0:	4a05      	ldr	r2, [pc, #20]	; (80a0ff8 <_Z19__fetch_global_Wirev+0x44>)
 80a0fe2:	4906      	ldr	r1, [pc, #24]	; (80a0ffc <_Z19__fetch_global_Wirev+0x48>)
 80a0fe4:	4803      	ldr	r0, [pc, #12]	; (80a0ff4 <_Z19__fetch_global_Wirev+0x40>)
 80a0fe6:	f000 f843 	bl	80a1070 <__aeabi_atexit>
	return wire;
}
 80a0fea:	4802      	ldr	r0, [pc, #8]	; (80a0ff4 <_Z19__fetch_global_Wirev+0x40>)
 80a0fec:	b007      	add	sp, #28
 80a0fee:	bd30      	pop	{r4, r5, pc}
 80a0ff0:	20000510 	.word	0x20000510
 80a0ff4:	20000514 	.word	0x20000514
 80a0ff8:	20000068 	.word	0x20000068
 80a0ffc:	080a0689 	.word	0x080a0689

080a1000 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1000:	b513      	push	{r0, r1, r4, lr}
 80a1002:	4c08      	ldr	r4, [pc, #32]	; (80a1024 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1004:	2300      	movs	r3, #0
 80a1006:	461a      	mov	r2, r3
 80a1008:	4619      	mov	r1, r3
 80a100a:	9300      	str	r3, [sp, #0]
 80a100c:	4620      	mov	r0, r4
 80a100e:	f7ff fbd5 	bl	80a07bc <_ZN9IPAddressC1Ehhhh>
 80a1012:	4620      	mov	r0, r4
 80a1014:	4a04      	ldr	r2, [pc, #16]	; (80a1028 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1016:	4905      	ldr	r1, [pc, #20]	; (80a102c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1018:	b002      	add	sp, #8
 80a101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a101e:	f000 b827 	b.w	80a1070 <__aeabi_atexit>
 80a1022:	bf00      	nop
 80a1024:	20000528 	.word	0x20000528
 80a1028:	20000068 	.word	0x20000068
 80a102c:	080a070d 	.word	0x080a070d

080a1030 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a1030:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a1032:	4d0b      	ldr	r5, [pc, #44]	; (80a1060 <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a1034:	6829      	ldr	r1, [r5, #0]
 80a1036:	f011 0401 	ands.w	r4, r1, #1
 80a103a:	d10f      	bne.n	80a105c <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a103c:	4628      	mov	r0, r5
 80a103e:	f7ff f82e 	bl	80a009e <__cxa_guard_acquire>
 80a1042:	b158      	cbz	r0, 80a105c <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a1044:	4621      	mov	r1, r4
 80a1046:	4807      	ldr	r0, [pc, #28]	; (80a1064 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a1048:	f7ff fca4 	bl	80a0994 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a104c:	4628      	mov	r0, r5
 80a104e:	f7ff f82b 	bl	80a00a8 <__cxa_guard_release>
 80a1052:	4a05      	ldr	r2, [pc, #20]	; (80a1068 <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a1054:	4905      	ldr	r1, [pc, #20]	; (80a106c <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a1056:	4803      	ldr	r0, [pc, #12]	; (80a1064 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a1058:	f000 f80a 	bl	80a1070 <__aeabi_atexit>
    return instance;
}
 80a105c:	4801      	ldr	r0, [pc, #4]	; (80a1064 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a105e:	bd38      	pop	{r3, r4, r5, pc}
 80a1060:	20000550 	.word	0x20000550
 80a1064:	20000540 	.word	0x20000540
 80a1068:	20000068 	.word	0x20000068
 80a106c:	080a0969 	.word	0x080a0969

080a1070 <__aeabi_atexit>:
 80a1070:	460b      	mov	r3, r1
 80a1072:	4601      	mov	r1, r0
 80a1074:	4618      	mov	r0, r3
 80a1076:	f000 b965 	b.w	80a1344 <__cxa_atexit>

080a107a <_ZdlPvj>:
 80a107a:	f7ff b80e 	b.w	80a009a <_ZdlPv>
	...

080a1080 <_ZSt15get_new_handlerv>:
 80a1080:	4b02      	ldr	r3, [pc, #8]	; (80a108c <_ZSt15get_new_handlerv+0xc>)
 80a1082:	6818      	ldr	r0, [r3, #0]
 80a1084:	f3bf 8f5f 	dmb	sy
 80a1088:	4770      	bx	lr
 80a108a:	bf00      	nop
 80a108c:	20000554 	.word	0x20000554

080a1090 <_ZnwjRKSt9nothrow_t>:
 80a1090:	b510      	push	{r4, lr}
 80a1092:	2800      	cmp	r0, #0
 80a1094:	bf14      	ite	ne
 80a1096:	4604      	movne	r4, r0
 80a1098:	2401      	moveq	r4, #1
 80a109a:	4620      	mov	r0, r4
 80a109c:	f7ff fad8 	bl	80a0650 <malloc>
 80a10a0:	b920      	cbnz	r0, 80a10ac <_ZnwjRKSt9nothrow_t+0x1c>
 80a10a2:	f7ff ffed 	bl	80a1080 <_ZSt15get_new_handlerv>
 80a10a6:	b108      	cbz	r0, 80a10ac <_ZnwjRKSt9nothrow_t+0x1c>
 80a10a8:	4780      	blx	r0
 80a10aa:	e7f6      	b.n	80a109a <_ZnwjRKSt9nothrow_t+0xa>
 80a10ac:	bd10      	pop	{r4, pc}

080a10ae <_ZnajRKSt9nothrow_t>:
 80a10ae:	f7ff bfef 	b.w	80a1090 <_ZnwjRKSt9nothrow_t>
	...

080a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a10b4:	4b24      	ldr	r3, [pc, #144]	; (80a1148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a10b6:	681a      	ldr	r2, [r3, #0]
 80a10b8:	07d0      	lsls	r0, r2, #31
 80a10ba:	bf5c      	itt	pl
 80a10bc:	2201      	movpl	r2, #1
 80a10be:	601a      	strpl	r2, [r3, #0]
 80a10c0:	4b22      	ldr	r3, [pc, #136]	; (80a114c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a10c2:	681a      	ldr	r2, [r3, #0]
 80a10c4:	07d1      	lsls	r1, r2, #31
 80a10c6:	bf5c      	itt	pl
 80a10c8:	2201      	movpl	r2, #1
 80a10ca:	601a      	strpl	r2, [r3, #0]
 80a10cc:	4b20      	ldr	r3, [pc, #128]	; (80a1150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a10ce:	681a      	ldr	r2, [r3, #0]
 80a10d0:	07d2      	lsls	r2, r2, #31
 80a10d2:	bf5c      	itt	pl
 80a10d4:	2201      	movpl	r2, #1
 80a10d6:	601a      	strpl	r2, [r3, #0]
 80a10d8:	4b1e      	ldr	r3, [pc, #120]	; (80a1154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a10da:	681a      	ldr	r2, [r3, #0]
 80a10dc:	07d0      	lsls	r0, r2, #31
 80a10de:	bf5c      	itt	pl
 80a10e0:	2201      	movpl	r2, #1
 80a10e2:	601a      	strpl	r2, [r3, #0]
 80a10e4:	4b1c      	ldr	r3, [pc, #112]	; (80a1158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a10e6:	681a      	ldr	r2, [r3, #0]
 80a10e8:	07d1      	lsls	r1, r2, #31
 80a10ea:	bf5c      	itt	pl
 80a10ec:	2201      	movpl	r2, #1
 80a10ee:	601a      	strpl	r2, [r3, #0]
 80a10f0:	4b1a      	ldr	r3, [pc, #104]	; (80a115c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a10f2:	681a      	ldr	r2, [r3, #0]
 80a10f4:	07d2      	lsls	r2, r2, #31
 80a10f6:	bf5c      	itt	pl
 80a10f8:	2201      	movpl	r2, #1
 80a10fa:	601a      	strpl	r2, [r3, #0]
 80a10fc:	4b18      	ldr	r3, [pc, #96]	; (80a1160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a10fe:	681a      	ldr	r2, [r3, #0]
 80a1100:	07d0      	lsls	r0, r2, #31
 80a1102:	bf5c      	itt	pl
 80a1104:	2201      	movpl	r2, #1
 80a1106:	601a      	strpl	r2, [r3, #0]
 80a1108:	4b16      	ldr	r3, [pc, #88]	; (80a1164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a110a:	681a      	ldr	r2, [r3, #0]
 80a110c:	07d1      	lsls	r1, r2, #31
 80a110e:	bf5c      	itt	pl
 80a1110:	2201      	movpl	r2, #1
 80a1112:	601a      	strpl	r2, [r3, #0]
 80a1114:	4b14      	ldr	r3, [pc, #80]	; (80a1168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1116:	681a      	ldr	r2, [r3, #0]
 80a1118:	07d2      	lsls	r2, r2, #31
 80a111a:	bf5c      	itt	pl
 80a111c:	2201      	movpl	r2, #1
 80a111e:	601a      	strpl	r2, [r3, #0]
 80a1120:	4b12      	ldr	r3, [pc, #72]	; (80a116c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1122:	681a      	ldr	r2, [r3, #0]
 80a1124:	07d0      	lsls	r0, r2, #31
 80a1126:	bf5c      	itt	pl
 80a1128:	2201      	movpl	r2, #1
 80a112a:	601a      	strpl	r2, [r3, #0]
 80a112c:	4b10      	ldr	r3, [pc, #64]	; (80a1170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a112e:	681a      	ldr	r2, [r3, #0]
 80a1130:	07d1      	lsls	r1, r2, #31
 80a1132:	bf5c      	itt	pl
 80a1134:	2201      	movpl	r2, #1
 80a1136:	601a      	strpl	r2, [r3, #0]
 80a1138:	4b0e      	ldr	r3, [pc, #56]	; (80a1174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a113a:	681a      	ldr	r2, [r3, #0]
 80a113c:	07d2      	lsls	r2, r2, #31
 80a113e:	bf5c      	itt	pl
 80a1140:	2201      	movpl	r2, #1
 80a1142:	601a      	strpl	r2, [r3, #0]
 80a1144:	4770      	bx	lr
 80a1146:	bf00      	nop
 80a1148:	20000584 	.word	0x20000584
 80a114c:	20000580 	.word	0x20000580
 80a1150:	2000057c 	.word	0x2000057c
 80a1154:	20000578 	.word	0x20000578
 80a1158:	20000574 	.word	0x20000574
 80a115c:	20000570 	.word	0x20000570
 80a1160:	2000056c 	.word	0x2000056c
 80a1164:	20000568 	.word	0x20000568
 80a1168:	20000564 	.word	0x20000564
 80a116c:	20000560 	.word	0x20000560
 80a1170:	2000055c 	.word	0x2000055c
 80a1174:	20000558 	.word	0x20000558

080a1178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1178:	4b18      	ldr	r3, [pc, #96]	; (80a11dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a117a:	681a      	ldr	r2, [r3, #0]
 80a117c:	07d1      	lsls	r1, r2, #31
 80a117e:	bf5c      	itt	pl
 80a1180:	2201      	movpl	r2, #1
 80a1182:	601a      	strpl	r2, [r3, #0]
 80a1184:	4b16      	ldr	r3, [pc, #88]	; (80a11e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1186:	681a      	ldr	r2, [r3, #0]
 80a1188:	07d2      	lsls	r2, r2, #31
 80a118a:	bf5c      	itt	pl
 80a118c:	2201      	movpl	r2, #1
 80a118e:	601a      	strpl	r2, [r3, #0]
 80a1190:	4b14      	ldr	r3, [pc, #80]	; (80a11e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1192:	681a      	ldr	r2, [r3, #0]
 80a1194:	07d0      	lsls	r0, r2, #31
 80a1196:	bf5c      	itt	pl
 80a1198:	2201      	movpl	r2, #1
 80a119a:	601a      	strpl	r2, [r3, #0]
 80a119c:	4b12      	ldr	r3, [pc, #72]	; (80a11e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a119e:	681a      	ldr	r2, [r3, #0]
 80a11a0:	07d1      	lsls	r1, r2, #31
 80a11a2:	bf5c      	itt	pl
 80a11a4:	2201      	movpl	r2, #1
 80a11a6:	601a      	strpl	r2, [r3, #0]
 80a11a8:	4b10      	ldr	r3, [pc, #64]	; (80a11ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a11aa:	681a      	ldr	r2, [r3, #0]
 80a11ac:	07d2      	lsls	r2, r2, #31
 80a11ae:	bf5c      	itt	pl
 80a11b0:	2201      	movpl	r2, #1
 80a11b2:	601a      	strpl	r2, [r3, #0]
 80a11b4:	4b0e      	ldr	r3, [pc, #56]	; (80a11f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a11b6:	681a      	ldr	r2, [r3, #0]
 80a11b8:	07d0      	lsls	r0, r2, #31
 80a11ba:	bf5c      	itt	pl
 80a11bc:	2201      	movpl	r2, #1
 80a11be:	601a      	strpl	r2, [r3, #0]
 80a11c0:	4b0c      	ldr	r3, [pc, #48]	; (80a11f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a11c2:	681a      	ldr	r2, [r3, #0]
 80a11c4:	07d1      	lsls	r1, r2, #31
 80a11c6:	bf5c      	itt	pl
 80a11c8:	2201      	movpl	r2, #1
 80a11ca:	601a      	strpl	r2, [r3, #0]
 80a11cc:	4b0a      	ldr	r3, [pc, #40]	; (80a11f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a11ce:	681a      	ldr	r2, [r3, #0]
 80a11d0:	07d2      	lsls	r2, r2, #31
 80a11d2:	bf5c      	itt	pl
 80a11d4:	2201      	movpl	r2, #1
 80a11d6:	601a      	strpl	r2, [r3, #0]
 80a11d8:	4770      	bx	lr
 80a11da:	bf00      	nop
 80a11dc:	200005a4 	.word	0x200005a4
 80a11e0:	200005a0 	.word	0x200005a0
 80a11e4:	2000059c 	.word	0x2000059c
 80a11e8:	20000598 	.word	0x20000598
 80a11ec:	20000594 	.word	0x20000594
 80a11f0:	20000590 	.word	0x20000590
 80a11f4:	2000058c 	.word	0x2000058c
 80a11f8:	20000588 	.word	0x20000588

080a11fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a11fc:	4b18      	ldr	r3, [pc, #96]	; (80a1260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a11fe:	681a      	ldr	r2, [r3, #0]
 80a1200:	07d1      	lsls	r1, r2, #31
 80a1202:	bf5c      	itt	pl
 80a1204:	2201      	movpl	r2, #1
 80a1206:	601a      	strpl	r2, [r3, #0]
 80a1208:	4b16      	ldr	r3, [pc, #88]	; (80a1264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a120a:	681a      	ldr	r2, [r3, #0]
 80a120c:	07d2      	lsls	r2, r2, #31
 80a120e:	bf5c      	itt	pl
 80a1210:	2201      	movpl	r2, #1
 80a1212:	601a      	strpl	r2, [r3, #0]
 80a1214:	4b14      	ldr	r3, [pc, #80]	; (80a1268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1216:	681a      	ldr	r2, [r3, #0]
 80a1218:	07d0      	lsls	r0, r2, #31
 80a121a:	bf5c      	itt	pl
 80a121c:	2201      	movpl	r2, #1
 80a121e:	601a      	strpl	r2, [r3, #0]
 80a1220:	4b12      	ldr	r3, [pc, #72]	; (80a126c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1222:	681a      	ldr	r2, [r3, #0]
 80a1224:	07d1      	lsls	r1, r2, #31
 80a1226:	bf5c      	itt	pl
 80a1228:	2201      	movpl	r2, #1
 80a122a:	601a      	strpl	r2, [r3, #0]
 80a122c:	4b10      	ldr	r3, [pc, #64]	; (80a1270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a122e:	681a      	ldr	r2, [r3, #0]
 80a1230:	07d2      	lsls	r2, r2, #31
 80a1232:	bf5c      	itt	pl
 80a1234:	2201      	movpl	r2, #1
 80a1236:	601a      	strpl	r2, [r3, #0]
 80a1238:	4b0e      	ldr	r3, [pc, #56]	; (80a1274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a123a:	681a      	ldr	r2, [r3, #0]
 80a123c:	07d0      	lsls	r0, r2, #31
 80a123e:	bf5c      	itt	pl
 80a1240:	2201      	movpl	r2, #1
 80a1242:	601a      	strpl	r2, [r3, #0]
 80a1244:	4b0c      	ldr	r3, [pc, #48]	; (80a1278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1246:	681a      	ldr	r2, [r3, #0]
 80a1248:	07d1      	lsls	r1, r2, #31
 80a124a:	bf5c      	itt	pl
 80a124c:	2201      	movpl	r2, #1
 80a124e:	601a      	strpl	r2, [r3, #0]
 80a1250:	4b0a      	ldr	r3, [pc, #40]	; (80a127c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1252:	681a      	ldr	r2, [r3, #0]
 80a1254:	07d2      	lsls	r2, r2, #31
 80a1256:	bf5c      	itt	pl
 80a1258:	2201      	movpl	r2, #1
 80a125a:	601a      	strpl	r2, [r3, #0]
 80a125c:	4770      	bx	lr
 80a125e:	bf00      	nop
 80a1260:	200005c4 	.word	0x200005c4
 80a1264:	200005c0 	.word	0x200005c0
 80a1268:	200005bc 	.word	0x200005bc
 80a126c:	200005b8 	.word	0x200005b8
 80a1270:	200005b4 	.word	0x200005b4
 80a1274:	200005b0 	.word	0x200005b0
 80a1278:	200005ac 	.word	0x200005ac
 80a127c:	200005a8 	.word	0x200005a8

080a1280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1280:	4b24      	ldr	r3, [pc, #144]	; (80a1314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1282:	681a      	ldr	r2, [r3, #0]
 80a1284:	07d0      	lsls	r0, r2, #31
 80a1286:	bf5c      	itt	pl
 80a1288:	2201      	movpl	r2, #1
 80a128a:	601a      	strpl	r2, [r3, #0]
 80a128c:	4b22      	ldr	r3, [pc, #136]	; (80a1318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a128e:	681a      	ldr	r2, [r3, #0]
 80a1290:	07d1      	lsls	r1, r2, #31
 80a1292:	bf5c      	itt	pl
 80a1294:	2201      	movpl	r2, #1
 80a1296:	601a      	strpl	r2, [r3, #0]
 80a1298:	4b20      	ldr	r3, [pc, #128]	; (80a131c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a129a:	681a      	ldr	r2, [r3, #0]
 80a129c:	07d2      	lsls	r2, r2, #31
 80a129e:	bf5c      	itt	pl
 80a12a0:	2201      	movpl	r2, #1
 80a12a2:	601a      	strpl	r2, [r3, #0]
 80a12a4:	4b1e      	ldr	r3, [pc, #120]	; (80a1320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a12a6:	681a      	ldr	r2, [r3, #0]
 80a12a8:	07d0      	lsls	r0, r2, #31
 80a12aa:	bf5c      	itt	pl
 80a12ac:	2201      	movpl	r2, #1
 80a12ae:	601a      	strpl	r2, [r3, #0]
 80a12b0:	4b1c      	ldr	r3, [pc, #112]	; (80a1324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a12b2:	681a      	ldr	r2, [r3, #0]
 80a12b4:	07d1      	lsls	r1, r2, #31
 80a12b6:	bf5c      	itt	pl
 80a12b8:	2201      	movpl	r2, #1
 80a12ba:	601a      	strpl	r2, [r3, #0]
 80a12bc:	4b1a      	ldr	r3, [pc, #104]	; (80a1328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a12be:	681a      	ldr	r2, [r3, #0]
 80a12c0:	07d2      	lsls	r2, r2, #31
 80a12c2:	bf5c      	itt	pl
 80a12c4:	2201      	movpl	r2, #1
 80a12c6:	601a      	strpl	r2, [r3, #0]
 80a12c8:	4b18      	ldr	r3, [pc, #96]	; (80a132c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a12ca:	681a      	ldr	r2, [r3, #0]
 80a12cc:	07d0      	lsls	r0, r2, #31
 80a12ce:	bf5c      	itt	pl
 80a12d0:	2201      	movpl	r2, #1
 80a12d2:	601a      	strpl	r2, [r3, #0]
 80a12d4:	4b16      	ldr	r3, [pc, #88]	; (80a1330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a12d6:	681a      	ldr	r2, [r3, #0]
 80a12d8:	07d1      	lsls	r1, r2, #31
 80a12da:	bf5c      	itt	pl
 80a12dc:	2201      	movpl	r2, #1
 80a12de:	601a      	strpl	r2, [r3, #0]
 80a12e0:	4b14      	ldr	r3, [pc, #80]	; (80a1334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a12e2:	681a      	ldr	r2, [r3, #0]
 80a12e4:	07d2      	lsls	r2, r2, #31
 80a12e6:	bf5c      	itt	pl
 80a12e8:	2201      	movpl	r2, #1
 80a12ea:	601a      	strpl	r2, [r3, #0]
 80a12ec:	4b12      	ldr	r3, [pc, #72]	; (80a1338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a12ee:	681a      	ldr	r2, [r3, #0]
 80a12f0:	07d0      	lsls	r0, r2, #31
 80a12f2:	bf5c      	itt	pl
 80a12f4:	2201      	movpl	r2, #1
 80a12f6:	601a      	strpl	r2, [r3, #0]
 80a12f8:	4b10      	ldr	r3, [pc, #64]	; (80a133c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a12fa:	681a      	ldr	r2, [r3, #0]
 80a12fc:	07d1      	lsls	r1, r2, #31
 80a12fe:	bf5c      	itt	pl
 80a1300:	2201      	movpl	r2, #1
 80a1302:	601a      	strpl	r2, [r3, #0]
 80a1304:	4b0e      	ldr	r3, [pc, #56]	; (80a1340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1306:	681a      	ldr	r2, [r3, #0]
 80a1308:	07d2      	lsls	r2, r2, #31
 80a130a:	bf5c      	itt	pl
 80a130c:	2201      	movpl	r2, #1
 80a130e:	601a      	strpl	r2, [r3, #0]
 80a1310:	4770      	bx	lr
 80a1312:	bf00      	nop
 80a1314:	200005f4 	.word	0x200005f4
 80a1318:	200005f0 	.word	0x200005f0
 80a131c:	200005ec 	.word	0x200005ec
 80a1320:	200005e8 	.word	0x200005e8
 80a1324:	200005e4 	.word	0x200005e4
 80a1328:	200005e0 	.word	0x200005e0
 80a132c:	200005dc 	.word	0x200005dc
 80a1330:	200005d8 	.word	0x200005d8
 80a1334:	200005d4 	.word	0x200005d4
 80a1338:	200005d0 	.word	0x200005d0
 80a133c:	200005cc 	.word	0x200005cc
 80a1340:	200005c8 	.word	0x200005c8

080a1344 <__cxa_atexit>:
 80a1344:	b510      	push	{r4, lr}
 80a1346:	4c05      	ldr	r4, [pc, #20]	; (80a135c <__cxa_atexit+0x18>)
 80a1348:	4613      	mov	r3, r2
 80a134a:	b12c      	cbz	r4, 80a1358 <__cxa_atexit+0x14>
 80a134c:	460a      	mov	r2, r1
 80a134e:	4601      	mov	r1, r0
 80a1350:	2002      	movs	r0, #2
 80a1352:	f3af 8000 	nop.w
 80a1356:	bd10      	pop	{r4, pc}
 80a1358:	4620      	mov	r0, r4
 80a135a:	bd10      	pop	{r4, pc}
 80a135c:	00000000 	.word	0x00000000

080a1360 <memcpy>:
 80a1360:	b510      	push	{r4, lr}
 80a1362:	1e43      	subs	r3, r0, #1
 80a1364:	440a      	add	r2, r1
 80a1366:	4291      	cmp	r1, r2
 80a1368:	d004      	beq.n	80a1374 <memcpy+0x14>
 80a136a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a136e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1372:	e7f8      	b.n	80a1366 <memcpy+0x6>
 80a1374:	bd10      	pop	{r4, pc}

080a1376 <memset>:
 80a1376:	4603      	mov	r3, r0
 80a1378:	4402      	add	r2, r0
 80a137a:	4293      	cmp	r3, r2
 80a137c:	d002      	beq.n	80a1384 <memset+0xe>
 80a137e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1382:	e7fa      	b.n	80a137a <memset+0x4>
 80a1384:	4770      	bx	lr
	...

080a1388 <srand>:
 80a1388:	b538      	push	{r3, r4, r5, lr}
 80a138a:	4b12      	ldr	r3, [pc, #72]	; (80a13d4 <srand+0x4c>)
 80a138c:	4605      	mov	r5, r0
 80a138e:	681c      	ldr	r4, [r3, #0]
 80a1390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1392:	b9d3      	cbnz	r3, 80a13ca <srand+0x42>
 80a1394:	2018      	movs	r0, #24
 80a1396:	f7ff f95b 	bl	80a0650 <malloc>
 80a139a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a139e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a13a0:	8003      	strh	r3, [r0, #0]
 80a13a2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a13a6:	8043      	strh	r3, [r0, #2]
 80a13a8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a13ac:	8083      	strh	r3, [r0, #4]
 80a13ae:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a13b2:	80c3      	strh	r3, [r0, #6]
 80a13b4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a13b8:	8103      	strh	r3, [r0, #8]
 80a13ba:	2305      	movs	r3, #5
 80a13bc:	8143      	strh	r3, [r0, #10]
 80a13be:	230b      	movs	r3, #11
 80a13c0:	8183      	strh	r3, [r0, #12]
 80a13c2:	2201      	movs	r2, #1
 80a13c4:	2300      	movs	r3, #0
 80a13c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a13ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a13cc:	2200      	movs	r2, #0
 80a13ce:	611d      	str	r5, [r3, #16]
 80a13d0:	615a      	str	r2, [r3, #20]
 80a13d2:	bd38      	pop	{r3, r4, r5, pc}
 80a13d4:	20000064 	.word	0x20000064

080a13d8 <strlen>:
 80a13d8:	4603      	mov	r3, r0
 80a13da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a13de:	2a00      	cmp	r2, #0
 80a13e0:	d1fb      	bne.n	80a13da <strlen+0x2>
 80a13e2:	1a18      	subs	r0, r3, r0
 80a13e4:	3801      	subs	r0, #1
 80a13e6:	4770      	bx	lr

080a13e8 <dynalib_user>:
 80a13e8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a13f8:	0000 0000 0100 0302 0504 0706 0908 0b0a     ................
 80a1408:	0d0c 0f0e                                   ....

080a140c <_ZL7TubeTab>:
 80a140c:	063f 4f5b 6d66 077d 6f7f 7c77 5e39 7179     ?.[Ofm}..ow|9^yq

080a141c <_ZTV7TwoWire>:
	...
 80a1424:	0689 080a 06d3 080a 06ab 080a 068b 080a     ................
 80a1434:	06b3 080a 06bb 080a 06c3 080a 06cb 080a     ................

080a1444 <_ZTV9IPAddress>:
	...
 80a144c:	071d 080a 070d 080a 070f 080a 6162 6475     ............baud
 80a145c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a146c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a147c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a148c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a149c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a14ac:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a14bc:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a14cc:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a14dc:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a14ec:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a14fc:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a150c:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a151c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a152c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a153c <_ZTVN5spark12NetworkClassE>:
	...
 80a1544:	07e5 080a 07ef 080a 07f9 080a 0803 080a     ................
 80a1554:	080d 080a 0819 080a 0825 080a 0831 080a     ........%...1...
 80a1564:	0839 080a 0843 080a 084d 080a               9...C...M...

080a1570 <_ZTV8SPIClass>:
	...
 80a1578:	0969 080a 0981 080a 005a 2b25 3330 3a64     i.......Z.%+03d:
 80a1588:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1598:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a15a8:	0000 0000                                   ....

080a15ac <_ZTV11USARTSerial>:
	...
 80a15b4:	0a29 080a 0a79 080a 0a87 080a 08b1 080a     )...y...........
 80a15c4:	0a3d 080a 0a5f 080a 0a4b 080a 0a73 080a     =..._...K...s...
 80a15d4:	0a2b 080a 0a2f 080a                         +.../...

080a15dc <_ZTV9USBSerial>:
	...
 80a15e4:	0b31 080a 0b81 080a 0b8f 080a 08b1 080a     1...............
 80a15f4:	0b6d 080a 0b33 080a 0b49 080a 0b7b 080a     m...3...I...{...
 80a1604:	0b5f 080a 0b2d 080a                         _...-...

080a160c <_ZTVN5spark9WiFiClassE>:
	...
 80a1614:	0d6b 080a 0d61 080a 0d57 080a 0cc9 080a     k...a...W.......
 80a1624:	0d4b 080a 0d3f 080a 0d33 080a 0d2b 080a     K...?...3...+...
 80a1634:	0d21 080a 0d17 080a 0cd3 080a               !...........

080a1640 <_ZSt7nothrow>:
 80a1640:	0000 0000                                   ....

080a1644 <__sf_fake_stdin>:
	...

080a1664 <__sf_fake_stdout>:
	...

080a1684 <__sf_fake_stderr>:
	...
 80a16a4:	0043                                        C.

080a16a6 <link_const_variable_data_end>:
	...

080a16a8 <link_constructors_location>:
 80a16a8:	080a016d 	.word	0x080a016d
 80a16ac:	080a0331 	.word	0x080a0331
 80a16b0:	080a07d5 	.word	0x080a07d5
 80a16b4:	080a089d 	.word	0x080a089d
 80a16b8:	080a094d 	.word	0x080a094d
 80a16bc:	080a09e1 	.word	0x080a09e1
 80a16c0:	080a0a15 	.word	0x080a0a15
 80a16c4:	080a0d75 	.word	0x080a0d75
 80a16c8:	080a1001 	.word	0x080a1001
 80a16cc:	080a10b5 	.word	0x080a10b5
 80a16d0:	080a1179 	.word	0x080a1179
 80a16d4:	080a11fd 	.word	0x080a11fd
 80a16d8:	080a1281 	.word	0x080a1281

080a16dc <link_constructors_end>:
 80a16dc:	00000000 	.word	0x00000000
